
from sympy.external import import_module
matchpy = import_module("matchpy")

if matchpy:
    Wildcard, Pattern, ReplacementRule, ManyToOneReplacer = matchpy.Wildcard, matchpy.Pattern, matchpy.ReplacementRule, matchpy.ManyToOneReplacer
else:
    Wildcard, Pattern, ReplacementRule, ManyToOneReplacer = object, object, object, object
    class Wildcard(object):
        def __init__(self):
            pass
        @staticmethod
        def dot(x):
            pass
        @staticmethod
        def symbol(x):
            pass
    class Pattern(object):
        def __init__(self, a, b):
            pass

from sympy.integrals.rubi.operation import (Int, Mul, Add, Pow, And, Or, ZeroQ, NonzeroQ, List, Log, RemoveContent, PositiveIntegerQ, NegativeIntegerQ, PositiveQ, IntegerQ, IntegersQ, PosQ, NegQ, FracPart, IntPart, RationalQ, Subst, LinearQ, Sqrt, NegativeQ, ArcCosh, Rational, Less, Not, Simplify, Denominator, Coefficient, SumSimplerQ, Equal, Unequal, SimplerQ, LessEqual, IntLinearcQ, Greater, GreaterEqual, FractionQ, ExpandIntegrand, With, Set, Hypergeometric2F1, TogetherSimplify, Inequality, PerfectSquareQ, EvenQ, OddQ, EqQ, NiceSqrtQ, IntQuadraticQ, If, LeafCount, QuadraticQ, LinearMatchQ, QuadraticMatchQ, AtomQ, SplitProduct, SumBaseQ, NegSumBaseQ, IntBinomialQ, LinearPairQ, SimplerSqrtQ, PseudoBinomialPairQ, Rt, PolynomialQ, BinomialQ, BinomialMatchQ, BinomialDegree, GeneralizedBinomialQ, GeneralizedBinomialMatchQ, TrinomialQ, TrinomialMatchQ, GeneralizedTrinomialQ, GeneralizedTrinomialMatchQ, GeneralizedTrinomialDegree, PolyQ, Coeff, SumQ, Expon)
from sympy.integrals.rubi.symbol import VariableSymbol, Integer
from sympy.integrals.rubi.constraint import cons, FreeQ
from sympy.utilities.decorator import doctest_depends_on

A, B, C, a, b, c, d, e, f, g, h, i, j, k, x, u, v, w, p, q, r, s, z = map(VariableSymbol, 'ABCabcdefghijkxuvwpqrsz')
n, m = map(VariableSymbol, 'nm')
zoo = VariableSymbol('zoo')
mn = VariableSymbol('mn')
non2 = VariableSymbol('non2')
a1 = VariableSymbol('a1')
a2 = VariableSymbol('a2')
b1 = VariableSymbol('b1')
b2 = VariableSymbol('b2')
c1 = VariableSymbol('c1')
c2 = VariableSymbol('c2')
d1 = VariableSymbol('d1')
d2 = VariableSymbol('d2')
e1 = VariableSymbol('e1')
e2 = VariableSymbol('e2')
f1 = VariableSymbol('f1')
f2 = VariableSymbol('f2')
n2 = VariableSymbol('n2')
n3 = VariableSymbol('n3')
Pq = VariableSymbol('Pq')
Px = VariableSymbol('Px')
jn = VariableSymbol('jn')

A_, B_, C_, a_, b_, c_, d_, e_, f_, g_, h_, i_, j_, k_, p_, q_, r_, s_, w_, z_ = map(Wildcard.dot, 'ABCabcdefghijkpqrswz')
n_, m_ = map(Wildcard.dot, 'nm')
mn_ = Wildcard.dot('mn')
non2_ = Wildcard.dot('non2')
a1_ = Wildcard.dot('a1')
a2_ = Wildcard.dot('a2')
b1_ = Wildcard.dot('b1')
b2_ = Wildcard.dot('b2')
c1_ = Wildcard.dot('c1')
c2_ = Wildcard.dot('c2')
d1_ = Wildcard.dot('d1')
d2_ = Wildcard.dot('d2')
n2_ = Wildcard.dot('n2')
e1_ = Wildcard.dot('e1')
e2_ = Wildcard.dot('e2')
f1_ = Wildcard.dot('f1')
f2_ = Wildcard.dot('f2')
n1_ = Wildcard.dot('n1')
n2_ = Wildcard.dot('n2')
n3_ = Wildcard.dot('n3')
Pq_ = Wildcard.dot('Pq')
Px_ = Wildcard.dot('Px')
jn_ = Wildcard.dot('jn')
x_, u_, v_ = map(Wildcard.symbol, 'xuv')

def rubi_object():
    rubi = ManyToOneReplacer()

    pattern1 = Pattern(Int(a, x_), FreeQ(a, x), cons(True, (x,)))
    rule1 = ReplacementRule(pattern1, lambda x : Mul(Integer(a), x))
    rubi.add(rule1)

    pattern2 = Pattern(Int(Pow(x_, Integer(-1)), x_), cons(True, (x,)))
    rule2 = ReplacementRule(pattern2, lambda x : Log(x))
    rubi.add(rule2)

    pattern3 = Pattern(Int(Pow(x_, Wildcard.optional('m', Integer(1))), x_), FreeQ(m, x), cons(And(NonzeroQ(Add(m_, Integer(1)))), (m, x)))
    rule3 = ReplacementRule(pattern3, lambda m, x : Mul(Pow(x, Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1))))
    rubi.add(rule3)

    pattern4 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule4 = ReplacementRule(pattern4, lambda b, x, a : Mul(Log(RemoveContent(Add(a, Mul(b, x)), x)), Pow(b, Integer(-1))))
    rubi.add(rule4)

    pattern5 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), cons(And(NonzeroQ(Add(m_, Integer(1)))), (b, m, x, a)))
    rule5 = ReplacementRule(pattern5, lambda b, m, x, a : Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Mul(b, Add(m, Integer(1))), Integer(-1))))
    rubi.add(rule5)

    pattern6 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_)), m_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (x, u, m, b, a)))
    rule6 = ReplacementRule(pattern6, lambda x, u, m, b, a : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Pow(Add(a, Mul(b, x)), m), x), x, u)))
    rubi.add(rule6)

    pattern7 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_)))), (c, x, b, a, d)))
    rule7 = ReplacementRule(pattern7, lambda c, x, b, a, d : Int(Mul(Integer(1), Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), Integer(-1))), x))
    rubi.add(rule7)

    pattern8 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))))), (c, x, b, a, d)))
    rule8 = ReplacementRule(pattern8, lambda c, x, b, a, d : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Integer(1), Pow(Add(a, Mul(b, x)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Integer(1), Pow(Add(c, Mul(d, x)), Integer(-1))), x)))))
    rubi.add(rule8)

    pattern9 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), ZeroQ(Add(m_, n_, Integer(2))), NonzeroQ(Add(m_, Integer(1)))), (n, c, x, m, b, a, d)))
    rule9 = ReplacementRule(pattern9, lambda n, c, x, m, b, a, d : Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1))), Integer(-1)))))
    rubi.add(rule9)

    pattern10 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PositiveIntegerQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (c, x, m, b, a, d)))
    rule10 = ReplacementRule(pattern10, lambda c, x, m, b, a, d : Add(Mul(x, Pow(Add(a, Mul(b, x)), m), Mul(Pow(Add(c, Mul(d, x)), m), Pow(Add(Mul(Integer(2), m), Integer(1)), Integer(-1)))), Mul(Integer(2), a, c, Mul(m, Pow(Add(Mul(Integer(2), m), Integer(1)), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), Add(m, Integer(-1)))), x))))
    rubi.add(rule10)

    pattern11 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-3), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-3), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_)))), (c, x, b, a, d)))
    rule11 = ReplacementRule(pattern11, lambda c, x, b, a, d : Mul(x, Pow(Mul(a, c, Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x)))), Integer(-1))))
    rubi.add(rule11)

    pattern12 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), NegativeIntegerQ(Add(m_, Mul(Integer(3), Pow(Integer(2), Integer(-1)))))), (c, x, m, b, a, d)))
    rule12 = ReplacementRule(pattern12, lambda c, x, m, b, a, d : Add(Mul(Mul(Integer(-1), x), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Pow(Add(c, Mul(d, x)), Add(m, Integer(1))), Pow(Mul(Integer(2), a, c, Add(m, Integer(1))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(2), m), Integer(3)), Pow(Mul(Integer(2), a, c, Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(m, Integer(1)))), x))))
    rubi.add(rule12)

    pattern13 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('m', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), Or(IntegerQ(m_), And(PositiveQ(a_), PositiveQ(c_)))), (c, x, m, b, a, d)))
    rule13 = ReplacementRule(pattern13, lambda c, x, m, b, a, d : Int(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m), x))
    rubi.add(rule13)

    pattern14 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PositiveQ(a_), ZeroQ(Add(a_, c_))), (c, x, b, a, d)))
    rule14 = ReplacementRule(pattern14, lambda c, x, b, a, d : Mul(ArcCosh(Mul(b, Mul(x, Pow(a, Integer(-1))))), Pow(b, Integer(-1))))
    rubi.add(rule14)

    pattern15 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_)))), (c, x, b, a, d)))
    rule15 = ReplacementRule(pattern15, lambda c, x, b, a, d : Mul(Integer(2), Subst(Int(Mul(Integer(1), Pow(Add(b, Mul(Integer(-1), Mul(d, Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(Sqrt(Add(a, Mul(b, x))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1))))))
    rubi.add(rule15)

    pattern16 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), Not(IntegerQ(Mul(Integer(2), m_)))), (c, x, m, b, a, d)))
    rule16 = ReplacementRule(pattern16, lambda c, x, m, b, a, d : Mul(Pow(Add(a, Mul(b, x)), FracPart(m)), Mul(Pow(Add(c, Mul(d, x)), FracPart(m)), Pow(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), FracPart(m)), Integer(-1))), Int(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m), x)))
    rubi.add(rule16)

    pattern17 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-5), Integer(4))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PosQ(Mul(b_, Mul(d_, Pow(Mul(a_, c_), Integer(-1)))))), (c, x, b, a, d)))
    rule17 = ReplacementRule(pattern17, lambda c, x, b, a, d : Add(Mul(Integer(-2), Pow(Mul(b, Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(4), Integer(-1)))), Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(4), Integer(-1))))), Integer(-1))), Mul(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(Mul(Integer(2), b), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(5), Pow(Integer(4), Integer(-1)))), Pow(Add(c, Mul(d, x)), Mul(Integer(5), Pow(Integer(4), Integer(-1))))), Integer(-1))), x))))
    rubi.add(rule17)

    pattern18 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-9), Integer(4))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PosQ(Mul(b_, Mul(d_, Pow(Mul(a_, c_), Integer(-1)))))), (c, x, b, a, d)))
    rule18 = ReplacementRule(pattern18, lambda c, x, b, a, d : Add(Mul(Integer(-4), Pow(Mul(Integer(5), b, Pow(Add(a, Mul(b, x)), Mul(Integer(5), Pow(Integer(4), Integer(-1)))), Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(4), Integer(-1))))), Integer(-1))), Mul(Integer(-1), Mul(Mul(d, Pow(Mul(Integer(5), b), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(5), Pow(Integer(4), Integer(-1)))), Pow(Add(c, Mul(d, x)), Mul(Integer(5), Pow(Integer(4), Integer(-1))))), Integer(-1))), x)))))
    rubi.add(rule18)

    pattern19 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), IntegerQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), IntegerQ(Add(n_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Less(Integer(0), m_, n_)), (n, c, x, m, b, a, d)))
    rule19 = ReplacementRule(pattern19, lambda n, c, x, m, b, a, d : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Pow(Add(c, Mul(d, x)), n), Pow(Mul(b, Add(m, n, Integer(1))), Integer(-1)))), Mul(Integer(2), c, Mul(n, Pow(Add(m, n, Integer(1)), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1)))), x))))
    rubi.add(rule19)

    pattern20 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), IntegerQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), IntegerQ(Add(n_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Less(m_, n_, Integer(0))), (n, c, x, m, b, a, d)))
    rule20 = ReplacementRule(pattern20, lambda n, c, x, m, b, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(a, Mul(b, x)), Add(m, Integer(1)))), Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Mul(Integer(2), a, d, Add(m, Integer(1))), Integer(-1)))), Mul(Mul(Add(m, n, Integer(2)), Pow(Mul(Integer(2), a, Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule20)

    pattern21 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), PositiveIntegerQ(m_), Or(Not(IntegerQ(n_)), And(ZeroQ(c_), LessEqual(Add(Mul(Integer(7), m_), Mul(Integer(4), n_)), Integer(0))), Less(Add(Mul(Integer(9), m_), Mul(Integer(5), Add(n_, Integer(1)))), Integer(0)), Greater(Add(m_, n_, Integer(2)), Integer(0)))), (n, c, x, m, b, a, d)))
    rule21 = ReplacementRule(pattern21, lambda n, c, x, m, b, a, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x), x))
    rubi.add(rule21)

    pattern22 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), NegativeIntegerQ(m_), IntegerQ(n_), Not(And(PositiveIntegerQ(n_), Less(Add(m_, n_, Integer(2)), Integer(0))))), (n, c, x, m, b, a, d)))
    rule22 = ReplacementRule(pattern22, lambda n, c, x, m, b, a, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x), x))
    rubi.add(rule22)

    pattern23 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(n_), Greater(n_, Integer(0))), (n, c, x, b, a, d)))
    rule23 = ReplacementRule(pattern23, lambda n, c, x, b, a, d : Add(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Mul(b, n), Integer(-1))), Mul(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(b, Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(b, x)), Integer(-1))), x))))
    rubi.add(rule23)

    pattern24 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(n_), Less(n_, Integer(-1))), (n, c, x, b, a, d)))
    rule24 = ReplacementRule(pattern24, lambda n, c, x, b, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(c, Mul(d, x)), Add(n, Integer(1)))), Pow(Mul(Add(n, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1))), Mul(b, Mul(Add(n, Integer(1)), Pow(Mul(Add(n, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(a, Mul(b, x)), Integer(-1))), x))))
    rubi.add(rule24)

    pattern25 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(Mul(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Pow(b_, Integer(-1))))), (c, x, b, a, d)))
    rule25 = ReplacementRule(pattern25, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(Integer(-1), Log(RemoveContent(Add(a, Mul(b, x)), x))), Pow(Mul(Integer(2), b, Integer(q)), Integer(-1))), Mul(Integer(-1), Mul(Mul(Integer(3), Pow(Mul(Integer(2), b, Integer(q)), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))))), Mul(Mul(Integer(3), Pow(Mul(Integer(2), b), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))))))
    rubi.add(rule25)

    pattern26 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Pow(b_, Integer(-1))))), (c, x, b, a, d)))
    rule26 = ReplacementRule(pattern26, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Log(RemoveContent(Add(a, Mul(b, x)), x)), Pow(Mul(Integer(2), b, Integer(q)), Integer(-1))), Mul(Integer(-1), Mul(Mul(Integer(3), Pow(Mul(Integer(2), b, Integer(q)), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))))), Mul(Mul(Integer(3), Pow(Mul(Integer(2), b), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))))))
    rubi.add(rule26)

    pattern27 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-2), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(Mul(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Pow(b_, Integer(-1))))), (c, x, b, a, d)))
    rule27 = ReplacementRule(pattern27, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(Integer(-1), Log(RemoveContent(Add(a, Mul(b, x)), x))), Pow(Mul(Integer(2), b, Pow(Integer(q), Integer(2))), Integer(-1))), Mul(Integer(-1), Mul(Mul(Integer(3), Pow(Mul(Integer(2), b, Pow(Integer(q), Integer(2))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))))), Mul(Integer(-1), Mul(Mul(Integer(3), Pow(Mul(Integer(2), b, Integer(q)), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))))))))
    rubi.add(rule27)

    pattern28 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-2), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Pow(b_, Integer(-1))))), (c, x, b, a, d)))
    rule28 = ReplacementRule(pattern28, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(Integer(-1), Log(RemoveContent(Add(a, Mul(b, x)), x))), Pow(Mul(Integer(2), b, Pow(Integer(q), Integer(2))), Integer(-1))), Mul(Mul(Integer(3), Pow(Mul(Integer(2), b, Pow(Integer(q), Integer(2))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Mul(Mul(Integer(3), Pow(Mul(Integer(2), b, Integer(q)), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))))))
    rubi.add(rule28)

    pattern29 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(n_), Less(Integer(-1), n_, Integer(0))), (n, c, x, b, a, d)))
    rule29 = ReplacementRule(pattern29, lambda n, c, x, b, a, d : With(List(Set(Integer(p), Denominator(n))), Mul(Integer(p), Subst(Int(Mul(Pow(x, Add(Mul(Integer(p), Add(n, Integer(1))), Integer(-1))), Pow(Add(Mul(a, d), Mul(Integer(-1), Mul(b, c)), Mul(b, Pow(x, Integer(p)))), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(p), Integer(-1))))))))
    rubi.add(rule29)

    pattern30 = Pattern(Int(Mul(Pow(x_, Integer(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(Not(IntegerQ(n_))), (c, n, d, x)))
    rule30 = ReplacementRule(pattern30, lambda c, n, d, x : Mul(Mul(Mul(Integer(-1), Pow(Add(c, Mul(d, x)), Add(n, Integer(1)))), Pow(Mul(c, Add(n, Integer(1))), Integer(-1))), Hypergeometric2F1(Integer(1), Add(n, Integer(1)), Add(n, Integer(2)), Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1))))))))
    rubi.add(rule30)

    pattern31 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Not(IntegerQ(n_))), (n, c, x, b, a, d)))
    rule31 = ReplacementRule(pattern31, lambda n, c, x, b, a, d : Mul(Mul(Mul(Integer(-1), Pow(Add(c, Mul(d, x)), Add(n, Integer(1)))), Pow(Mul(Add(n, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1))), Hypergeometric2F1(Integer(1), Add(n, Integer(1)), Add(n, Integer(2)), TogetherSimplify(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))))))))
    rubi.add(rule31)

    pattern32 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(m_, n_), Less(m_, Integer(-1)), Greater(n_, Integer(0)), Not(And(IntegerQ(n_), Not(IntegerQ(m_)))), Not(And(IntegerQ(Add(m_, n_)), LessEqual(Add(m_, n_, Integer(2)), Integer(0)), Or(FractionQ(m_), GreaterEqual(Add(Mul(Integer(2), n_), m_, Integer(1)), Integer(0))))), IntLinearcQ(a_, b_, c_, d_, m_, n_, x_)), (n, c, x, m, b, a, d)))
    rule32 = ReplacementRule(pattern32, lambda n, c, x, m, b, a, d : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Pow(Add(c, Mul(d, x)), n), Pow(Mul(b, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(d, Mul(n, Pow(Mul(b, Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1)))), x)))))
    rubi.add(rule32)

    pattern33 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(m_, n_), Less(m_, Integer(-1)), Not(And(Less(n_, Integer(-1)), Or(ZeroQ(a_), And(NonzeroQ(c_), Less(m_, n_), IntegerQ(n_))))), IntLinearcQ(a_, b_, c_, d_, m_, n_, x_)), (n, c, x, m, b, a, d)))
    rule33 = ReplacementRule(pattern33, lambda n, c, x, m, b, a, d : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(d, Mul(Add(m, n, Integer(2)), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n)), x)))))
    rubi.add(rule33)

    pattern34 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(m_, n_), Greater(n_, Integer(0)), Unequal(Add(m_, n_, Integer(1)), Integer(0)), Not(And(PositiveIntegerQ(m_), Or(Not(IntegerQ(n_)), Less(Integer(0), m_, n_)))), Not(And(IntegerQ(Add(m_, n_)), Less(Add(m_, n_, Integer(2)), Integer(0)))), IntLinearcQ(a_, b_, c_, d_, m_, n_, x_)), (n, c, x, m, b, a, d)))
    rule34 = ReplacementRule(pattern34, lambda n, c, x, m, b, a, d : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Pow(Add(c, Mul(d, x)), n), Pow(Mul(b, Add(m, n, Integer(1))), Integer(-1)))), Mul(n, Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(Mul(b, Add(m, n, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1)))), x))))
    rubi.add(rule34)

    pattern35 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(b_, d_)), PositiveQ(Add(a_, c_))), (c, x, b, a, d)))
    rule35 = ReplacementRule(pattern35, lambda c, x, b, a, d : Int(Mul(Integer(1), Pow(Sqrt(Add(Mul(a, c), Mul(Integer(-1), Mul(b, Add(a, Mul(Integer(-1), c)), x)), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Pow(x, Integer(2)))))), Integer(-1))), x))
    rubi.add(rule35)

    pattern36 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PositiveQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), PositiveQ(b_)), (c, x, b, a, d)))
    rule36 = ReplacementRule(pattern36, lambda c, x, b, a, d : Mul(Mul(Integer(2), Pow(Sqrt(b), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Sqrt(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)), Mul(d, Pow(x, Integer(2))))), Integer(-1))), x), x, Sqrt(Add(a, Mul(b, x))))))
    rubi.add(rule36)

    pattern37 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), ZeroQ(Add(b_, Mul(Integer(-1), d_)))), (c, x, b, a, d)))
    rule37 = ReplacementRule(pattern37, lambda c, x, b, a, d : Mul(Mul(Integer(2), Pow(b, Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Sqrt(Add(c, Mul(Integer(-1), a), Pow(x, Integer(2)))), Integer(-1))), x), x, Sqrt(Add(a, Mul(b, x))))))
    rubi.add(rule37)

    pattern38 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))))), (c, x, b, a, d)))
    rule38 = ReplacementRule(pattern38, lambda c, x, b, a, d : Mul(Integer(2), Subst(Int(Mul(Integer(1), Pow(Add(b, Mul(Integer(-1), Mul(d, Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(Sqrt(Add(a, Mul(b, x))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1))))))
    rubi.add(rule38)

    pattern39 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(m_), Less(Integer(-1), m_, Integer(0)), LessEqual(Integer(3), Denominator(m_), Integer(4))), (c, x, m, b, a, d)))
    rule39 = ReplacementRule(pattern39, lambda c, x, m, b, a, d : Mul(Pow(Add(a, Mul(b, x)), m), Mul(Pow(Add(c, Mul(d, x)), m), Pow(Pow(Add(Mul(a, c), Mul(Add(Mul(b, c), Mul(a, d)), x), Mul(b, d, Pow(x, Integer(2)))), m), Integer(-1))), Int(Pow(Add(Mul(a, c), Mul(Add(Mul(b, c), Mul(a, d)), x), Mul(b, d, Pow(x, Integer(2)))), m), x)))
    rubi.add(rule39)

    pattern40 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(3))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-2), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), PosQ(Mul(d_, Pow(b_, Integer(-1))))), (c, x, b, a, d)))
    rule40 = ReplacementRule(pattern40, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(d, Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(q), Pow(d, Integer(-1))), ArcTan(Add(Mul(Integer(2), Integer(q), Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Mul(Sqrt(Integer(3)), Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1)))), Mul(Integer(1), Pow(Sqrt(Integer(3)), Integer(-1)))))), Mul(Integer(-1), Mul(Mul(Integer(q), Pow(Mul(Integer(2), d), Integer(-1))), Log(Add(c, Mul(d, x))))), Mul(Integer(-1), Mul(Integer(3), Mul(Integer(q), Pow(Mul(Integer(2), d), Integer(-1))), Log(Add(Mul(Integer(q), Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1)))), Integer(-1))))))))
    rubi.add(rule40)

    pattern41 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(3))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-2), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), NegQ(Mul(d_, Pow(b_, Integer(-1))))), (c, x, b, a, d)))
    rule41 = ReplacementRule(pattern41, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), d), Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Sqrt(Integer(3)), Mul(Integer(q), Pow(d, Integer(-1))), ArcTan(Add(Mul(Integer(1), Pow(Sqrt(Integer(3)), Integer(-1))), Mul(Integer(-1), Mul(Integer(2), Integer(q), Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Mul(Sqrt(Integer(3)), Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1)))))))), Mul(Mul(Integer(q), Pow(Mul(Integer(2), d), Integer(-1))), Log(Add(c, Mul(d, x)))), Mul(Integer(3), Mul(Integer(q), Pow(Mul(Integer(2), d), Integer(-1))), Log(Add(Mul(Integer(q), Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1)))), Integer(1)))))))
    rubi.add(rule41)

    pattern42 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(m_, n_), Less(Integer(-1), m_, Integer(0)), Equal(Add(m_, n_, Integer(1)), Integer(0))), (n, c, x, m, b, a, d)))
    rule42 = ReplacementRule(pattern42, lambda n, c, x, m, b, a, d : With(List(Set(Integer(p), Denominator(m))), Mul(Integer(p), Subst(Int(Mul(Pow(x, Add(Mul(Integer(p), Add(m, Integer(1))), Integer(-1))), Pow(Add(b, Mul(Integer(-1), Mul(d, Pow(x, Integer(p))))), Integer(-1))), x), x, Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(p), Integer(-1)))), Pow(Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(p), Integer(-1)))), Integer(-1)))))))
    rubi.add(rule42)

    pattern43 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(m_, n_), Less(Integer(-1), m_, Integer(0)), Less(Integer(-1), n_, Integer(0)), LessEqual(Denominator(n_), Denominator(m_)), IntLinearcQ(a_, b_, c_, d_, m_, n_, x_)), (n, c, x, m, b, a, d)))
    rule43 = ReplacementRule(pattern43, lambda n, c, x, m, b, a, d : With(List(Set(Integer(p), Denominator(m))), Mul(Mul(Integer(p), Pow(b, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(p), Add(m, Integer(1))), Integer(-1))), Pow(Add(c, Mul(Integer(-1), Mul(a, Mul(d, Pow(b, Integer(-1))))), Mul(d, Mul(Pow(x, Integer(p)), Pow(b, Integer(-1))))), n)), x), x, Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(p), Integer(-1))))))))
    rubi.add(rule43)

    pattern44 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), NegativeIntegerQ(Simplify(Add(m_, n_, Integer(2)))), NonzeroQ(Add(m_, Integer(1))), Or(SumSimplerQ(m_, Integer(1)), Not(SumSimplerQ(n_, Integer(1))))), (n, c, x, m, b, a, d)))
    rule44 = ReplacementRule(pattern44, lambda n, c, x, m, b, a, d : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(d, Mul(Simplify(Add(m, n, Integer(2))), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Simplify(Add(m, Integer(1)))), Pow(Add(c, Mul(d, x)), n)), x)))))
    rubi.add(rule44)

    pattern45 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Or(IntegerQ(n_), And(PositiveQ(c_), Not(And(ZeroQ(Add(n_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Pow(d_, Integer(2))))), PositiveQ(Mul(Mul(Integer(-1), d_), Pow(Mul(b_, c_), Integer(-1))))))))), (n, c, x, m, b, d)))
    rule45 = ReplacementRule(pattern45, lambda n, c, x, m, b, d : Mul(Pow(c, n), Mul(Pow(Mul(b, x), Add(m, Integer(1))), Pow(Mul(b, Add(m, Integer(1))), Integer(-1))), Hypergeometric2F1(Mul(Integer(-1), n), Add(m, Integer(1)), Add(m, Integer(2)), Mul(Mul(Integer(-1), d), Mul(x, Pow(c, Integer(-1)))))))
    rubi.add(rule45)

    pattern46 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(n_)), Or(IntegerQ(m_), PositiveQ(Mul(Mul(Integer(-1), d_), Pow(Mul(b_, c_), Integer(-1)))))), (n, c, x, m, b, d)))
    rule46 = ReplacementRule(pattern46, lambda n, c, x, m, b, d : Mul(Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Mul(d, Add(n, Integer(1)), Pow(Mul(Mul(Integer(-1), d), Pow(Mul(b, c), Integer(-1))), m)), Integer(-1))), Hypergeometric2F1(Mul(Integer(-1), m), Add(n, Integer(1)), Add(n, Integer(2)), Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1))))))))
    rubi.add(rule46)

    pattern47 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(PositiveQ(c_)), Not(PositiveQ(Mul(Mul(Integer(-1), d_), Pow(Mul(b_, c_), Integer(-1))))), Or(And(RationalQ(m_), Not(And(ZeroQ(Add(n_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Pow(d_, Integer(2)))))))), Not(RationalQ(n_)))), (n, c, x, m, b, d)))
    rule47 = ReplacementRule(pattern47, lambda n, c, x, m, b, d : Mul(Pow(c, IntPart(n)), Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Pow(Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1))))), FracPart(n)), Integer(-1))), Int(Mul(Pow(Mul(b, x), m), Pow(Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1))))), n)), x)))
    rubi.add(rule47)

    pattern48 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(PositiveQ(c_)), Not(PositiveQ(Mul(Mul(Integer(-1), d_), Pow(Mul(b_, c_), Integer(-1)))))), (n, c, x, m, b, d)))
    rule48 = ReplacementRule(pattern48, lambda n, c, x, m, b, d : Mul(Pow(Mul(Mul(Integer(-1), b), Mul(c, Pow(d, Integer(-1)))), IntPart(m)), Mul(Pow(Mul(b, x), FracPart(m)), Pow(Pow(Mul(Mul(Integer(-1), d), Mul(x, Pow(c, Integer(-1)))), FracPart(m)), Integer(-1))), Int(Mul(Pow(Mul(Mul(Integer(-1), d), Mul(x, Pow(c, Integer(-1)))), m), Pow(Add(c, Mul(d, x)), n)), x)))
    rubi.add(rule48)

    pattern49 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Not(IntegerQ(m_)), IntegerQ(n_)), (n, c, x, m, b, a, d)))
    rule49 = ReplacementRule(pattern49, lambda n, c, x, m, b, a, d : Mul(Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), n), Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Mul(Pow(b, Add(n, Integer(1))), Add(m, Integer(1))), Integer(-1))), Hypergeometric2F1(Mul(Integer(-1), n), Add(m, Integer(1)), Add(m, Integer(2)), Mul(Mul(Integer(-1), d), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))))))
    rubi.add(rule49)

    pattern50 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), Or(RationalQ(m_), Not(And(RationalQ(n_), PositiveQ(Mul(Mul(Integer(-1), d_), Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))))))), (n, c, x, m, b, a, d)))
    rule50 = ReplacementRule(pattern50, lambda n, c, x, m, b, a, d : Mul(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Mul(b, Add(m, Integer(1)), Pow(Mul(b, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), n)), Integer(-1))), Hypergeometric2F1(Mul(Integer(-1), n), Add(m, Integer(1)), Add(m, Integer(2)), Mul(Mul(Integer(-1), d), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))))))
    rubi.add(rule50)

    pattern51 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), Or(RationalQ(m_), Not(SimplerQ(Add(n_, Integer(1)), Add(m_, Integer(1)))))), (n, c, x, m, b, a, d)))
    rule51 = ReplacementRule(pattern51, lambda n, c, x, m, b, a, d : Mul(Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Mul(Pow(Mul(b, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), IntPart(n)), Pow(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), FracPart(n))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))))), n)), x)))
    rubi.add(rule51)

    pattern52 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), u_)), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(LinearQ(u_, x_), NonzeroQ(Coefficient(u_, x_, Integer(0)))), (n, c, x, m, u, b, a, d)))
    rule52 = ReplacementRule(pattern52, lambda n, c, x, m, u, b, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x), x, u)))
    rubi.add(rule52)

    pattern53 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), ZeroQ(Add(m_, Mul(Integer(-1), n_))), IntegerQ(m_)), (e, n, f, c, x, m, b, p, a, d)))
    rule53 = ReplacementRule(pattern53, lambda e, n, f, c, x, m, b, p, a, d : Int(Mul(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m), Pow(Add(e, Mul(f, x)), p)), x))
    rubi.add(rule53)

    pattern54 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, Integer(2))), ZeroQ(Add(Mul(a_, d_, f_, Add(n_, p_, Integer(2))), Mul(Integer(-1), Mul(b_, Add(Mul(d_, e_, Add(n_, Integer(1))), Mul(c_, f_, Add(p_, Integer(1))))))))), (e, n, f, c, x, b, p, a, d)))
    rule54 = ReplacementRule(pattern54, lambda e, n, f, c, x, b, p, a, d : Mul(b, Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(d, f, Add(n, p, Integer(2))), Integer(-1)))))
    rubi.add(rule54)

    pattern55 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('n', Integer(1))), Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(PositiveIntegerQ(p_), ZeroQ(Add(Mul(b_, e_), Mul(a_, f_))), Not(And(NegativeIntegerQ(Add(n_, p_, Integer(2))), Greater(Add(n_, Mul(Integer(2), p_)), Integer(0))))), (f, n, e, x, b, p, a, d)))
    rule55 = ReplacementRule(pattern55, lambda f, n, e, x, b, p, a, d : Int(ExpandIntegrand(Mul(Add(a, Mul(b, x)), Pow(Mul(d, x), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule55)

    pattern56 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('n', Integer(1))), Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(PositiveIntegerQ(p_), Or(NonzeroQ(Add(n_, Integer(1))), Equal(p_, Integer(1))), NonzeroQ(Add(Mul(b_, e_), Mul(a_, f_))), Or(Not(IntegerQ(n_)), Less(Add(Mul(Integer(9), p_), Mul(Integer(5), n_)), Integer(0)), GreaterEqual(Add(n_, p_, Integer(1)), Integer(0)), And(GreaterEqual(Add(n_, p_, Integer(2)), Integer(0)), RationalQ(a_, b_, d_, e_, f_)))), (f, n, e, x, b, p, a, d)))
    rule56 = ReplacementRule(pattern56, lambda f, n, e, x, b, p, a, d : Int(ExpandIntegrand(Mul(Add(a, Mul(b, x)), Pow(Mul(d, x), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule56)

    pattern57 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Or(NegativeIntegerQ(n_, p_), ZeroQ(Add(p_, Integer(-1))), And(PositiveIntegerQ(p_), Or(Not(IntegerQ(n_)), LessEqual(Add(Mul(Integer(9), p_), Mul(Integer(5), Add(n_, Integer(2)))), Integer(0)), GreaterEqual(Add(n_, p_, Integer(1)), Integer(0)), And(GreaterEqual(Add(n_, p_, Integer(2)), Integer(0)), RationalQ(a_, b_, c_, d_, e_, f_)))))), (e, n, f, c, x, b, p, a, d)))
    rule57 = ReplacementRule(pattern57, lambda e, n, f, c, x, b, p, a, d : Int(ExpandIntegrand(Mul(Add(a, Mul(b, x)), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule57)

    pattern58 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n_, p_, Integer(2))), NonzeroQ(Add(p_, Integer(1))), Not(And(SumSimplerQ(n_, Integer(1)), Not(SumSimplerQ(p_, Integer(1)))))), (e, n, f, c, x, b, p, a, d)))
    rule58 = ReplacementRule(pattern58, lambda e, n, f, c, x, b, p, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(f, Add(p, Integer(1)), Add(Mul(c, f), Mul(Integer(-1), Mul(d, e)))), Integer(-1)))), Mul(Mul(b, Pow(f, Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1)))), x))))
    rubi.add(rule58)

    pattern59 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(NonzeroQ(Add(n_, p_, Integer(2))), RationalQ(p_), Less(p_, Integer(-1)), Or(Not(And(RationalQ(n_), Less(n_, Integer(-1)))), IntegerQ(p_), Not(Or(IntegerQ(n_), Not(Or(ZeroQ(e_), Not(Or(ZeroQ(c_), Less(p_, n_))))))))), (e, n, f, c, x, b, p, a, d)))
    rule59 = ReplacementRule(pattern59, lambda e, n, f, c, x, b, p, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(f, Add(p, Integer(1)), Add(Mul(c, f), Mul(Integer(-1), Mul(d, e)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(a, d, f, Add(n, p, Integer(2))), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1))))))), Pow(Mul(f, Add(p, Integer(1)), Add(Mul(c, f), Mul(Integer(-1), Mul(d, e)))), Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1)))), x)))))
    rubi.add(rule59)

    pattern60 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, Integer(2))), Not(RationalQ(p_)), SumSimplerQ(p_, Integer(1))), (e, n, f, c, x, b, p, a, d)))
    rule60 = ReplacementRule(pattern60, lambda e, n, f, c, x, b, p, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(f, Add(p, Integer(1)), Add(Mul(c, f), Mul(Integer(-1), Mul(d, e)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(a, d, f, Add(n, p, Integer(2))), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1))))))), Pow(Mul(f, Add(p, Integer(1)), Add(Mul(c, f), Mul(Integer(-1), Mul(d, e)))), Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Simplify(Add(p, Integer(1))))), x)))))
    rubi.add(rule60)

    pattern61 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, Integer(2)))), (e, n, f, c, x, b, p, a, d)))
    rule61 = ReplacementRule(pattern61, lambda e, n, f, c, x, b, p, a, d : Add(Mul(b, Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(d, f, Add(n, p, Integer(2))), Integer(-1)))), Mul(Mul(Add(Mul(a, d, f, Add(n, p, Integer(2))), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1))))))), Pow(Mul(d, f, Add(n, p, Integer(2))), Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule61)

    pattern62 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, Integer(2))), NonzeroQ(Add(n_, p_, Integer(3))), ZeroQ(Add(Mul(d_, f_, Add(n_, p_, Integer(2)), Add(Mul(Pow(a_, Integer(2)), d_, f_, Add(n_, p_, Integer(3))), Mul(Integer(-1), Mul(b_, Add(Mul(b_, c_, e_), Mul(a_, Add(Mul(d_, e_, Add(n_, Integer(1))), Mul(c_, f_, Add(p_, Integer(1)))))))))), Mul(Integer(-1), Mul(b_, Add(Mul(d_, e_, Add(n_, Integer(1))), Mul(c_, f_, Add(p_, Integer(1)))), Add(Mul(a_, d_, f_, Add(n_, p_, Integer(4))), Mul(Integer(-1), Mul(b_, Add(Mul(d_, e_, Add(n_, Integer(2))), Mul(c_, f_, Add(p_, Integer(2)))))))))))), (e, n, f, c, x, b, p, a, d)))
    rule62 = ReplacementRule(pattern62, lambda e, n, f, c, x, b, p, a, d : Mul(b, Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Mul(Add(Mul(Integer(2), a, d, f, Add(n, p, Integer(3))), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(n, Integer(2))), Mul(c, f, Add(p, Integer(2)))))), Mul(b, d, f, Add(n, p, Integer(2)), x)), Pow(Mul(Pow(d, Integer(2)), Pow(f, Integer(2)), Add(n, p, Integer(2)), Add(n, p, Integer(3))), Integer(-1)))))
    rubi.add(rule62)

    pattern63 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), ZeroQ(Add(m_, Mul(Integer(-1), n_), Integer(-1))), Not(RationalQ(p_)), Not(PositiveIntegerQ(m_)), NonzeroQ(Add(m_, n_, p_, Integer(2)))), (f, n, c, x, m, p, b, a, d)))
    rule63 = ReplacementRule(pattern63, lambda f, n, c, x, m, p, b, a, d : Add(Mul(a, Int(Mul(Pow(Add(a, Mul(b, x)), n), Pow(Add(c, Mul(d, x)), n), Pow(Mul(f, x), p)), x)), Mul(Mul(b, Pow(f, Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), n), Pow(Add(c, Mul(d, x)), n), Pow(Mul(f, x), Add(p, Integer(1)))), x))))
    rubi.add(rule63)

    pattern64 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(IntegerQ(p_)), (e, f, c, x, b, p, a, d)))
    rule64 = ReplacementRule(pattern64, lambda e, f, c, x, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Mul(Add(a, Mul(b, x)), Add(c, Mul(d, x))), Integer(-1))), x), x))
    rubi.add(rule64)

    pattern65 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(p_), Less(Integer(0), p_, Integer(1))), (e, f, c, x, b, p, a, d)))
    rule65 = ReplacementRule(pattern65, lambda e, f, c, x, b, p, a, d : Add(Mul(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Pow(Add(a, Mul(b, x)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Pow(Add(c, Mul(d, x)), Integer(-1))), x)))))
    rubi.add(rule65)

    pattern66 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(p_), Greater(p_, Integer(1))), (e, f, c, x, b, p, a, d)))
    rule66 = ReplacementRule(pattern66, lambda e, f, c, x, b, p, a, d : Add(Mul(f, Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Pow(Mul(b, d, Add(p, Integer(-1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(b, d), Integer(-1))), Int(Mul(Add(Mul(b, d, Pow(e, Integer(2))), Mul(Integer(-1), Mul(a, c, Pow(f, Integer(2)))), Mul(f, Add(Mul(Integer(2), b, d, e), Mul(Integer(-1), Mul(b, c, f)), Mul(Integer(-1), Mul(a, d, f))), x)), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(-2))), Pow(Mul(Add(a, Mul(b, x)), Add(c, Mul(d, x))), Integer(-1)))), x))))
    rubi.add(rule66)

    pattern67 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(p_), Less(p_, Integer(-1))), (e, f, c, x, b, p, a, d)))
    rule67 = ReplacementRule(pattern67, lambda e, f, c, x, b, p, a, d : Add(Mul(f, Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(Mul(d, e), Mul(Integer(-1), Mul(c, f)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(Mul(d, e), Mul(Integer(-1), Mul(c, f)))), Integer(-1))), Int(Mul(Add(Mul(b, d, e), Mul(Integer(-1), Mul(b, c, f)), Mul(Integer(-1), Mul(a, d, f)), Mul(Integer(-1), Mul(b, d, f, x))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(a, Mul(b, x)), Add(c, Mul(d, x))), Integer(-1)))), x))))
    rubi.add(rule67)

    pattern68 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_))), (e, f, c, x, b, p, a, d)))
    rule68 = ReplacementRule(pattern68, lambda e, f, c, x, b, p, a, d : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(a, Mul(b, x)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(c, Mul(d, x)), Integer(-1))), x)))))
    rubi.add(rule68)

    pattern69 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveIntegerQ(n_), FractionQ(p_), Less(p_, Integer(-1))), (e, n, f, c, x, b, p, a, d)))
    rule69 = ReplacementRule(pattern69, lambda e, n, f, c, x, b, p, a, d : Int(ExpandIntegrand(Pow(Add(e, Mul(f, x)), FractionalPart(p)), Mul(Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), IntegerPart(p)), Pow(Add(a, Mul(b, x)), Integer(-1)))), x), x))
    rubi.add(rule69)

    pattern70 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(IntegersQ(m_, n_), Or(IntegerQ(p_), And(Greater(m_, Integer(0)), GreaterEqual(n_, Integer(-1))))), (e, n, f, c, x, m, b, p, a, d)))
    rule70 = ReplacementRule(pattern70, lambda e, n, f, c, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule70)

    pattern71 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(And(RationalQ(n_), Less(n_, Integer(-1))), And(ZeroQ(Add(n_, p_, Integer(3))), NonzeroQ(Add(n_, Integer(1))), Or(SumSimplerQ(n_, Integer(1)), Not(SumSimplerQ(p_, Integer(1))))))), (e, n, f, c, x, b, p, a, d)))
    rule71 = ReplacementRule(pattern71, lambda e, n, f, c, x, b, p, a, d : Add(Mul(Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(2)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Pow(d, Integer(2)), Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Add(n, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Pow(d, Integer(2)), Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Add(n, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, Add(n, p, Integer(2))), Mul(Pow(b, Integer(2)), c, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1))))), Mul(Integer(-1), Mul(Integer(2), a, b, d, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1)))))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), d, Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Add(n, Integer(1)), x))), x)), x)))))
    rubi.add(rule71)

    pattern72 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, Integer(3)))), (e, n, f, c, x, b, p, a, d)))
    rule72 = ReplacementRule(pattern72, lambda e, n, f, c, x, b, p, a, d : Add(Mul(b, Add(a, Mul(b, x)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(d, f, Add(n, p, Integer(3))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(d, f, Add(n, p, Integer(3))), Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, Integer(2)), d, f, Add(n, p, Integer(3))), Mul(Integer(-1), Mul(b, Add(Mul(b, c, e), Mul(a, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1)))))))), Mul(b, Add(Mul(a, d, f, Add(n, p, Integer(4))), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(n, Integer(2))), Mul(c, f, Add(p, Integer(2))))))), x)), x)), x))))
    rubi.add(rule72)

    pattern73 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(3))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-2), Integer(3))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (e, f, c, x, b, a, d)))
    rule73 = ReplacementRule(pattern73, lambda e, f, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1))), Integer(3)))), Add(Mul(Mul(Integer(-1), Sqrt(Integer(3))), Integer(q), Mul(ArcTan(Add(Mul(Integer(1), Pow(Sqrt(Integer(3)), Integer(-1))), Mul(Integer(2), Integer(q), Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Mul(Sqrt(Integer(3)), Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1)))))), Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1)))), Mul(Integer(q), Mul(Log(Add(e, Mul(f, x))), Pow(Mul(Integer(2), Add(Mul(d, e), Mul(Integer(-1), Mul(c, f)))), Integer(-1)))), Mul(Integer(-1), Mul(Integer(3), Integer(q), Mul(Log(Add(Mul(Integer(q), Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Mul(Integer(-1), Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))))), Pow(Mul(Integer(2), Add(Mul(d, e), Mul(Integer(-1), Mul(c, f)))), Integer(-1))))))))
    rubi.add(rule73)

    pattern74 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(Mul(Integer(2), b_, d_, e_), Mul(Integer(-1), Mul(f_, Add(Mul(b_, c_), Mul(a_, d_))))))), (e, f, c, x, b, a, d)))
    rule74 = ReplacementRule(pattern74, lambda e, f, c, x, b, a, d : Mul(b, f, Subst(Int(Mul(Integer(1), Pow(Add(Mul(d, Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(2))), Mul(b, Pow(f, Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x)))))))
    rubi.add(rule74)

    pattern75 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(m_, n_, Integer(1))), RationalQ(m_, n_), Less(Integer(-1), m_, Integer(0)), SimplerQ(Add(a_, Mul(b_, x_)), Add(c_, Mul(d_, x_)))), (e, f, n, c, x, m, b, a, d)))
    rule75 = ReplacementRule(pattern75, lambda e, f, n, c, x, m, b, a, d : With(List(Set(Integer(q), Denominator(m))), Mul(Integer(q), Subst(Int(Mul(Pow(x, Add(Mul(Integer(q), Add(m, Integer(1))), Integer(-1))), Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(x, Integer(q))))), Integer(-1))), x), x, Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(q), Integer(-1)))), Pow(Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(q), Integer(-1)))), Integer(-1)))))))
    rubi.add(rule75)

    pattern76 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, n_, p_, Integer(2))), RationalQ(n_), Greater(n_, Integer(0)), Not(And(SumSimplerQ(p_, Integer(1)), Not(SumSimplerQ(m_, Integer(1)))))), (e, n, f, c, x, m, b, p, a, d)))
    rule76 = ReplacementRule(pattern76, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Integer(-1), Mul(n, Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p)), x)))))
    rubi.add(rule76)

    pattern77 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Simplify(Add(m_, n_, p_, Integer(3)))), ZeroQ(Add(Mul(a_, d_, f_, Add(m_, Integer(1))), Mul(b_, c_, f_, Add(n_, Integer(1))), Mul(b_, d_, e_, Add(p_, Integer(1))))), NonzeroQ(Add(m_, Integer(1)))), (e, n, f, c, x, m, b, p, a, d)))
    rule77 = ReplacementRule(pattern77, lambda e, n, f, c, x, m, b, p, a, d : Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))))
    rubi.add(rule77)

    pattern78 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Simplify(Add(m_, n_, p_, Integer(3)))), Or(And(RationalQ(m_), Less(m_, Integer(-1))), SumSimplerQ(m_, Integer(1)))), (e, n, f, c, x, m, b, p, a, d)))
    rule78 = ReplacementRule(pattern78, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Mul(Add(Mul(a, d, f, Add(m, Integer(1))), Mul(b, c, f, Add(n, Integer(1))), Mul(b, d, e, Add(p, Integer(1)))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule78)

    pattern79 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(m_, n_, p_), Less(m_, Integer(-1)), Greater(n_, Integer(0)), Greater(p_, Integer(0)), Or(IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), n_), Mul(Integer(2), p_)), IntegersQ(m_, Add(n_, p_)), IntegersQ(p_, Add(m_, n_)))), (e, n, f, c, x, m, b, p, a, d)))
    rule79 = ReplacementRule(pattern79, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), p), Pow(Mul(b, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(b, Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Simp(Add(Mul(d, e, n), Mul(c, f, p), Mul(d, f, Add(n, p), x)), x)), x)))))
    rubi.add(rule79)

    pattern80 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(RationalQ(m_, n_, p_), Less(m_, Integer(-1)), Greater(n_, Integer(1)), Or(IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), n_), Mul(Integer(2), p_)), IntegersQ(m_, Add(n_, p_)), IntegersQ(p_, Add(m_, n_)))), (e, n, f, c, x, m, b, p, a, d)))
    rule80 = ReplacementRule(pattern80, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(b, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(m, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(b, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-2))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, Add(Mul(d, e, Add(n, Integer(-1))), Mul(c, f, Add(p, Integer(1))))), Mul(b, c, Add(Mul(d, e, Add(m, Mul(Integer(-1), n), Integer(2))), Mul(Integer(-1), Mul(c, f, Add(m, p, Integer(2)))))), Mul(d, Add(Mul(a, d, f, Add(n, p)), Mul(b, Add(Mul(d, e, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, f, Add(m, n, p, Integer(1))))))), x)), x)), x))))
    rubi.add(rule80)

    pattern81 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(RationalQ(m_, n_, p_), Less(m_, Integer(-1)), Greater(n_, Integer(0)), Or(IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), n_), Mul(Integer(2), p_)), IntegersQ(m_, Add(n_, p_)), IntegersQ(p_, Add(m_, n_)))), (e, n, f, c, x, m, b, p, a, d)))
    rule81 = ReplacementRule(pattern81, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(d, e, n), Mul(c, f, Add(m, p, Integer(2))), Mul(d, f, Add(m, n, p, Integer(2)), x)), x)), x)))))
    rubi.add(rule81)

    pattern82 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Greater(m_, Integer(1)), NonzeroQ(Add(m_, n_, p_, Integer(1))), IntegerQ(m_)), (e, n, f, c, x, m, b, p, a, d)))
    rule82 = ReplacementRule(pattern82, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(d, f, Add(m, n, p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(d, f, Add(m, n, p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-2))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, Integer(2)), d, f, Add(m, n, p, Integer(1))), Mul(Integer(-1), Mul(b, Add(Mul(b, c, e, Add(m, Integer(-1))), Mul(a, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1)))))))), Mul(b, Add(Mul(a, d, f, Add(Mul(Integer(2), m), n, p)), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(m, n)), Mul(c, f, Add(m, p)))))), x)), x)), x))))
    rubi.add(rule82)

    pattern83 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(m_, n_, p_), Greater(m_, Integer(0)), Greater(n_, Integer(0)), NonzeroQ(Add(m_, n_, p_, Integer(1))), Or(IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), n_), Mul(Integer(2), p_)), Or(IntegersQ(m_, Add(n_, p_)), IntegersQ(p_, Add(m_, n_))))), (e, n, f, c, x, m, b, p, a, d)))
    rule83 = ReplacementRule(pattern83, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(f, Add(m, n, p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(f, Add(m, n, p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(c, m, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Mul(a, n, Add(Mul(d, e), Mul(Integer(-1), Mul(c, f)))), Mul(Add(Mul(d, m, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Mul(b, n, Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))))), x)), x)), x)))))
    rubi.add(rule83)

    pattern84 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Greater(m_, Integer(1)), NonzeroQ(Add(m_, n_, p_, Integer(1))), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), n_), Mul(Integer(2), p_))), (e, n, f, c, x, m, b, p, a, d)))
    rule84 = ReplacementRule(pattern84, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(d, f, Add(m, n, p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(d, f, Add(m, n, p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-2))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, Integer(2)), d, f, Add(m, n, p, Integer(1))), Mul(Integer(-1), Mul(b, Add(Mul(b, c, e, Add(m, Integer(-1))), Mul(a, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1)))))))), Mul(b, Add(Mul(a, d, f, Add(Mul(Integer(2), m), n, p)), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(m, n)), Mul(c, f, Add(m, p)))))), x)), x)), x))))
    rubi.add(rule84)

    pattern85 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Less(m_, Integer(-1)), IntegerQ(m_), Or(IntegerQ(n_), IntegersQ(Mul(Integer(2), n_), Mul(Integer(2), p_)))), (e, n, f, c, x, m, b, p, a, d)))
    rule85 = ReplacementRule(pattern85, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, Add(m, Integer(1))), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(m, n, Integer(2))), Mul(c, f, Add(m, p, Integer(2)))))), Mul(Integer(-1), Mul(b, d, f, Add(m, n, p, Integer(3)), x))), x)), x))))
    rubi.add(rule85)

    pattern86 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Less(m_, Integer(-1)), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), n_), Mul(Integer(2), p_))), (e, n, f, c, x, m, b, p, a, d)))
    rule86 = ReplacementRule(pattern86, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, Add(m, Integer(1))), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(m, n, Integer(2))), Mul(c, f, Add(m, p, Integer(2)))))), Mul(Integer(-1), Mul(b, d, f, Add(m, n, p, Integer(3)), x))), x)), x))))
    rubi.add(rule86)

    pattern87 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(PositiveIntegerQ(Simplify(Add(m_, n_, Integer(1)))), Or(And(RationalQ(m_), Greater(m_, Integer(0))), And(Not(RationalQ(m_)), Or(SumSimplerQ(m_, Integer(-1)), Not(SumSimplerQ(n_, Integer(-1))))))), (e, f, n, c, x, m, b, a, d)))
    rule87 = ReplacementRule(pattern87, lambda e, f, n, c, x, m, b, a, d : Add(Mul(Mul(b, Pow(f, Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), n)), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Pow(f, Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Integer(-1)))), x)))))
    rubi.add(rule87)

    pattern88 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(Mul(Integer(-1), f_), Pow(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_))), Integer(-1))))), (e, f, c, x, b, a, d)))
    rule88 = ReplacementRule(pattern88, lambda e, f, c, x, b, a, d : Mul(Integer(-4), Subst(Int(Mul(Pow(x, Integer(2)), Pow(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Mul(b, Pow(x, Integer(4))))), Sqrt(Add(c, Mul(Integer(-1), Mul(d, Mul(e, Pow(f, Integer(-1))))), Mul(d, Mul(Pow(x, Integer(4)), Pow(f, Integer(-1))))))), Integer(-1))), x), x, Pow(Add(e, Mul(f, x)), Mul(Integer(1), Pow(Integer(4), Integer(-1)))))))
    rubi.add(rule88)

    pattern89 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(PositiveQ(Mul(Mul(Integer(-1), f_), Pow(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_))), Integer(-1)))))), (e, f, c, x, b, a, d)))
    rule89 = ReplacementRule(pattern89, lambda e, f, c, x, b, a, d : Mul(Mul(Sqrt(Mul(Mul(Integer(-1), f), Mul(Add(c, Mul(d, x)), Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1))))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(a, Mul(b, x)), Sqrt(Add(Mul(Mul(Integer(-1), c), Mul(f, Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1)))), Mul(Integer(-1), Mul(d, f, Mul(x, Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1))))))), Pow(Add(e, Mul(f, x)), Mul(Integer(1), Pow(Integer(4), Integer(-1))))), Integer(-1))), x)))
    rubi.add(rule89)

    pattern90 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-3), Integer(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(Mul(Integer(-1), f_), Pow(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_))), Integer(-1))))), (e, f, c, x, b, a, d)))
    rule90 = ReplacementRule(pattern90, lambda e, f, c, x, b, a, d : Mul(Integer(-4), Subst(Int(Mul(Integer(1), Pow(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Mul(b, Pow(x, Integer(4))))), Sqrt(Add(c, Mul(Integer(-1), Mul(d, Mul(e, Pow(f, Integer(-1))))), Mul(d, Mul(Pow(x, Integer(4)), Pow(f, Integer(-1))))))), Integer(-1))), x), x, Pow(Add(e, Mul(f, x)), Mul(Integer(1), Pow(Integer(4), Integer(-1)))))))
    rubi.add(rule90)

    pattern91 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-3), Integer(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(PositiveQ(Mul(Mul(Integer(-1), f_), Pow(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_))), Integer(-1)))))), (e, f, c, x, b, a, d)))
    rule91 = ReplacementRule(pattern91, lambda e, f, c, x, b, a, d : Mul(Mul(Sqrt(Mul(Mul(Integer(-1), f), Mul(Add(c, Mul(d, x)), Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1))))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(a, Mul(b, x)), Sqrt(Add(Mul(Mul(Integer(-1), c), Mul(f, Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1)))), Mul(Integer(-1), Mul(d, f, Mul(x, Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1))))))), Pow(Add(e, Mul(f, x)), Mul(Integer(3), Pow(Integer(4), Integer(-1))))), Integer(-1))), x)))
    rubi.add(rule91)

    pattern92 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(1), Integer(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_)))), PositiveQ(c_), PositiveQ(e_), Not(NegativeQ(Mul(Mul(Integer(-1), b_), Pow(d_, Integer(-1)))))), (f, e, c, x, b, d)))
    rule92 = ReplacementRule(pattern92, lambda f, e, c, x, b, d : Mul(Integer(2), Mul(Sqrt(e), Pow(b, Integer(-1))), Rt(Mul(Mul(Integer(-1), b), Pow(d, Integer(-1))), Integer(2)), EllipticE(ArcSin(Mul(Sqrt(Mul(b, x)), Pow(Mul(Sqrt(c), Rt(Mul(Mul(Integer(-1), b), Pow(d, Integer(-1))), Integer(2))), Integer(-1)))), Mul(c, Mul(f, Pow(Mul(d, e), Integer(-1)))))))
    rubi.add(rule92)

    pattern93 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(1), Integer(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_)))), PositiveQ(c_), PositiveQ(e_), NegativeQ(Mul(Mul(Integer(-1), b_), Pow(d_, Integer(-1))))), (f, e, c, x, b, d)))
    rule93 = ReplacementRule(pattern93, lambda f, e, c, x, b, d : Mul(Mul(Sqrt(Mul(Mul(Integer(-1), b), x)), Pow(Sqrt(Mul(b, x)), Integer(-1))), Int(Mul(Sqrt(Add(e, Mul(f, x))), Pow(Mul(Sqrt(Mul(Mul(Integer(-1), b), x)), Sqrt(Add(c, Mul(d, x)))), Integer(-1))), x)))
    rubi.add(rule93)

    pattern94 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(1), Integer(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_)))), Not(And(PositiveQ(c_), PositiveQ(e_)))), (f, e, c, x, b, d)))
    rule94 = ReplacementRule(pattern94, lambda f, e, c, x, b, d : Mul(Sqrt(Add(e, Mul(f, x))), Mul(Sqrt(Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1)))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(Integer(1), Mul(f, Mul(x, Pow(e, Integer(-1))))))), Integer(-1))), Int(Mul(Sqrt(Add(Integer(1), Mul(f, Mul(x, Pow(e, Integer(-1)))))), Pow(Mul(Sqrt(Mul(b, x)), Sqrt(Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1))))))), Integer(-1))), x)))
    rubi.add(rule94)

    pattern95 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(Integer(-1), Mul(a_, f_))), Integer(-1)))), Not(NegativeQ(Mul(Mul(Integer(-1), Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Pow(d_, Integer(-1))))), Not(And(SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_))), PositiveQ(Mul(Mul(Integer(-1), d_), Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), PositiveQ(Mul(d_, Pow(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_))), Integer(-1)))), Not(NegativeQ(Mul(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Pow(b_, Integer(-1)))))))), (e, f, c, x, b, a, d)))
    rule95 = ReplacementRule(pattern95, lambda e, f, c, x, b, a, d : Mul(Mul(Integer(2), Pow(b, Integer(-1))), Rt(Mul(Mul(Integer(-1), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Pow(d, Integer(-1))), Integer(2)), EllipticE(ArcSin(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Rt(Mul(Mul(Integer(-1), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Pow(d, Integer(-1))), Integer(2)), Integer(-1)))), Mul(f, Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(Mul(d, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))))))
    rubi.add(rule95)

    pattern96 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(Integer(-1), Mul(a_, f_))), Integer(-1)))))), Not(NegativeQ(Mul(Mul(Integer(-1), Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Pow(d_, Integer(-1)))))), (e, f, c, x, b, a, d)))
    rule96 = ReplacementRule(pattern96, lambda e, f, c, x, b, a, d : Mul(Sqrt(Add(e, Mul(f, x))), Mul(Sqrt(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Mul(b, Mul(Add(e, Mul(f, x)), Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1)))))), Integer(-1))), Int(Mul(Sqrt(Add(Mul(b, Mul(e, Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1)))), Mul(b, f, Mul(x, Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1)))))), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))))))), Integer(-1))), x)))
    rubi.add(rule96)

    pattern97 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(c_), PositiveQ(e_), Or(PositiveQ(Mul(Mul(Integer(-1), b_), Pow(d_, Integer(-1)))), NegativeQ(Mul(Mul(Integer(-1), b_), Pow(f_, Integer(-1)))))), (f, e, c, x, b, d)))
    rule97 = ReplacementRule(pattern97, lambda f, e, c, x, b, d : Mul(Mul(Integer(2), Pow(Mul(b, Sqrt(e)), Integer(-1))), Rt(Mul(Mul(Integer(-1), b), Pow(d, Integer(-1))), Integer(2)), EllipticF(ArcSin(Mul(Sqrt(Mul(b, x)), Pow(Mul(Sqrt(c), Rt(Mul(Mul(Integer(-1), b), Pow(d, Integer(-1))), Integer(2))), Integer(-1)))), Mul(c, Mul(f, Pow(Mul(d, e), Integer(-1)))))))
    rubi.add(rule97)

    pattern98 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(c_), PositiveQ(e_), Or(PosQ(Mul(Mul(Integer(-1), b_), Pow(d_, Integer(-1)))), NegQ(Mul(Mul(Integer(-1), b_), Pow(f_, Integer(-1)))))), (f, e, c, x, b, d)))
    rule98 = ReplacementRule(pattern98, lambda f, e, c, x, b, d : Mul(Mul(Integer(2), Pow(Mul(b, Sqrt(e)), Integer(-1))), Rt(Mul(Mul(Integer(-1), b), Pow(d, Integer(-1))), Integer(2)), EllipticF(ArcSin(Mul(Sqrt(Mul(b, x)), Pow(Mul(Sqrt(c), Rt(Mul(Mul(Integer(-1), b), Pow(d, Integer(-1))), Integer(2))), Integer(-1)))), Mul(c, Mul(f, Pow(Mul(d, e), Integer(-1)))))))
    rubi.add(rule98)

    pattern99 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(And(PositiveQ(c_), PositiveQ(e_)))), (f, e, c, x, b, d)))
    rule99 = ReplacementRule(pattern99, lambda f, e, c, x, b, d : Mul(Sqrt(Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1)))))), Mul(Sqrt(Add(Integer(1), Mul(f, Mul(x, Pow(e, Integer(-1)))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Sqrt(Mul(b, x)), Sqrt(Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1)))))), Sqrt(Add(Integer(1), Mul(f, Mul(x, Pow(e, Integer(-1))))))), Integer(-1))), x)))
    rubi.add(rule99)

    pattern100 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(Integer(-1), Mul(a_, f_))), Integer(-1)))), SimplerQ(Add(a_, Mul(b_, x_)), Add(c_, Mul(d_, x_))), SimplerQ(Add(a_, Mul(b_, x_)), Add(e_, Mul(f_, x_))), Or(PositiveQ(Mul(Mul(Integer(-1), Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Pow(d_, Integer(-1)))), NegativeQ(Mul(Mul(Integer(-1), Add(Mul(b_, e_), Mul(Integer(-1), Mul(a_, f_)))), Pow(f_, Integer(-1)))))), (f, e, c, x, b, a, d)))
    rule100 = ReplacementRule(pattern100, lambda f, e, c, x, b, a, d : Mul(Mul(Integer(2), Pow(b, Integer(-1))), Rt(Mul(Mul(Integer(-1), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Pow(d, Integer(-1))), Integer(2)), Sqrt(Mul(Pow(b, Integer(2)), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), EllipticF(ArcSin(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Rt(Mul(Mul(Integer(-1), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Pow(d, Integer(-1))), Integer(2)), Integer(-1)))), Mul(f, Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(Mul(d, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))))))
    rubi.add(rule100)

    pattern101 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(Integer(-1), Mul(a_, f_))), Integer(-1)))), SimplerQ(Add(a_, Mul(b_, x_)), Add(c_, Mul(d_, x_))), SimplerQ(Add(a_, Mul(b_, x_)), Add(e_, Mul(f_, x_))), Or(PosQ(Mul(Mul(Integer(-1), Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Pow(d_, Integer(-1)))), NegQ(Mul(Mul(Integer(-1), Add(Mul(b_, e_), Mul(Integer(-1), Mul(a_, f_)))), Pow(f_, Integer(-1)))))), (f, e, c, x, b, a, d)))
    rule101 = ReplacementRule(pattern101, lambda f, e, c, x, b, a, d : Mul(Mul(Integer(2), Pow(b, Integer(-1))), Rt(Mul(Mul(Integer(-1), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Pow(d, Integer(-1))), Integer(2)), Sqrt(Mul(Pow(b, Integer(2)), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), EllipticF(ArcSin(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Rt(Mul(Mul(Integer(-1), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Pow(d, Integer(-1))), Integer(2)), Integer(-1)))), Mul(f, Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(Mul(d, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))))))
    rubi.add(rule101)

    pattern102 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(Integer(-1), Mul(a_, f_))), Integer(-1)))))), SimplerQ(Add(a_, Mul(b_, x_)), Add(c_, Mul(d_, x_))), SimplerQ(Add(a_, Mul(b_, x_)), Add(e_, Mul(f_, x_)))), (f, e, c, x, b, a, d)))
    rule102 = ReplacementRule(pattern102, lambda f, e, c, x, b, a, d : Mul(Sqrt(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))))), Mul(Sqrt(Mul(b, Mul(Add(e, Mul(f, x)), Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))))), Sqrt(Add(Mul(b, Mul(e, Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1)))), Mul(b, f, Mul(x, Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1))))))), Integer(-1))), x)))
    rubi.add(rule102)

    pattern103 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(3))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(Mul(Integer(2), b_, d_, e_), Mul(Integer(-1), Mul(b_, c_, f_)), Mul(Integer(-1), Mul(a_, d_, f_))))), (e, f, c, x, b, a, d)))
    rule103 = ReplacementRule(pattern103, lambda e, f, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(b, Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Pow(Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(2)), Integer(-1)))), Integer(3)))), Add(Mul(Mul(Integer(-1), Log(Add(a, Mul(b, x)))), Pow(Mul(Integer(2), Integer(q), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1))), Mul(Integer(-1), Mul(Sqrt(Integer(3)), Mul(ArcTan(Add(Mul(Integer(1), Pow(Sqrt(Integer(3)), Integer(-1))), Mul(Integer(2), Integer(q), Mul(Pow(Add(c, Mul(d, x)), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Pow(Mul(Sqrt(Integer(3)), Pow(Add(e, Mul(f, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1)))))), Pow(Mul(Integer(2), Integer(q), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1))))), Mul(Integer(3), Mul(Log(Add(Mul(Integer(q), Pow(Add(c, Mul(d, x)), Mul(Integer(2), Pow(Integer(3), Integer(-1))))), Mul(Integer(-1), Pow(Add(e, Mul(f, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))))), Pow(Mul(Integer(4), Integer(q), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1)))))))
    rubi.add(rule103)

    pattern104 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(3))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(Mul(Integer(2), b_, d_, e_), Mul(Integer(-1), Mul(b_, c_, f_)), Mul(Integer(-1), Mul(a_, d_, f_)))), IntegerQ(m_), Less(m_, Integer(-1))), (e, f, c, x, m, b, a, d)))
    rule104 = ReplacementRule(pattern104, lambda e, f, c, x, m, b, a, d : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Mul(Pow(Add(e, Mul(f, x)), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Mul(f, Pow(Mul(Integer(6), Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Add(Mul(a, d, Add(Mul(Integer(3), m), Integer(1))), Mul(Integer(-1), Mul(Integer(3), b, c, Add(Mul(Integer(3), m), Integer(5)))), Mul(Integer(-1), Mul(Integer(2), b, d, Add(Mul(Integer(3), m), Integer(7)), x))), Pow(Mul(Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Add(e, Mul(f, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1)))), x))))
    rubi.add(rule104)

    pattern105 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), ZeroQ(Add(m_, Mul(Integer(-1), n_))), PositiveQ(a_), PositiveQ(c_)), (f, n, c, x, m, p, b, a, d)))
    rule105 = ReplacementRule(pattern105, lambda f, n, c, x, m, p, b, a, d : Int(Mul(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m), Pow(Mul(f, x), p)), x))
    rubi.add(rule105)

    pattern106 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), ZeroQ(Add(m_, Mul(Integer(-1), n_)))), (f, n, c, x, m, p, b, a, d)))
    rule106 = ReplacementRule(pattern106, lambda f, n, c, x, m, p, b, a, d : Mul(Pow(Add(a, Mul(b, x)), FracPart(m)), Mul(Pow(Add(c, Mul(d, x)), FracPart(m)), Pow(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), FracPart(m)), Integer(-1))), Int(Mul(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m), Pow(Mul(f, x), p)), x)))
    rubi.add(rule106)

    pattern107 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PositiveIntegerQ(Add(m_, Mul(Integer(-1), n_))), NonzeroQ(Add(m_, n_, p_, Integer(2)))), (f, n, c, x, m, p, b, a, d)))
    rule107 = ReplacementRule(pattern107, lambda f, n, c, x, m, p, b, a, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), n), Pow(Add(c, Mul(d, x)), n), Pow(Mul(f, x), p)), Pow(Add(a, Mul(b, x)), Add(m, Mul(Integer(-1), n))), x), x))
    rubi.add(rule107)

    pattern108 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(PositiveIntegerQ(m_), NegativeIntegerQ(m_, n_))), (e, n, f, c, x, m, b, p, a, d)))
    rule108 = ReplacementRule(pattern108, lambda e, n, f, c, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule108)

    pattern109 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NegativeIntegerQ(Add(m_, n_, p_, Integer(2))), NonzeroQ(Add(m_, Integer(1))), Or(SumSimplerQ(m_, Integer(1)), And(Not(And(NonzeroQ(Add(n_, Integer(1))), SumSimplerQ(n_, Integer(1)))), Not(And(NonzeroQ(Add(p_, Integer(1))), SumSimplerQ(p_, Integer(1))))))), (e, n, f, c, x, m, b, p, a, d)))
    rule109 = ReplacementRule(pattern109, lambda e, n, f, c, x, m, b, p, a, d : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, Add(m, Integer(1))), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(m, n, Integer(2))), Mul(c, f, Add(m, p, Integer(2)))))), Mul(Integer(-1), Mul(b, d, f, Add(m, n, p, Integer(3)), x))), x)), x))))
    rubi.add(rule109)

    pattern110 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, n_, p_, Integer(2))), NegativeIntegerQ(n_)), (e, n, f, c, x, m, b, p, a, d)))
    rule110 = ReplacementRule(pattern110, lambda e, n, f, c, x, m, b, p, a, d : Mul(Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), n), Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Mul(Add(m, Integer(1)), Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(m, Integer(1)))), Integer(-1))), Hypergeometric2F1(Add(m, Integer(1)), Mul(Integer(-1), n), Add(m, Integer(2)), Mul(Mul(Integer(-1), Add(Mul(d, e), Mul(Integer(-1), Mul(c, f)))), Mul(Add(a, Mul(b, x)), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(e, Mul(f, x))), Integer(-1)))))))
    rubi.add(rule110)

    pattern111 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, n_, p_, Integer(2))), Not(IntegerQ(n_))), (e, f, n, c, x, m, b, p, a, d)))
    rule111 = ReplacementRule(pattern111, lambda e, f, n, c, x, m, b, p, a, d : Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(m, Integer(1))), Integer(-1))), Pow(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Mul(Add(c, Mul(d, x)), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(e, Mul(f, x))), Integer(-1)))), Mul(Integer(-1), n)), Hypergeometric2F1(Add(m, Integer(1)), Mul(Integer(-1), n), Add(m, Integer(2)), Mul(Mul(Integer(-1), Add(Mul(d, e), Mul(Integer(-1), Mul(c, f)))), Mul(Add(a, Mul(b, x)), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(e, Mul(f, x))), Integer(-1)))))))
    rubi.add(rule111)

    pattern112 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), PositiveQ(c_), Or(IntegerQ(p_), PositiveQ(e_))), (f, n, e, c, x, m, b, p, d)))
    rule112 = ReplacementRule(pattern112, lambda f, n, e, c, x, m, b, p, d : Mul(Pow(c, n), Pow(e, p), Mul(Pow(Mul(b, x), Add(m, Integer(1))), Pow(Mul(b, Add(m, Integer(1))), Integer(-1))), AppellF1(Add(m, Integer(1)), Mul(Integer(-1), n), Mul(Integer(-1), p), Add(m, Integer(2)), Mul(Mul(Integer(-1), d), Mul(x, Pow(c, Integer(-1)))), Mul(Mul(Integer(-1), f), Mul(x, Pow(e, Integer(-1)))))))
    rubi.add(rule112)

    pattern113 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), PositiveQ(Mul(Mul(Integer(-1), d_), Pow(Mul(b_, c_), Integer(-1)))), Or(IntegerQ(p_), PositiveQ(Mul(d_, Pow(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_))), Integer(-1)))))), (f, n, e, c, x, m, b, p, d)))
    rule113 = ReplacementRule(pattern113, lambda f, n, e, c, x, m, b, p, d : Mul(Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Mul(d, Add(n, Integer(1)), Pow(Mul(Mul(Integer(-1), d), Pow(Mul(b, c), Integer(-1))), m), Pow(Mul(d, Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1))), p)), Integer(-1))), AppellF1(Add(n, Integer(1)), Mul(Integer(-1), m), Mul(Integer(-1), p), Add(n, Integer(2)), Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1))))), Mul(Mul(Integer(-1), f), Mul(Add(c, Mul(d, x)), Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1)))))))
    rubi.add(rule113)

    pattern114 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(PositiveQ(c_))), (f, n, e, c, x, m, b, p, d)))
    rule114 = ReplacementRule(pattern114, lambda f, n, e, c, x, m, b, p, d : Mul(Pow(c, IntPart(n)), Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Pow(Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1))))), FracPart(n)), Integer(-1))), Int(Mul(Pow(Mul(b, x), m), Pow(Add(Integer(1), Mul(d, Mul(x, Pow(c, Integer(-1))))), n), Pow(Add(e, Mul(f, x)), p)), x)))
    rubi.add(rule114)

    pattern115 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), IntegerQ(p_), PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), Not(And(PositiveQ(Mul(d_, Pow(Add(Mul(d_, a_), Mul(Integer(-1), Mul(c_, b_))), Integer(-1)))), SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_)))))), (e, f, n, c, x, m, b, p, a, d)))
    rule115 = ReplacementRule(pattern115, lambda e, f, n, c, x, m, b, p, a, d : Mul(Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), p), Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Mul(Pow(b, Add(p, Integer(1))), Add(m, Integer(1)), Pow(Mul(b, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), n)), Integer(-1))), AppellF1(Add(m, Integer(1)), Mul(Integer(-1), n), Mul(Integer(-1), p), Add(m, Integer(2)), Mul(Mul(Integer(-1), d), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), Mul(Mul(Integer(-1), f), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1)))))))
    rubi.add(rule115)

    pattern116 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), IntegerQ(p_), Not(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1))))), Not(SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_))))), (e, f, n, c, x, m, b, p, a, d)))
    rule116 = ReplacementRule(pattern116, lambda e, f, n, c, x, m, b, p, a, d : Mul(Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Mul(Pow(Mul(b, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), IntPart(n)), Pow(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), FracPart(n))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))))), n), Pow(Add(e, Mul(f, x)), p)), x)))
    rubi.add(rule116)

    pattern117 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(IntegerQ(p_)), PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(Integer(-1), Mul(a_, f_))), Integer(-1)))), Not(And(PositiveQ(Mul(d_, Pow(Add(Mul(d_, a_), Mul(Integer(-1), Mul(c_, b_))), Integer(-1)))), PositiveQ(Mul(d_, Pow(Add(Mul(d_, e_), Mul(Integer(-1), Mul(c_, f_))), Integer(-1)))), SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_))))), Not(And(PositiveQ(Mul(f_, Pow(Add(Mul(f_, a_), Mul(Integer(-1), Mul(e_, b_))), Integer(-1)))), PositiveQ(Mul(f_, Pow(Add(Mul(f_, c_), Mul(Integer(-1), Mul(e_, d_))), Integer(-1)))), SimplerQ(Add(e_, Mul(f_, x_)), Add(a_, Mul(b_, x_)))))), (e, f, n, c, x, m, b, p, a, d)))
    rule117 = ReplacementRule(pattern117, lambda e, f, n, c, x, m, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Mul(b, Add(m, Integer(1)), Pow(Mul(b, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), n), Pow(Mul(b, Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1))), p)), Integer(-1))), AppellF1(Add(m, Integer(1)), Mul(Integer(-1), n), Mul(Integer(-1), p), Add(m, Integer(2)), Mul(Mul(Integer(-1), d), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), Mul(Mul(Integer(-1), f), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1)))))))
    rubi.add(rule117)

    pattern118 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(IntegerQ(p_)), PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1)))), Not(PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(Integer(-1), Mul(a_, f_))), Integer(-1)))))), (e, f, n, c, x, m, b, p, a, d)))
    rule118 = ReplacementRule(pattern118, lambda e, f, n, c, x, m, b, p, a, d : Mul(Mul(Pow(Add(e, Mul(f, x)), FracPart(p)), Pow(Mul(Pow(Mul(b, Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1))), IntPart(p)), Pow(Mul(b, Mul(Add(e, Mul(f, x)), Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(Mul(b, Mul(e, Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1)))), Mul(b, f, Mul(x, Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Integer(-1))))), p)), x)))
    rubi.add(rule118)

    pattern119 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(IntegerQ(p_)), Not(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(-1))))), Not(SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_)))), Not(SimplerQ(Add(e_, Mul(f_, x_)), Add(a_, Mul(b_, x_))))), (e, f, n, c, x, m, b, p, a, d)))
    rule119 = ReplacementRule(pattern119, lambda e, f, n, c, x, m, b, p, a, d : Mul(Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Mul(Pow(Mul(b, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), IntPart(n)), Pow(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), FracPart(n))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))))), n), Pow(Add(e, Mul(f, x)), p)), x)))
    rubi.add(rule119)

    pattern120 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), u_)), Wildcard.optional('n', Integer(1))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), u_)), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (f, n, e, c, x, m, u, b, p, a, d)))
    rule120 = ReplacementRule(pattern120, lambda f, n, e, c, x, m, u, b, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x, u)))
    rubi.add(rule120)

    pattern121 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(Or(PositiveIntegerQ(m_), IntegersQ(m_, n_))), (f, n, e, c, g, x, m, b, a, h, d)))
    rule121 = ReplacementRule(pattern121, lambda f, n, e, c, g, x, m, b, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Add(e, Mul(f, x)), Add(g, Mul(h, x))), x), x))
    rubi.add(rule121)

    pattern122 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(m_, n_, Integer(2))), NonzeroQ(Add(m_, Integer(1))), Not(And(SumSimplerQ(n_, Integer(1)), Not(SumSimplerQ(m_, Integer(1)))))), (f, n, e, c, g, x, m, b, a, h, d)))
    rule122 = ReplacementRule(pattern122, lambda f, n, e, c, g, x, m, b, a, h, d : Add(Mul(Add(Mul(Pow(b, Integer(2)), d, e, g), Mul(Integer(-1), Mul(Pow(a, Integer(2)), d, f, h, m)), Mul(Integer(-1), Mul(a, b, Add(Mul(d, Add(Mul(f, g), Mul(e, h))), Mul(Integer(-1), Mul(c, f, h, Add(m, Integer(1))))))), Mul(b, f, h, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1)), x)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Mul(Pow(b, Integer(2)), d, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1))), Integer(-1)))), Mul(Mul(Add(Mul(a, d, f, h, m), Mul(b, Add(Mul(d, Add(Mul(f, g), Mul(e, h))), Mul(Integer(-1), Mul(c, f, h, Add(m, Integer(2))))))), Pow(Mul(Pow(b, Integer(2)), d), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule122)

    pattern123 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(RationalQ(m_, n_), Less(m_, Integer(-1)), Less(n_, Integer(-1))), (f, n, e, c, g, x, m, b, a, h, d)))
    rule123 = ReplacementRule(pattern123, lambda f, n, e, c, g, x, m, b, a, h, d : Add(Mul(Mul(Add(Mul(Pow(b, Integer(2)), c, d, e, g, Add(n, Integer(1))), Mul(Pow(a, Integer(2)), c, d, f, h, Add(n, Integer(1))), Mul(a, b, Add(Mul(Pow(d, Integer(2)), e, g, Add(m, Integer(1))), Mul(Pow(c, Integer(2)), f, h, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, n, Integer(2)))))), Mul(Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, h, Add(n, Integer(1))), Mul(Integer(-1), Mul(a, b, Pow(d, Integer(2)), Add(Mul(f, g), Mul(e, h)), Add(n, Integer(1)))), Mul(Pow(b, Integer(2)), Add(Mul(Pow(c, Integer(2)), f, h, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, Integer(1)))), Mul(Pow(d, Integer(2)), e, g, Add(m, n, Integer(2)))))), x)), Pow(Mul(b, d, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(2)), Add(m, Integer(1)), Add(n, Integer(1))), Integer(-1))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, h, Add(Integer(2), Mul(Integer(3), n), Pow(n, Integer(2)))), Mul(a, b, d, Add(n, Integer(1)), Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, Integer(3)))))), Mul(Pow(b, Integer(2)), Add(Mul(Pow(c, Integer(2)), f, h, Add(Integer(2), Mul(Integer(3), m), Pow(m, Integer(2)))), Mul(Integer(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, Integer(1)), Add(m, n, Integer(3)))), Mul(Pow(d, Integer(2)), e, g, Add(Integer(6), Pow(m, Integer(2)), Mul(Integer(5), n), Pow(n, Integer(2)), Mul(m, Add(Mul(Integer(2), n), Integer(5)))))))), Pow(Mul(b, d, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(2)), Add(m, Integer(1)), Add(n, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1)))), x)))))
    rubi.add(rule123)

    pattern124 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(Or(And(RationalQ(m_), Less(m_, Integer(-2))), And(ZeroQ(Add(m_, n_, Integer(3))), Not(And(RationalQ(n_), Less(n_, Integer(-2))))))), (f, n, e, c, g, x, m, b, a, h, d)))
    rule124 = ReplacementRule(pattern124, lambda f, n, e, c, g, x, m, b, a, h, d : Add(Mul(Mul(Add(Mul(Pow(b, Integer(3)), c, e, g, Add(m, Integer(2))), Mul(Integer(-1), Mul(Pow(a, Integer(3)), d, f, h, Add(n, Integer(2)))), Mul(Integer(-1), Mul(Pow(a, Integer(2)), b, Add(Mul(c, f, h, m), Mul(Integer(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, Integer(3))))))), Mul(Integer(-1), Mul(a, Pow(b, Integer(2)), Add(Mul(c, Add(Mul(f, g), Mul(e, h))), Mul(d, e, g, Add(Mul(Integer(2), m), n, Integer(4)))))), Mul(b, Add(Mul(Pow(a, Integer(2)), d, f, h, Add(m, Mul(Integer(-1), n))), Mul(Integer(-1), Mul(a, b, Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(n, Integer(1))))))), Mul(Pow(b, Integer(2)), Add(Mul(c, Add(Mul(f, g), Mul(e, h)), Add(m, Integer(1))), Mul(Integer(-1), Mul(d, e, g, Add(m, n, Integer(2))))))), x)), Pow(Mul(Pow(b, Integer(2)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(2)), Add(m, Integer(1)), Add(m, Integer(2))), Integer(-1))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1)))), Mul(Add(Mul(f, Mul(h, Pow(Pow(b, Integer(2)), Integer(-1)))), Mul(Integer(-1), Mul(Mul(d, Add(m, n, Integer(3)), Add(Mul(Pow(a, Integer(2)), d, f, h, Add(m, Mul(Integer(-1), n))), Mul(Integer(-1), Mul(a, b, Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(n, Integer(1))))))), Mul(Pow(b, Integer(2)), Add(Mul(c, Add(Mul(f, g), Mul(e, h)), Add(m, Integer(1))), Mul(Integer(-1), Mul(d, e, g, Add(m, n, Integer(2)))))))), Pow(Mul(Pow(b, Integer(2)), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(2)), Add(m, Integer(1)), Add(m, Integer(2))), Integer(-1))))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(2))), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule124)

    pattern125 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(Or(And(RationalQ(m_), Inequality(Integer(-2), Integer(LessEqual), m_, Integer(Less), Integer(-1))), SumSimplerQ(m_, Integer(1))), NonzeroQ(Add(m_, Integer(1))), NonzeroQ(Add(m_, n_, Integer(3)))), (f, n, e, c, g, x, m, b, a, h, d)))
    rule125 = ReplacementRule(pattern125, lambda f, n, e, c, g, x, m, b, a, h, d : Add(Mul(Mul(Add(Mul(Pow(a, Integer(2)), d, f, h, Add(n, Integer(2))), Mul(Pow(b, Integer(2)), d, e, g, Add(m, n, Integer(3))), Mul(a, b, Add(Mul(c, f, h, Add(m, Integer(1))), Mul(Integer(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, Integer(3)))))), Mul(b, f, h, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1)), x)), Pow(Mul(Pow(b, Integer(2)), d, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1)), Add(m, n, Integer(3))), Integer(-1))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, h, Add(n, Integer(1)), Add(n, Integer(2))), Mul(a, b, d, Add(n, Integer(1)), Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, Integer(3)))))), Mul(Pow(b, Integer(2)), Add(Mul(Pow(c, Integer(2)), f, h, Add(m, Integer(1)), Add(m, Integer(2))), Mul(Integer(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, Integer(1)), Add(m, n, Integer(3)))), Mul(Pow(d, Integer(2)), e, g, Add(m, n, Integer(2)), Add(m, n, Integer(3)))))), Pow(Mul(Pow(b, Integer(2)), d, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(m, Integer(1)), Add(m, n, Integer(3))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n)), x)))))
    rubi.add(rule125)

    pattern126 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(m_, n_, Integer(2))), NonzeroQ(Add(m_, n_, Integer(3)))), (f, n, e, c, g, x, m, b, a, h, d)))
    rule126 = ReplacementRule(pattern126, lambda f, n, e, c, g, x, m, b, a, h, d : Add(Mul(Mul(Integer(-1), Add(Mul(a, d, f, h, Add(n, Integer(2))), Mul(b, c, f, h, Add(m, Integer(2))), Mul(Integer(-1), Mul(b, d, Add(Mul(f, g), Mul(e, h)), Add(m, n, Integer(3)))), Mul(Integer(-1), Mul(b, d, f, h, Add(m, n, Integer(2)), x)))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Mul(Pow(b, Integer(2)), Pow(d, Integer(2)), Add(m, n, Integer(2)), Add(m, n, Integer(3))), Integer(-1)))), Mul(Mul(Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, h, Add(n, Integer(1)), Add(n, Integer(2))), Mul(a, b, d, Add(n, Integer(1)), Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, Integer(3)))))), Mul(Pow(b, Integer(2)), Add(Mul(Pow(c, Integer(2)), f, h, Add(m, Integer(1)), Add(m, Integer(2))), Mul(Integer(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, Integer(1)), Add(m, n, Integer(3)))), Mul(Pow(d, Integer(2)), e, g, Add(m, n, Integer(2)), Add(m, n, Integer(3)))))), Pow(Mul(Pow(b, Integer(2)), Pow(d, Integer(2)), Add(m, n, Integer(2)), Add(m, n, Integer(3))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule126)

    pattern127 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(Or(IntegersQ(m_, n_, p_), PositiveIntegerQ(n_, p_))), (e, f, n, c, g, x, m, b, p, a, h, d)))
    rule127 = ReplacementRule(pattern127, lambda e, f, n, c, g, x, m, b, p, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Add(g, Mul(h, x))), x), x))
    rubi.add(rule127)

    pattern128 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(RationalQ(m_, n_), Less(m_, Integer(-1)), Greater(n_, Integer(0)), IntegerQ(m_)), (e, f, n, c, g, x, m, b, p, a, h, d)))
    rule128 = ReplacementRule(pattern128, lambda e, f, n, c, g, x, m, b, p, a, h, d : Add(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(b, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(b, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(b, c, Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Add(m, Integer(1))), Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(Mul(d, e, n), Mul(c, f, Add(p, Integer(1))))), Mul(d, Add(Mul(b, Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Add(m, Integer(1))), Mul(f, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(n, p, Integer(1)))), x)), x)), x)))))
    rubi.add(rule128)

    pattern129 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(RationalQ(m_, n_), Less(m_, Integer(-1)), Greater(n_, Integer(0)), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), n_), Mul(Integer(2), p_))), (e, f, n, c, g, x, m, b, p, a, h, d)))
    rule129 = ReplacementRule(pattern129, lambda e, f, n, c, g, x, m, b, p, a, h, d : Add(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(b, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(b, Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(b, c, Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Add(m, Integer(1))), Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(Mul(d, e, n), Mul(c, f, Add(p, Integer(1))))), Mul(d, Add(Mul(b, Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Add(m, Integer(1))), Mul(f, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(n, p, Integer(1)))), x)), x)), x)))))
    rubi.add(rule129)

    pattern130 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Less(m_, Integer(-1)), IntegerQ(m_)), (e, f, n, c, g, x, m, b, p, a, h, d)))
    rule130 = ReplacementRule(pattern130, lambda e, f, n, c, g, x, m, b, p, a, h, d : Add(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Add(Mul(a, d, f, g), Mul(Integer(-1), Mul(b, Add(Mul(d, e), Mul(c, f)), g)), Mul(b, c, e, h)), Add(m, Integer(1))), Mul(Integer(-1), Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1)))))), Mul(Integer(-1), Mul(d, f, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(m, n, p, Integer(3)), x))), x)), x))))
    rubi.add(rule130)

    pattern131 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Less(m_, Integer(-1)), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), n_), Mul(Integer(2), p_))), (e, f, n, c, g, x, m, b, p, a, h, d)))
    rule131 = ReplacementRule(pattern131, lambda e, f, n, c, g, x, m, b, p, a, h, d : Add(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Add(Mul(a, d, f, g), Mul(Integer(-1), Mul(b, Add(Mul(d, e), Mul(c, f)), g)), Mul(b, c, e, h)), Add(m, Integer(1))), Mul(Integer(-1), Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1)))))), Mul(Integer(-1), Mul(d, f, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(m, n, p, Integer(3)), x))), x)), x))))
    rubi.add(rule131)

    pattern132 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Greater(m_, Integer(0)), NonzeroQ(Add(m_, n_, p_, Integer(2))), IntegerQ(m_)), (e, f, n, c, g, x, m, b, p, a, h, d)))
    rule132 = ReplacementRule(pattern132, lambda e, f, n, c, g, x, m, b, p, a, h, d : Add(Mul(h, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(d, f, Add(m, n, p, Integer(2))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(d, f, Add(m, n, p, Integer(2))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, g, Add(m, n, p, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(b, c, e, m), Mul(a, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1)))))))), Mul(Add(Mul(b, d, f, g, Add(m, n, p, Integer(2))), Mul(h, Add(Mul(a, d, f, m), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(m, n, Integer(1))), Mul(c, f, Add(m, p, Integer(1))))))))), x)), x)), x))))
    rubi.add(rule132)

    pattern133 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Greater(m_, Integer(0)), NonzeroQ(Add(m_, n_, p_, Integer(2))), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), n_), Mul(Integer(2), p_))), (e, f, n, c, g, x, m, b, p, a, h, d)))
    rule133 = ReplacementRule(pattern133, lambda e, f, n, c, g, x, m, b, p, a, h, d : Add(Mul(h, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(d, f, Add(m, n, p, Integer(2))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(d, f, Add(m, n, p, Integer(2))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, g, Add(m, n, p, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(b, c, e, m), Mul(a, Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1)))))))), Mul(Add(Mul(b, d, f, g, Add(m, n, p, Integer(2))), Mul(h, Add(Mul(a, d, f, m), Mul(Integer(-1), Mul(b, Add(Mul(d, e, Add(m, n, Integer(1))), Mul(c, f, Add(m, p, Integer(1))))))))), x)), x)), x))))
    rubi.add(rule133)

    pattern134 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(NegativeIntegerQ(Add(m_, n_, p_, Integer(2))), NonzeroQ(Add(m_, Integer(1))), Or(SumSimplerQ(m_, Integer(1)), And(Not(And(NonzeroQ(Add(n_, Integer(1))), SumSimplerQ(n_, Integer(1)))), Not(And(NonzeroQ(Add(p_, Integer(1))), SumSimplerQ(p_, Integer(1))))))), (e, f, n, c, g, x, m, b, p, a, h, d)))
    rule134 = ReplacementRule(pattern134, lambda e, f, n, c, g, x, m, b, p, a, h, d : Add(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Add(Mul(b, e), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Add(Mul(a, d, f, g), Mul(Integer(-1), Mul(b, Add(Mul(d, e), Mul(c, f)), g)), Mul(b, c, e, h)), Add(m, Integer(1))), Mul(Integer(-1), Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(Mul(d, e, Add(n, Integer(1))), Mul(c, f, Add(p, Integer(1)))))), Mul(Integer(-1), Mul(d, f, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(m, n, p, Integer(3)), x))), x)), x))))
    rubi.add(rule134)

    pattern135 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (e, f, c, g, x, b, p, a, h, d)))
    rule135 = ReplacementRule(pattern135, lambda e, f, c, g, x, b, p, a, h, d : Add(Mul(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(a, Mul(b, x)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(d, g), Mul(Integer(-1), Mul(c, h))), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(c, Mul(d, x)), Integer(-1))), x)))))
    rubi.add(rule135)

    pattern136 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(True, (e, f, n, c, g, x, b, p, a, h, d)))
    rule136 = ReplacementRule(pattern136, lambda e, f, n, c, g, x, b, p, a, h, d : Add(Mul(Mul(h, Pow(b, Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x)), Mul(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(b, Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(a, Mul(b, x)), Integer(-1)))), x))))
    rubi.add(rule136)

    pattern137 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(SimplerQ(Add(a_, Mul(b_, x_)), Add(e_, Mul(f_, x_))), SimplerQ(Add(c_, Mul(d_, x_)), Add(e_, Mul(f_, x_)))), (f, e, c, g, x, b, a, h, d)))
    rule137 = ReplacementRule(pattern137, lambda f, e, c, g, x, b, a, h, d : Add(Mul(Mul(h, Pow(f, Integer(-1))), Int(Mul(Sqrt(Add(e, Mul(f, x))), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x)))), Integer(-1))), x)), Mul(Mul(Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Pow(f, Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), Integer(-1))), x))))
    rubi.add(rule137)

    pattern138 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(SumSimplerQ(m_, Integer(1)), And(Not(SumSimplerQ(n_, Integer(1))), Not(SumSimplerQ(p_, Integer(1)))))), (e, f, n, c, g, x, m, b, p, a, h, d)))
    rule138 = ReplacementRule(pattern138, lambda e, f, n, c, g, x, m, b, p, a, h, d : Add(Mul(Mul(h, Pow(b, Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x)), Mul(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(b, Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule138)

    pattern139 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(q, x), cons(And(RationalQ(p_), Less(Integer(0), p_, Integer(1))), (e, f, q, c, g, x, b, p, a, h, d)))
    rule139 = ReplacementRule(pattern139, lambda e, f, q, c, g, x, b, p, a, h, d : Add(Mul(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Mul(Pow(Add(g, Mul(h, x)), q), Pow(Add(a, Mul(b, x)), Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Mul(Pow(Add(g, Mul(h, x)), q), Pow(Add(c, Mul(d, x)), Integer(-1)))), x)))))
    rubi.add(rule139)

    pattern140 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (e, f, c, g, x, b, a, h, d)))
    rule140 = ReplacementRule(pattern140, lambda e, f, c, g, x, b, a, h, d : Mul(Integer(-2), Sqrt(Mul(d, Mul(Add(e, Mul(f, x)), Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1))))), Mul(Sqrt(Mul(d, Mul(Add(g, Mul(h, x)), Pow(Add(Mul(d, g), Mul(Integer(-1), Mul(c, h))), Integer(-1))))), Pow(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Sqrt(Mul(Mul(Integer(-1), f), Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1)))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), EllipticPi(Mul(Mul(Integer(-1), b), Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Mul(f, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1)))), ArcSin(Mul(Sqrt(Mul(Mul(Integer(-1), f), Pow(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Integer(-1)))), Sqrt(Add(c, Mul(d, x))))), Mul(h, Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Mul(f, Add(Mul(d, g), Mul(Integer(-1), Mul(c, h)))), Integer(-1)))))))
    rubi.add(rule140)

    pattern141 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(IntegerQ(Add(n_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (e, f, n, c, g, x, b, a, h, d)))
    rule141 = ReplacementRule(pattern141, lambda e, f, n, c, g, x, b, a, h, d : Int(ExpandIntegrand(Mul(Integer(1), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Pow(Add(a, Mul(b, x)), Integer(-1))), x), x))
    rubi.add(rule141)

    pattern142 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (e, f, c, g, x, b, a, h, d)))
    rule142 = ReplacementRule(pattern142, lambda e, f, c, g, x, b, a, h, d : Add(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(Pow(b, Integer(2)), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(a, Mul(b, x)), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Pow(b, Integer(2)), Integer(-1))), Int(Mul(Add(Mul(b, f, g), Mul(b, e, h), Mul(Integer(-1), Mul(a, f, h)), Mul(b, f, h, x)), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), x))))
    rubi.add(rule142)

    pattern143 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (e, f, c, g, x, b, a, h, d)))
    rule143 = ReplacementRule(pattern143, lambda e, f, c, g, x, b, a, h, d : Mul(Integer(-2), Add(a, Mul(b, x)), Sqrt(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Mul(Add(c, Mul(d, x)), Pow(Mul(Add(Mul(d, g), Mul(Integer(-1), Mul(c, h))), Add(a, Mul(b, x))), Integer(-1))))), Mul(Sqrt(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Mul(Add(e, Mul(f, x)), Pow(Mul(Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Add(a, Mul(b, x))), Integer(-1))))), Pow(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(Integer(1), Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Mul(Pow(x, Integer(2)), Pow(Add(Mul(d, g), Mul(Integer(-1), Mul(c, h))), Integer(-1)))))), Sqrt(Add(Integer(1), Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Mul(Pow(x, Integer(2)), Pow(Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Integer(-1))))))), Integer(-1))), x), x, Mul(Sqrt(Add(g, Mul(h, x))), Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1))))))
    rubi.add(rule143)

    pattern144 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-3), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (e, f, c, g, x, b, a, h, d)))
    rule144 = ReplacementRule(pattern144, lambda e, f, c, g, x, b, a, h, d : Mul(Integer(-2), Add(Mul(d, g), Mul(Integer(-1), Mul(c, h))), Add(a, Mul(b, x)), Sqrt(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Mul(Add(c, Mul(d, x)), Pow(Mul(Add(Mul(d, g), Mul(Integer(-1), Mul(c, h))), Add(a, Mul(b, x))), Integer(-1))))), Mul(Sqrt(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Mul(Add(e, Mul(f, x)), Pow(Mul(Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Add(a, Mul(b, x))), Integer(-1))))), Pow(Mul(Pow(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Integer(2)), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), Integer(-1))), Subst(Int(Mul(Sqrt(Add(Integer(1), Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Mul(Pow(x, Integer(2)), Pow(Add(Mul(d, g), Mul(Integer(-1), Mul(c, h))), Integer(-1)))))), Pow(Sqrt(Add(Integer(1), Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Mul(Pow(x, Integer(2)), Pow(Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Integer(-1)))))), Integer(-1))), x), x, Mul(Sqrt(Add(g, Mul(h, x))), Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1))))))
    rubi.add(rule144)

    pattern145 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (e, f, c, g, x, b, a, h, d)))
    rule145 = ReplacementRule(pattern145, lambda e, f, c, g, x, b, a, h, d : Mul(Integer(2), Add(a, Mul(b, x)), Sqrt(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Mul(Add(c, Mul(d, x)), Pow(Mul(Add(Mul(d, g), Mul(Integer(-1), Mul(c, h))), Add(a, Mul(b, x))), Integer(-1))))), Mul(Sqrt(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Mul(Add(e, Mul(f, x)), Pow(Mul(Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Add(a, Mul(b, x))), Integer(-1))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Mul(Add(h, Mul(Integer(-1), Mul(b, Pow(x, Integer(2))))), Sqrt(Add(Integer(1), Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Mul(Pow(x, Integer(2)), Pow(Add(Mul(d, g), Mul(Integer(-1), Mul(c, h))), Integer(-1)))))), Sqrt(Add(Integer(1), Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(a, f))), Mul(Pow(x, Integer(2)), Pow(Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Integer(-1))))))), Integer(-1))), x), x, Mul(Sqrt(Add(g, Mul(h, x))), Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1))))))
    rubi.add(rule145)

    pattern146 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(-3), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (e, f, c, g, x, b, a, h, d)))
    rule146 = ReplacementRule(pattern146, lambda e, f, c, g, x, b, a, h, d : Add(Mul(Mul(Mul(Integer(-1), d), Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), x)), Mul(Mul(b, Pow(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Integer(-1))), Int(Mul(Sqrt(Add(c, Mul(d, x))), Pow(Mul(Pow(Add(a, Mul(b, x)), Mul(Integer(3), Pow(Integer(2), Integer(-1)))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), x))))
    rubi.add(rule146)

    pattern147 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (e, f, c, g, x, b, a, h, d)))
    rule147 = ReplacementRule(pattern147, lambda e, f, c, g, x, b, a, h, d : Add(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Mul(Sqrt(Add(g, Mul(h, x))), Pow(Mul(h, Sqrt(Add(e, Mul(f, x)))), Integer(-1)))), Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Mul(Add(Mul(b, f, g), Mul(b, e, h), Mul(Integer(-1), Mul(Integer(2), a, f, h))), Pow(Mul(Integer(2), Pow(f, Integer(2)), h), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), x)), Mul(Mul(Add(Mul(a, d, f, h), Mul(Integer(-1), Mul(b, Add(Mul(d, f, g), Mul(d, e, h), Mul(Integer(-1), Mul(c, f, h)))))), Pow(Mul(Integer(2), Pow(f, Integer(2)), h), Integer(-1))), Int(Mul(Sqrt(Add(e, Mul(f, x))), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), x)), Mul(Integer(-1), Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Mul(Add(Mul(f, g), Mul(Integer(-1), Mul(e, h))), Pow(Mul(Integer(2), f, h), Integer(-1))), Int(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Pow(Add(e, Mul(f, x)), Mul(Integer(3), Pow(Integer(2), Integer(-1)))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), x)))))
    rubi.add(rule147)

    pattern148 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(3), Integer(2))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (e, f, c, g, x, b, a, h, d)))
    rule148 = ReplacementRule(pattern148, lambda e, f, c, g, x, b, a, h, d : Add(Mul(Mul(b, Pow(d, Integer(-1))), Int(Mul(Sqrt(Add(a, Mul(b, x))), Mul(Sqrt(Add(c, Mul(d, x))), Pow(Mul(Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(d, Integer(-1))), Int(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), Integer(-1))), x)))))
    rubi.add(rule148)

    pattern149 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegersQ(p_, q_)), (e, f, n, c, g, x, q, m, b, p, a, h, d)))
    rule149 = ReplacementRule(pattern149, lambda e, f, n, c, g, x, q, m, b, p, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), x), x))
    rubi.add(rule149)

    pattern150 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PositiveIntegerQ(q_), Or(SumSimplerQ(m_, Integer(1)), And(Not(SumSimplerQ(n_, Integer(1))), Not(SumSimplerQ(p_, Integer(1)))))), (e, f, n, c, g, x, q, m, b, p, a, h, d)))
    rule150 = ReplacementRule(pattern150, lambda e, f, n, c, g, x, q, m, b, p, a, h, d : Add(Mul(Mul(h, Pow(b, Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), Add(q, Integer(-1)))), x)), Mul(Mul(Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Pow(b, Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), Add(q, Integer(-1)))), x))))
    rubi.add(rule150)

    pattern151 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(True, (e, n, f, c, g, q, x, m, b, p, a, h, d)))
    rule151 = ReplacementRule(pattern151, lambda e, n, f, c, g, q, x, m, b, p, a, h, d : Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), x))
    rubi.add(rule151)

    pattern152 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), u_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), u_)), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), u_)), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, n, f, c, g, q, x, m, u, b, p, a, h, d)))
    rule152 = ReplacementRule(pattern152, lambda e, n, f, c, g, q, x, m, u, b, p, a, h, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), x), x, u)))
    rubi.add(rule152)

    pattern153 = Pattern(Int(Pow(Mul(Wildcard.optional('i', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), p_), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), q_)), r_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(i, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(True, (e, f, n, c, g, x, q, m, i, b, p, a, h, d, r)))
    rule153 = ReplacementRule(pattern153, lambda e, f, n, c, g, x, q, m, i, b, p, a, h, d, r : Mul(Mul(Pow(Mul(i, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), r), Pow(Mul(Pow(Add(a, Mul(b, x)), Mul(m, r)), Pow(Add(c, Mul(d, x)), Mul(n, r)), Pow(Add(e, Mul(f, x)), Mul(p, r)), Pow(Add(g, Mul(h, x)), Mul(q, r))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Mul(m, r)), Pow(Add(c, Mul(d, x)), Mul(n, r)), Pow(Add(e, Mul(f, x)), Mul(p, r)), Pow(Add(g, Mul(h, x)), Mul(q, r))), x)))
    rubi.add(rule153)

    pattern154 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule154 = ReplacementRule(pattern154, lambda b, c, x, a : Mul(Mul(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, x)), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, x)), Integer(-1))), x)))
    rubi.add(rule154)

    pattern155 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), p_), Integer(1)))), (c, x, b, p, a)))
    rule155 = ReplacementRule(pattern155, lambda c, x, b, p, a : Mul(Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Integer(2), c, Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))))
    rubi.add(rule155)

    pattern156 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(p_), PerfectSquareQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (c, x, b, p, a)))
    rule156 = ReplacementRule(pattern156, lambda c, x, b, p, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Mul(Integer(1), Pow(Pow(c, p), Integer(-1))), Int(Mul(Pow(Simp(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))), Mul(c, x)), x), p), Pow(Simp(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))), Mul(c, x)), x), p)), x))))
    rubi.add(rule156)

    pattern157 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(p_), Not(PerfectSquareQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))))), (c, x, b, p, a)))
    rule157 = ReplacementRule(pattern157, lambda c, x, b, p, a : Int(ExpandIntegrand(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), x), x))
    rubi.add(rule157)

    pattern158 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Greater(p_, Integer(0)), IntegerQ(Mul(Integer(4), p_))), (c, x, b, p, a)))
    rule158 = ReplacementRule(pattern158, lambda c, x, b, p, a : Add(Mul(Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Integer(2), c, Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(p, Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(Mul(Integer(2), c, Add(Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), x)))))
    rubi.add(rule158)

    pattern159 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-3), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule159 = ReplacementRule(pattern159, lambda b, c, x, a : Mul(Integer(-2), Mul(Add(b, Mul(Integer(2), c, x)), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1)))))
    rubi.add(rule159)

    pattern160 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1)), Unequal(p_, Mul(Integer(-3), Pow(Integer(2), Integer(-1)))), IntegerQ(Mul(Integer(4), p_))), (c, x, b, p, a)))
    rule160 = ReplacementRule(pattern160, lambda c, x, b, p, a : Add(Mul(Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Integer(2), c, Mul(Add(Mul(Integer(2), p), Integer(3)), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), x)))))
    rubi.add(rule160)

    pattern161 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PosQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PerfectSquareQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule161 = ReplacementRule(pattern161, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Simp(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))), Mul(c, x)), x), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Simp(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))), Mul(c, x)), x), Integer(-1))), x))))))
    rubi.add(rule161)

    pattern162 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule162 = ReplacementRule(pattern162, lambda b, c, x, a : With(List(Set(Integer(q), Add(Integer(1), Mul(Integer(-1), Mul(Integer(4), Simplify(Mul(a, Mul(c, Pow(Pow(b, Integer(2)), Integer(-1)))))))))), Condition(Mul(Mul(Integer(-2), Pow(b, Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), Pow(x, Integer(2)))), Integer(-1))), x), x, Add(Integer(1), Mul(Integer(2), c, Mul(x, Pow(b, Integer(-1))))))), And(RationalQ(Integer(q)), Or(EqQ(Pow(Integer(q), Integer(2)), Integer(1)), Not(RationalQ(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))))))))))
    rubi.add(rule162)

    pattern163 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule163 = ReplacementRule(pattern163, lambda b, c, x, a : Mul(Integer(-2), Subst(Int(Mul(Integer(1), Pow(Simp(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)), Mul(Integer(-1), Pow(x, Integer(2)))), x), Integer(-1))), x), x, Add(b, Mul(Integer(2), c, x)))))
    rubi.add(rule163)

    pattern164 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(PositiveQ(Add(Mul(Integer(4), a_), Mul(Integer(-1), Mul(Pow(b_, Integer(2)), Pow(c_, Integer(-1))))))), (c, x, b, p, a)))
    rule164 = ReplacementRule(pattern164, lambda c, x, b, p, a : Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Pow(Mul(Integer(-4), Mul(c, Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1)))), p)), Integer(-1))), Subst(Int(Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(Pow(x, Integer(2)), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1))))), x), p), x), x, Add(b, Mul(Integer(2), c, x)))))
    rubi.add(rule164)

    pattern165 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(b, x), FreeQ(c, x), cons(True, (b, c, x)))
    rule165 = ReplacementRule(pattern165, lambda b, c, x : Mul(Integer(2), Subst(Int(Mul(Integer(1), Pow(Add(Integer(1), Mul(Integer(-1), Mul(c, Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule165)

    pattern166 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule166 = ReplacementRule(pattern166, lambda b, c, x, a : Mul(Integer(2), Subst(Int(Mul(Integer(1), Pow(Add(Mul(Integer(4), c), Mul(Integer(-1), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Add(b, Mul(Integer(2), c, x)), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule166)

    pattern167 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), x_), FreeQ(b, x), FreeQ(c, x), cons(And(RationalQ(p_), LessEqual(Integer(3), Denominator(p_), Integer(4))), (b, p, c, x)))
    rule167 = ReplacementRule(pattern167, lambda b, p, c, x : Mul(Mul(Pow(Add(Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Pow(Mul(Mul(Integer(-1), c), Mul(Add(Mul(b, x), Mul(c, Pow(x, Integer(2)))), Pow(Pow(b, Integer(2)), Integer(-1)))), p), Integer(-1))), Int(Pow(Add(Mul(Mul(Integer(-1), c), Mul(x, Pow(b, Integer(-1)))), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Mul(Pow(x, Integer(2)), Pow(Pow(b, Integer(2)), Integer(-1)))))), p), x)))
    rubi.add(rule167)

    pattern168 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_)), (c, x, b, p, a)))
    rule168 = ReplacementRule(pattern168, lambda c, x, b, p, a : With(List(Set(Integer(d), Denominator(p))), Condition(Mul(Integer(d), Mul(Sqrt(Pow(Add(b, Mul(Integer(2), c, x)), Integer(2))), Pow(Add(b, Mul(Integer(2), c, x)), Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(d), Add(p, Integer(1))), Integer(-1))), Pow(Sqrt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)), Mul(Integer(4), c, Pow(x, Integer(d))))), Integer(-1))), x), x, Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(d), Integer(-1)))))), LessEqual(Integer(3), Integer(d), Integer(4)))))
    rubi.add(rule168)

    pattern169 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(Mul(Integer(4), p_)))), (c, x, b, p, a)))
    rule169 = ReplacementRule(pattern169, lambda c, x, b, p, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Mul(Mul(Integer(-1), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), Pow(Mul(Integer(q), Add(p, Integer(1)), Pow(Mul(Add(Integer(q), Mul(Integer(-1), b), Mul(Integer(-1), Mul(Integer(2), c, x))), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Add(p, Integer(1)))), Integer(-1))), Hypergeometric2F1(Mul(Integer(-1), p), Add(p, Integer(1)), Add(p, Integer(2)), Mul(Add(b, Integer(q), Mul(Integer(2), c, x)), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))))))
    rubi.add(rule169)

    pattern170 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (c, x, u, b, p, a)))
    rule170 = ReplacementRule(pattern170, lambda c, x, u, b, p, a : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), x), x, u)))
    rubi.add(rule170)

    pattern171 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), IntegerQ(Mul(Add(m_, Integer(1)), Pow(Integer(2), Integer(-1))))), (e, c, x, m, b, p, a, d)))
    rule171 = ReplacementRule(pattern171, lambda e, c, x, m, b, p, a, d : Mul(Pow(e, m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Mul(Add(m, Integer(1)), Pow(Integer(2), Integer(-1))))), Pow(Mul(Pow(c, Mul(Add(m, Integer(1)), Pow(Integer(2), Integer(-1)))), Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))))
    rubi.add(rule171)

    pattern172 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(1)))), (e, c, x, m, b, p, a, d)))
    rule172 = ReplacementRule(pattern172, lambda e, c, x, m, b, p, a, d : Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Mul(Log(RemoveContent(Add(d, Mul(e, x)), x)), Pow(e, Integer(-1)))))
    rubi.add(rule172)

    pattern173 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1)))), (e, c, x, m, b, p, a, d)))
    rule173 = ReplacementRule(pattern173, lambda e, c, x, m, b, p, a, d : Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))))
    rubi.add(rule173)

    pattern174 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(2))), NonzeroQ(Add(m_, Integer(1)))), (e, c, x, m, b, p, a, d)))
    rule174 = ReplacementRule(pattern174, lambda e, c, x, m, b, p, a, d : Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), Add(m, Integer(1)))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Add(m, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))))
    rubi.add(rule174)

    pattern175 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, b, a, d)))
    rule175 = ReplacementRule(pattern175, lambda e, c, x, b, a, d : Mul(Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Pow(Add(b, Mul(Integer(2), c, x)), Integer(-1))), Int(Mul(Add(b, Mul(Integer(2), c, x)), Pow(Pow(Add(d, Mul(e, x)), Integer(2)), Integer(-1))), x)))
    rubi.add(rule175)

    pattern176 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Integer(2)))), (e, c, x, m, b, a, d)))
    rule176 = ReplacementRule(pattern176, lambda e, c, x, m, b, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Pow(Mul(e, Add(m, Integer(2))), Integer(-1)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Pow(Mul(e, Add(m, Integer(2)), Add(b, Mul(Integer(2), c, x))), Integer(-1))), Int(Pow(Add(d, Mul(e, x)), m), x)))))
    rubi.add(rule176)

    pattern177 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, b, a, d)))
    rule177 = ReplacementRule(pattern177, lambda e, c, x, b, a, d : Add(Mul(Integer(-4), c, e, Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Pow(Mul(Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(2)), Add(d, Mul(e, x))), Integer(-1)))), Mul(Integer(2), Mul(c, Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, x)), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule177)

    pattern178 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), NonzeroQ(Add(m_, Integer(2)))), (e, c, x, m, b, p, a, d)))
    rule178 = ReplacementRule(pattern178, lambda e, c, x, m, b, p, a, d : Add(Mul(Integer(-2), c, e, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(Mul(m, p), Integer(-1)), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(2))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Add(m, Integer(2)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))))))
    rubi.add(rule178)

    pattern179 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(p_, Mul(Integer(3), Pow(Integer(2), Integer(-1)))))), (e, c, x, b, p, a, d)))
    rule179 = ReplacementRule(pattern179, lambda e, c, x, b, p, a, d : Add(Mul(e, Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), c), Integer(-1))), Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), x))))
    rubi.add(rule179)

    pattern180 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_, p_), Greater(p_, Integer(1)), Inequality(Integer(-2), Integer(LessEqual), m_, Integer(Less), Integer(-1)), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule180 = ReplacementRule(pattern180, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(p, Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))))), Mul(p, Add(Mul(Integer(2), p), Integer(-1)), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule180)

    pattern181 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_, p_), Greater(p_, Integer(1)), Less(m_, Integer(-2)), IntegerQ(Mul(Integer(2), p_)), Not(And(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(3))), Greater(Add(m_, Mul(Integer(3), p_), Integer(3)), Integer(0))))), (e, c, x, m, b, p, a, d)))
    rule181 = ReplacementRule(pattern181, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(p, Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Integer(2))), Integer(-1))))), Mul(Integer(2), c, p, Mul(Add(Mul(Integer(2), p), Integer(-1)), Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule181)

    pattern182 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(2), p_))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), Not(And(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(3))), Greater(Add(m_, Mul(Integer(3), p_), Integer(3)), Integer(0)))), Not(And(RationalQ(m_), Less(m_, Integer(-2)))), Not(And(IntegerQ(m_), Less(Integer(0), m_, Mul(Integer(2), p_)))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule182 = ReplacementRule(pattern182, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(p, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Mul(Integer(2), c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p)), Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))))), Mul(p, Add(Mul(Integer(2), p), Integer(-1)), Mul(Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(2)), Pow(Mul(Integer(2), c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p)), Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule182)

    pattern183 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_, p_), Less(p_, Integer(-1)), Inequality(Integer(0), Integer(Less), m_, Integer(LessEqual), Integer(1)), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule183 = ReplacementRule(pattern183, lambda e, c, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), e), Add(m, Mul(Integer(2), p), Integer(2)), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))), Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Add(Mul(Integer(2), p), Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))), Mul(Pow(e, Integer(2)), m, Mul(Add(m, Mul(Integer(2), p), Integer(2)), Pow(Mul(Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule183)

    pattern184 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1)), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule184 = ReplacementRule(pattern184, lambda e, c, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), e), m, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Pow(Add(d, Mul(e, x)), m), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Integer(2), c, Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Pow(e, Integer(2)), m, Mul(Add(m, Integer(-1)), Pow(Mul(Integer(2), c, Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule184)

    pattern185 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_, p_), Less(p_, Integer(-1)), NonzeroQ(Add(m_, p_, Integer(1))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule185 = ReplacementRule(pattern185, lambda e, c, x, m, b, p, a, d : Add(Mul(Integer(-2), c, e, Add(m, Mul(Integer(2), p), Integer(2)), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1)), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(2))), Integer(-1)))), Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Add(Mul(Integer(2), p), Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))), Mul(Integer(2), c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(2)), Mul(Add(m, Mul(Integer(2), p), Integer(3)), Pow(Mul(Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1)), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule185)

    pattern186 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_), Greater(m_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), Or(Not(RationalQ(p_)), Inequality(Integer(-1), Integer(LessEqual), p_, Integer(Less), Integer(0)), And(IntegerQ(m_), Less(Integer(0), m_, Mul(Integer(2), p_))), And(Equal(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))), Less(p_, Integer(0)))), Or(IntegerQ(m_), IntegerQ(Mul(Integer(2), p_)))), (e, c, x, m, b, p, a, d)))
    rule186 = ReplacementRule(pattern186, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), m), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Integer(2), c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(m, Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule186)

    pattern187 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_), Less(m_, Integer(-1)), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule187 = ReplacementRule(pattern187, lambda e, c, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), Add(m, Integer(1)))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Add(m, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))), Mul(Integer(2), c, Mul(Add(m, Mul(Integer(2), p), Integer(2)), Pow(Mul(Add(m, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule187)

    pattern188 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, m, b, p, a, d)))
    rule188 = ReplacementRule(pattern188, lambda e, c, x, m, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(c, IntPart(p)), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule188)

    pattern189 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(p_)), (e, c, x, m, b, p, a, d)))
    rule189 = ReplacementRule(pattern189, lambda e, c, x, m, b, p, a, d : Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x))
    rubi.add(rule189)

    pattern190 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Or(IntegerQ(p_), And(PositiveQ(a_), PositiveQ(d_), IntegerQ(Add(m_, p_))))), (e, c, x, m, p, a, d)))
    rule190 = ReplacementRule(pattern190, lambda e, c, x, m, p, a, d : Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x))
    rubi.add(rule190)

    pattern191 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_))), (e, c, x, m, b, p, a, d)))
    rule191 = ReplacementRule(pattern191, lambda e, c, x, m, b, p, a, d : Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1))), Integer(-1)))))
    rubi.add(rule191)

    pattern192 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_))), (e, c, x, m, p, a, d)))
    rule192 = ReplacementRule(pattern192, lambda e, c, x, m, p, a, d : Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1))), Integer(-1)))))
    rubi.add(rule192)

    pattern193 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), (e, c, x, m, b, p, a, d)))
    rule193 = ReplacementRule(pattern193, lambda e, c, x, m, b, p, a, d : Mul(e, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))))
    rubi.add(rule193)

    pattern194 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), (e, c, x, m, p, a, d)))
    rule194 = ReplacementRule(pattern194, lambda e, c, x, m, p, a, d : Mul(e, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, d, Add(p, Integer(1))), Integer(-1)))))
    rubi.add(rule194)

    pattern195 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(2)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), RationalQ(p_), Less(p_, Integer(-1))), (e, c, x, b, p, a, d)))
    rule195 = ReplacementRule(pattern195, lambda e, c, x, b, p, a, d : Add(Mul(e, Add(d, Mul(e, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Mul(Add(p, Integer(2)), Pow(Mul(c, Add(p, Integer(1))), Integer(-1))), Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), x)))))
    rubi.add(rule195)

    pattern196 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), RationalQ(p_), Less(p_, Integer(-1))), (e, c, x, p, a, d)))
    rule196 = ReplacementRule(pattern196, lambda e, c, x, p, a, d : Add(Mul(e, Add(d, Mul(e, x)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Mul(Add(p, Integer(2)), Pow(Mul(c, Add(p, Integer(1))), Integer(-1))), Int(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), x)))))
    rubi.add(rule196)

    pattern197 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), IntegerQ(m_), RationalQ(p_), Or(Less(Integer(0), Mul(Integer(-1), m_), p_), Less(p_, Mul(Integer(-1), m_), Integer(0))), Unequal(m_, Integer(2)), Unequal(m_, Integer(-1))), (e, c, x, m, b, p, a, d)))
    rule197 = ReplacementRule(pattern197, lambda e, c, x, m, b, p, a, d : Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(m, p)), Pow(Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(c, Mul(x, Pow(e, Integer(-1))))), m), Integer(-1))), x))
    rubi.add(rule197)

    pattern198 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), IntegerQ(m_), RationalQ(p_), Or(Less(Integer(0), Mul(Integer(-1), m_), p_), Less(p_, Mul(Integer(-1), m_), Integer(0))), Unequal(m_, Integer(2)), Unequal(m_, Integer(-1))), (e, c, x, m, p, a, d)))
    rule198 = ReplacementRule(pattern198, lambda e, c, x, m, p, a, d : Mul(Mul(Pow(d, Mul(Integer(2), m)), Pow(Pow(a, m), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(m, p)), Pow(Pow(Add(d, Mul(Integer(-1), Mul(e, x))), m), Integer(-1))), x)))
    rubi.add(rule198)

    pattern199 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), PositiveIntegerQ(Simplify(Add(m_, p_)))), (e, c, x, m, b, p, a, d)))
    rule199 = ReplacementRule(pattern199, lambda e, c, x, m, b, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Simplify(Add(m, p)), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule199)

    pattern200 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), PositiveIntegerQ(Simplify(Add(m_, p_)))), (e, c, x, m, p, a, d)))
    rule200 = ReplacementRule(pattern200, lambda e, c, x, m, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(2), c, d, Mul(Simplify(Add(m, p)), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule200)

    pattern201 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), NegativeIntegerQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(2))))), (e, c, x, m, b, p, a, d)))
    rule201 = ReplacementRule(pattern201, lambda e, c, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), e), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, p, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))), Mul(c, Mul(Simplify(Add(m, Mul(Integer(2), p), Integer(2))), Pow(Mul(Add(m, p, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule201)

    pattern202 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), NegativeIntegerQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(2))))), (e, c, x, m, p, a, d)))
    rule202 = ReplacementRule(pattern202, lambda e, c, x, m, p, a, d : Add(Mul(Mul(Integer(-1), e), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, d, Add(m, p, Integer(1))), Integer(-1)))), Mul(Mul(Simplify(Add(m, Mul(Integer(2), p), Integer(2))), Pow(Mul(Integer(2), d, Add(m, p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule202)

    pattern203 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, b, a, d)))
    rule203 = ReplacementRule(pattern203, lambda e, c, x, b, a, d : Mul(Integer(2), e, Subst(Int(Mul(Integer(1), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(Pow(e, Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Pow(Sqrt(Add(d, Mul(e, x))), Integer(-1))))))
    rubi.add(rule203)

    pattern204 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule204 = ReplacementRule(pattern204, lambda e, c, x, a, d : Mul(Integer(2), e, Subst(Int(Mul(Integer(1), Pow(Add(Mul(Integer(2), c, d), Mul(Pow(e, Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))), Pow(Sqrt(Add(d, Mul(e, x))), Integer(-1))))))
    rubi.add(rule204)

    pattern205 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Greater(p_, Integer(0)), Or(Less(m_, Integer(-2)), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(1)))), NonzeroQ(Add(m_, p_, Integer(1))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule205 = ReplacementRule(pattern205, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(c, Mul(p, Pow(Mul(Pow(e, Integer(2)), Add(m, p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule205)

    pattern206 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Greater(p_, Integer(0)), Or(Less(m_, Integer(-2)), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(1)))), NonzeroQ(Add(m_, p_, Integer(1))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, p, a, d)))
    rule206 = ReplacementRule(pattern206, lambda e, c, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(c, Mul(p, Pow(Mul(Pow(e, Integer(2)), Add(m, p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule206)

    pattern207 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Greater(p_, Integer(0)), Or(Inequality(Integer(-2), Integer(LessEqual), m_, Integer(Less), Integer(0)), Equal(Add(m_, p_, Integer(1)), Integer(0))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule207 = ReplacementRule(pattern207, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(p, Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule207)

    pattern208 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Greater(p_, Integer(0)), Or(Inequality(Integer(-2), Integer(LessEqual), m_, Integer(Less), Integer(0)), Equal(Add(m_, p_, Integer(1)), Integer(0))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, p, a, d)))
    rule208 = ReplacementRule(pattern208, lambda e, c, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Integer(2), c, d, Mul(p, Pow(Mul(Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule208)

    pattern209 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Inequality(Integer(0), Integer(Less), m_, Integer(LessEqual), Integer(1)), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule209 = ReplacementRule(pattern209, lambda e, c, x, m, b, p, a, d : Add(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(e, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Mul(Add(m, Mul(Integer(2), p), Integer(2)), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule209)

    pattern210 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Inequality(Integer(0), Integer(Less), m_, Integer(LessEqual), Integer(1)), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, p, a, d)))
    rule210 = ReplacementRule(pattern210, lambda e, c, x, m, p, a, d : Add(Mul(Mul(Integer(-1), d), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, e, Add(p, Integer(1))), Integer(-1)))), Mul(d, Mul(Add(m, Mul(Integer(2), p), Integer(2)), Pow(Mul(Integer(2), a, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule210)

    pattern211 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1)), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule211 = ReplacementRule(pattern211, lambda e, c, x, m, b, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Mul(Add(m, p), Pow(Mul(c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule211)

    pattern212 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1)), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, p, a, d)))
    rule212 = ReplacementRule(pattern212, lambda e, c, x, m, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Mul(Add(m, p), Pow(Mul(c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule212)

    pattern213 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), GreaterEqual(m_, Integer(1)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule213 = ReplacementRule(pattern213, lambda e, c, x, m, b, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Add(m, p), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule213)

    pattern214 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), GreaterEqual(m_, Integer(1)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, p, a, d)))
    rule214 = ReplacementRule(pattern214, lambda e, c, x, m, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(2), c, d, Mul(Add(m, p), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule214)

    pattern215 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), Less(m_, Integer(0)), NonzeroQ(Add(m_, p_, Integer(1))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule215 = ReplacementRule(pattern215, lambda e, c, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), e), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, p, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))), Mul(c, Mul(Add(m, Mul(Integer(2), p), Integer(2)), Pow(Mul(Add(m, p, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule215)

    pattern216 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), Less(m_, Integer(0)), NonzeroQ(Add(m_, p_, Integer(1))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, p, a, d)))
    rule216 = ReplacementRule(pattern216, lambda e, c, x, m, p, a, d : Add(Mul(Mul(Integer(-1), e), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, d, Add(m, p, Integer(1))), Integer(-1)))), Mul(Mul(Add(m, Mul(Integer(2), p), Integer(2)), Pow(Mul(Integer(2), d, Add(m, p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule216)

    pattern217 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(m, x), cons(And(Not(IntegerQ(p_))), (e, c, x, m, b, p)))
    rule217 = ReplacementRule(pattern217, lambda e, c, x, m, b, p : Mul(Pow(Mul(e, x), m), Mul(Pow(Add(Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Pow(x, Add(m, p)), Pow(Add(b, Mul(c, x)), p)), Integer(-1))), Int(Mul(Pow(x, Add(m, p)), Pow(Add(b, Mul(c, x)), p)), x)))
    rubi.add(rule217)

    pattern218 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), PositiveQ(a_), PositiveQ(d_)), (e, c, x, m, p, a, d)))
    rule218 = ReplacementRule(pattern218, lambda e, c, x, m, p, a, d : Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x))
    rubi.add(rule218)

    pattern219 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (e, c, x, m, b, p, a, d)))
    rule219 = ReplacementRule(pattern219, lambda e, c, x, m, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, x)), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, x), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x)))
    rubi.add(rule219)

    pattern220 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (e, c, x, m, p, a, d)))
    rule220 = ReplacementRule(pattern220, lambda e, c, x, m, p, a, d : Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, x)), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, x), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x)))
    rubi.add(rule220)

    pattern221 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, b, a, d)))
    rule221 = ReplacementRule(pattern221, lambda e, c, x, b, a, d : Add(Mul(Integer(-4), b, Mul(c, Pow(Mul(d, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Integer(1), Pow(Add(b, Mul(Integer(2), c, x)), Integer(-1))), x)), Mul(Mul(Pow(b, Integer(2)), Pow(Mul(Pow(d, Integer(2)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Add(d, Mul(e, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x))))
    rubi.add(rule221)

    pattern222 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), NonzeroQ(Add(p_, Integer(1)))), (e, c, x, m, b, p, a, d)))
    rule222 = ReplacementRule(pattern222, lambda e, c, x, m, b, p, a, d : Mul(Integer(2), c, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(e, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))))
    rubi.add(rule222)

    pattern223 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), PositiveIntegerQ(p_), Not(And(ZeroQ(Add(m_, Integer(-3))), Unequal(p_, Integer(1))))), (e, c, x, m, b, p, a, d)))
    rule223 = ReplacementRule(pattern223, lambda e, c, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule223)

    pattern224 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Integer(-1)), Not(And(EvenQ(m_), Less(Add(m_, Mul(Integer(2), p_), Integer(3)), Integer(0)))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule224 = ReplacementRule(pattern224, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(b, Mul(p, Pow(Mul(d, e, Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule224)

    pattern225 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), RationalQ(p_), Greater(p_, Integer(0)), Not(And(RationalQ(m_), Less(m_, Integer(-1)))), Not(And(PositiveIntegerQ(Mul(Add(m_, Integer(-1)), Pow(Integer(2), Integer(-1)))), Or(Not(IntegerQ(p_)), Less(m_, Mul(Integer(2), p_))))), RationalQ(m_), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule225 = ReplacementRule(pattern225, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(d, p, Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(Mul(b, e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule225)

    pattern226 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1)), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule226 = ReplacementRule(pattern226, lambda e, c, x, m, b, p, a, d : Add(Mul(d, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(b, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(d, e, Mul(Add(m, Integer(-1)), Pow(Mul(b, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule226)

    pattern227 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), RationalQ(p_), Less(p_, Integer(-1)), Not(And(RationalQ(m_), Greater(m_, Integer(1)))), RationalQ(m_), IntegerQ(Mul(Integer(2), p_))), (e, c, x, m, b, p, a, d)))
    rule227 = ReplacementRule(pattern227, lambda e, c, x, m, b, p, a, d : Add(Mul(Integer(2), c, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(e, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Integer(2), c, e, Mul(Add(m, Mul(Integer(2), p), Integer(3)), Pow(Mul(e, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule227)

    pattern228 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, b, a, d)))
    rule228 = ReplacementRule(pattern228, lambda e, c, x, b, a, d : Mul(Integer(4), c, Subst(Int(Mul(Integer(1), Pow(Add(Mul(Pow(b, Integer(2)), e), Mul(Integer(-1), Mul(Integer(4), a, c, e)), Mul(Integer(4), c, e, Pow(x, Integer(2)))), Integer(-1))), x), x, Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))))))
    rubi.add(rule228)

    pattern229 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NegativeQ(Mul(c_, Pow(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))), Integer(-1))))), (e, c, x, b, a, d)))
    rule229 = ReplacementRule(pattern229, lambda e, c, x, b, a, d : Mul(Mul(Integer(4), Pow(e, Integer(-1))), Sqrt(Mul(Mul(Integer(-1), c), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1)))), Subst(Int(Mul(Integer(1), Pow(Sqrt(Simp(Add(Integer(1), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Mul(Pow(x, Integer(4)), Pow(Mul(Pow(d, Integer(2)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))))), x)), Integer(-1))), x), x, Sqrt(Add(d, Mul(e, x))))))
    rubi.add(rule229)

    pattern230 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NegativeQ(Mul(c_, Pow(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))), Integer(-1))))), (e, c, x, b, a, d)))
    rule230 = ReplacementRule(pattern230, lambda e, c, x, b, a, d : Mul(Mul(Integer(4), Pow(e, Integer(-1))), Sqrt(Mul(Mul(Integer(-1), c), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1)))), Subst(Int(Mul(Pow(x, Integer(2)), Pow(Sqrt(Simp(Add(Integer(1), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Mul(Pow(x, Integer(4)), Pow(Mul(Pow(d, Integer(2)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))))), x)), Integer(-1))), x), x, Sqrt(Add(d, Mul(e, x))))))
    rubi.add(rule230)

    pattern231 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), EqQ(Pow(m_, Integer(2)), Mul(Integer(1), Pow(Integer(4), Integer(-1))))), (e, c, x, m, b, a, d)))
    rule231 = ReplacementRule(pattern231, lambda e, c, x, m, b, a, d : Mul(Mul(Sqrt(Mul(Mul(Integer(-1), c), Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1))))), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Sqrt(Add(Mul(Mul(Integer(-1), a), Mul(c, Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1)))), Mul(Integer(-1), Mul(b, c, Mul(x, Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1))))), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Mul(Pow(x, Integer(2)), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1))))))), Integer(-1))), x)))
    rubi.add(rule231)

    pattern232 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), RationalQ(m_), Greater(m_, Integer(1)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), Or(IntegerQ(Mul(Integer(2), p_)), And(IntegerQ(m_), RationalQ(p_)), OddQ(m_))), (e, c, x, m, b, p, a, d)))
    rule232 = ReplacementRule(pattern232, lambda e, c, x, m, b, p, a, d : Add(Mul(Integer(2), d, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(b, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Pow(d, Integer(2)), Add(m, Integer(-1)), Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(Mul(Pow(b, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule232)

    pattern233 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), RationalQ(m_), Less(m_, Integer(-1)), Or(IntegerQ(Mul(Integer(2), p_)), And(IntegerQ(m_), RationalQ(p_)), IntegerQ(Mul(Add(m_, Mul(Integer(2), p_), Integer(3)), Pow(Integer(2), Integer(-1)))))), (e, c, x, m, b, p, a, d)))
    rule233 = ReplacementRule(pattern233, lambda e, c, x, m, b, p, a, d : Add(Mul(Integer(-2), b, d, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Pow(d, Integer(2)), Add(m, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Pow(b, Integer(2)), Mul(Add(m, Mul(Integer(2), p), Integer(3)), Pow(Mul(Pow(d, Integer(2)), Add(m, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule233)

    pattern234 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, m, b, p, a, d)))
    rule234 = ReplacementRule(pattern234, lambda e, c, x, m, b, p, a, d : Mul(Mul(Integer(1), Pow(e, Integer(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(a, Mul(Integer(-1), Mul(Pow(b, Integer(2)), Pow(Mul(Integer(4), c), Integer(-1)))), Mul(Mul(c, Pow(x, Integer(2))), Pow(Pow(e, Integer(2)), Integer(-1)))), p)), x), x, Add(d, Mul(e, x)))))
    rubi.add(rule234)

    pattern235 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), PositiveIntegerQ(p_)), (e, c, x, m, b, p, a, d)))
    rule235 = ReplacementRule(pattern235, lambda e, c, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule235)

    pattern236 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(p_), Not(And(ZeroQ(Add(m_, Integer(-1))), Greater(p_, Integer(1))))), (e, c, x, m, p, a, d)))
    rule236 = ReplacementRule(pattern236, lambda e, c, x, m, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule236)

    pattern237 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NiceSqrtQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, c, x, b, a, d)))
    rule237 = ReplacementRule(pattern237, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))))))), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))), Mul(c, x)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))))))), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))), Mul(c, x)), Integer(-1))), x))))))
    rubi.add(rule237)

    pattern238 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), NiceSqrtQ(Mul(Mul(Integer(-1), a_), c_))), (e, c, x, a, d)))
    rule238 = ReplacementRule(pattern238, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Add(Mul(Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(c, Mul(d, Pow(Mul(Integer(2), Integer(q)), Integer(-1))))), Int(Mul(Integer(1), Pow(Add(Mul(Integer(-1), Integer(q)), Mul(c, x)), Integer(-1))), x)), Mul(Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(c, Mul(d, Pow(Mul(Integer(2), Integer(q)), Integer(-1)))))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(c, x)), Integer(-1))), x)))))
    rubi.add(rule238)

    pattern239 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Not(NiceSqrtQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))))), (e, c, x, b, a, d)))
    rule239 = ReplacementRule(pattern239, lambda e, c, x, b, a, d : Add(Mul(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(e, Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Add(b, Mul(Integer(2), c, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x))))
    rubi.add(rule239)

    pattern240 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(NiceSqrtQ(Mul(Mul(Integer(-1), a_), c_)))), (e, c, x, a, d)))
    rule240 = ReplacementRule(pattern240, lambda e, c, x, a, d : Add(Mul(d, Int(Mul(Integer(1), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(e, Int(Mul(x, Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1))), x))))
    rubi.add(rule240)

    pattern241 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, b, a, d)))
    rule241 = ReplacementRule(pattern241, lambda e, c, x, b, a, d : Mul(Integer(2), e, Subst(Int(Mul(Pow(x, Integer(2)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(x, Integer(2)))), Mul(c, Pow(x, Integer(4)))), Integer(-1))), x), x, Sqrt(Add(d, Mul(e, x))))))
    rubi.add(rule241)

    pattern242 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule242 = ReplacementRule(pattern242, lambda e, c, x, a, d : Mul(Integer(2), e, Subst(Int(Mul(Pow(x, Integer(2)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))), Mul(Integer(-1), Mul(Integer(2), c, d, Pow(x, Integer(2)))), Mul(c, Pow(x, Integer(4)))), Integer(-1))), x), x, Sqrt(Add(d, Mul(e, x))))))
    rubi.add(rule242)

    pattern243 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), IntegerQ(m_), Greater(m_, Integer(1)), Or(NonzeroQ(d_), Greater(m_, Integer(2)))), (e, c, x, m, b, a, d)))
    rule243 = ReplacementRule(pattern243, lambda e, c, x, m, b, a, d : Int(PolynomialDivide(Pow(Add(d, Mul(e, x)), m), Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), x), x))
    rubi.add(rule243)

    pattern244 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(m_), Greater(m_, Integer(1)), Or(NonzeroQ(d_), Greater(m_, Integer(2)))), (e, c, x, m, a, d)))
    rule244 = ReplacementRule(pattern244, lambda e, c, x, m, a, d : Int(PolynomialDivide(Pow(Add(d, Mul(e, x)), m), Add(a, Mul(c, Pow(x, Integer(2)))), x), x))
    rubi.add(rule244)

    pattern245 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_), Greater(m_, Integer(1))), (e, c, x, m, b, a, d)))
    rule245 = ReplacementRule(pattern245, lambda e, c, x, m, b, a, d : Add(Mul(e, Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Mul(c, Add(m, Integer(-1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Mul(Simp(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(a, Pow(e, Integer(2)))), Mul(e, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), x)), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule245)

    pattern246 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), Greater(m_, Integer(1))), (e, c, x, m, a, d)))
    rule246 = ReplacementRule(pattern246, lambda e, c, x, m, a, d : Add(Mul(e, Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Mul(c, Add(m, Integer(-1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Mul(Simp(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(a, Pow(e, Integer(2)))), Mul(Integer(2), c, d, e, x)), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule246)

    pattern247 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, b, a, d)))
    rule247 = ReplacementRule(pattern247, lambda e, c, x, b, a, d : Add(Mul(Mul(Pow(e, Integer(2)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Integer(1), Pow(Add(d, Mul(e, x)), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(c, e, x))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x))))
    rubi.add(rule247)

    pattern248 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule248 = ReplacementRule(pattern248, lambda e, c, x, a, d : Add(Mul(Mul(Pow(e, Integer(2)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Integer(1), Pow(Add(d, Mul(e, x)), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(c, e, x))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1))), x))))
    rubi.add(rule248)

    pattern249 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, b, a, d)))
    rule249 = ReplacementRule(pattern249, lambda e, c, x, b, a, d : Mul(Integer(2), e, Subst(Int(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(x, Integer(2)))), Mul(c, Pow(x, Integer(4)))), Integer(-1))), x), x, Sqrt(Add(d, Mul(e, x))))))
    rubi.add(rule249)

    pattern250 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule250 = ReplacementRule(pattern250, lambda e, c, x, a, d : Mul(Integer(2), e, Subst(Int(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))), Mul(Integer(-1), Mul(Integer(2), c, d, Pow(x, Integer(2)))), Mul(c, Pow(x, Integer(4)))), Integer(-1))), x), x, Sqrt(Add(d, Mul(e, x))))))
    rubi.add(rule250)

    pattern251 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_), Less(m_, Integer(-1))), (e, c, x, m, b, a, d)))
    rule251 = ReplacementRule(pattern251, lambda e, c, x, m, b, a, d : Add(Mul(e, Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Simp(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(c, e, x))), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule251)

    pattern252 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), Less(m_, Integer(-1))), (e, c, x, m, a, d)))
    rule252 = ReplacementRule(pattern252, lambda e, c, x, m, a, d : Add(Mul(e, Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(c, Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Add(d, Mul(Integer(-1), Mul(e, x))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule252)

    pattern253 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Not(IntegerQ(m_))), (e, c, x, m, b, a, d)))
    rule253 = ReplacementRule(pattern253, lambda e, c, x, m, b, a, d : Int(ExpandIntegrand(Pow(Add(d, Mul(e, x)), m), Mul(Integer(1), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x), x))
    rubi.add(rule253)

    pattern254 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(m_))), (e, c, x, m, a, d)))
    rule254 = ReplacementRule(pattern254, lambda e, c, x, m, a, d : Int(ExpandIntegrand(Pow(Add(d, Mul(e, x)), m), Mul(Integer(1), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1))), x), x))
    rubi.add(rule254)

    pattern255 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-3), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, b, a, d)))
    rule255 = ReplacementRule(pattern255, lambda e, c, x, b, a, d : Mul(Integer(-2), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e)), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), x)), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1)))))
    rubi.add(rule255)

    pattern256 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-3), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule256 = ReplacementRule(pattern256, lambda e, c, x, a, d : Mul(Add(Mul(Mul(Integer(-1), a), e), Mul(c, d, x)), Pow(Mul(a, c, Sqrt(Add(a, Mul(c, Pow(x, Integer(2)))))), Integer(-1))))
    rubi.add(rule256)

    pattern257 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(p_), Less(p_, Integer(-1)), Unequal(p_, Mul(Integer(-3), Pow(Integer(2), Integer(-1))))), (e, c, x, b, p, a, d)))
    rule257 = ReplacementRule(pattern257, lambda e, c, x, b, p, a, d : Add(Mul(Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e)), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), x)), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), p), Integer(3)), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), x)))))
    rubi.add(rule257)

    pattern258 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Less(p_, Integer(-1)), Unequal(p_, Mul(Integer(-3), Pow(Integer(2), Integer(-1))))), (e, c, x, p, a, d)))
    rule258 = ReplacementRule(pattern258, lambda e, c, x, p, a, d : Add(Mul(Mul(Add(Mul(a, e), Mul(Integer(-1), Mul(c, d, x))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), Mul(d, Mul(Add(Mul(Integer(2), p), Integer(3)), Pow(Mul(Integer(2), a, Add(p, Integer(1))), Integer(-1))), Int(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), x))))
    rubi.add(rule258)

    pattern259 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Not(And(RationalQ(p_), LessEqual(p_, Integer(-1))))), (e, c, x, b, p, a, d)))
    rule259 = ReplacementRule(pattern259, lambda e, c, x, b, p, a, d : Add(Mul(e, Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), c), Integer(-1))), Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), x))))
    rubi.add(rule259)

    pattern260 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(And(RationalQ(p_), LessEqual(p_, Integer(-1))))), (e, c, x, p, a, d)))
    rule260 = ReplacementRule(pattern260, lambda e, c, x, p, a, d : Add(Mul(e, Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Add(p, Integer(1))), Integer(-1)))), Mul(d, Int(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), x))))
    rubi.add(rule260)

    pattern261 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, d_), Mul(a_, e_))), ZeroQ(Add(Mul(c_, d_), Mul(b_, e_))), PositiveIntegerQ(Add(m_, Mul(Integer(-1), p_), Integer(1))), Not(IntegerQ(p_))), (e, c, x, m, b, p, a, d)))
    rule261 = ReplacementRule(pattern261, lambda e, c, x, m, b, p, a, d : Mul(Pow(Add(d, Mul(e, x)), FracPart(p)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Pow(Add(Mul(a, d), Mul(c, e, Pow(x, Integer(3)))), FracPart(p)), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Mul(Integer(-1), p))), Pow(Add(Mul(a, d), Mul(c, e, Pow(x, Integer(3)))), p)), x)))
    rubi.add(rule261)

    pattern262 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_), Equal(Pow(m_, Integer(2)), Mul(Integer(1), Pow(Integer(4), Integer(-1)))), NegativeQ(c_), RationalQ(b_)), (e, c, x, m, b, d)))
    rule262 = ReplacementRule(pattern262, lambda e, c, x, m, b, d : Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Mul(Sqrt(Mul(b, x)), Sqrt(Add(Integer(1), Mul(Mul(c, Pow(b, Integer(-1))), x)))), Integer(-1))), x))
    rubi.add(rule262)

    pattern263 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_), Equal(Pow(m_, Integer(2)), Mul(Integer(1), Pow(Integer(4), Integer(-1))))), (e, c, x, m, b, d)))
    rule263 = ReplacementRule(pattern263, lambda e, c, x, m, b, d : Mul(Sqrt(x), Mul(Sqrt(Add(b, Mul(c, x))), Pow(Sqrt(Add(Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Mul(Sqrt(x), Sqrt(Add(b, Mul(c, x)))), Integer(-1))), x)))
    rubi.add(rule263)

    pattern264 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Pow(m_, Integer(2)), Mul(Integer(-1), Mul(Integer(1), Pow(Integer(4), Integer(-1))))))), (c, x, m, b, a)))
    rule264 = ReplacementRule(pattern264, lambda c, x, m, b, a : Mul(Integer(2), Subst(Int(Mul(Pow(x, Add(Mul(Integer(2), m), Integer(1))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x), x, Sqrt(x))))
    rubi.add(rule264)

    pattern265 = Pattern(Int(Mul(Pow(Mul(e_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Pow(m_, Integer(2)), Mul(Integer(-1), Mul(Integer(1), Pow(Integer(4), Integer(-1))))))), (e, c, x, m, b, a)))
    rule265 = ReplacementRule(pattern265, lambda e, c, x, m, b, a : Mul(Mul(Pow(Mul(e, x), m), Pow(Pow(x, m), Integer(-1))), Int(Mul(Pow(x, m), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), x)))
    rubi.add(rule265)

    pattern266 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(Pow(m_, Integer(2)), Mul(Integer(-1), Mul(Integer(1), Pow(Integer(4), Integer(-1))))))), (e, c, x, m, b, a, d)))
    rule266 = ReplacementRule(pattern266, lambda e, c, x, m, b, a, d : Mul(Integer(2), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)), Pow(Add(d, Mul(e, x)), m), Mul(Sqrt(Mul(Mul(Integer(-1), c), Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1))))), Pow(Mul(c, Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Pow(Mul(Integer(2), c, Mul(Add(d, Mul(e, x)), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(e, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))))), Integer(-1)))), m)), Integer(-1))), Subst(Int(Mul(Pow(Add(Integer(1), Mul(Integer(2), e, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)), Mul(Pow(x, Integer(2)), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(e, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))))), Integer(-1))))), m), Pow(Sqrt(Add(Integer(1), Mul(Integer(-1), Pow(x, Integer(2))))), Integer(-1))), x), x, Sqrt(Mul(Add(b, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)), Mul(Integer(2), c, x)), Pow(Mul(Integer(2), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))), Integer(-1)))))))
    rubi.add(rule266)

    pattern267 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Add(Pow(m_, Integer(2)), Mul(Integer(-1), Mul(Integer(1), Pow(Integer(4), Integer(-1))))))), (e, c, x, m, a, d)))
    rule267 = ReplacementRule(pattern267, lambda e, c, x, m, a, d : Mul(Integer(2), a, Rt(Mul(Mul(Integer(-1), c), Pow(a, Integer(-1))), Integer(2)), Pow(Add(d, Mul(e, x)), m), Mul(Sqrt(Add(Integer(1), Mul(c, Mul(Pow(x, Integer(2)), Pow(a, Integer(-1)))))), Pow(Mul(c, Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))), Pow(Mul(c, Mul(Add(d, Mul(e, x)), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, e, Rt(Mul(Mul(Integer(-1), c), Pow(a, Integer(-1))), Integer(2))))), Integer(-1)))), m)), Integer(-1))), Subst(Int(Mul(Pow(Add(Integer(1), Mul(Integer(2), a, e, Rt(Mul(Mul(Integer(-1), c), Pow(a, Integer(-1))), Integer(2)), Mul(Pow(x, Integer(2)), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, e, Rt(Mul(Mul(Integer(-1), c), Pow(a, Integer(-1))), Integer(2))))), Integer(-1))))), m), Pow(Sqrt(Add(Integer(1), Mul(Integer(-1), Pow(x, Integer(2))))), Integer(-1))), x), x, Sqrt(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Rt(Mul(Mul(Integer(-1), c), Pow(a, Integer(-1))), Integer(2)), x))), Pow(Integer(2), Integer(-1)))))))
    rubi.add(rule267)

    pattern268 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_, p_), Equal(Add(m_, Mul(Integer(2), p_), Integer(2)), Integer(0)), Greater(p_, Integer(0))), (e, c, x, m, b, p, a, d)))
    rule268 = ReplacementRule(pattern268, lambda e, c, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), Add(m, Integer(1)))), Add(Mul(d, b), Mul(Integer(-1), Mul(Integer(2), a, e)), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Integer(2), Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(p, Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(Mul(Integer(2), Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule268)

    pattern269 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Equal(Add(m_, Mul(Integer(2), p_), Integer(2)), Integer(0)), Greater(p_, Integer(0))), (e, c, x, m, p, a, d)))
    rule269 = ReplacementRule(pattern269, lambda e, c, x, m, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), Add(m, Integer(1)))), Add(Mul(Integer(-2), a, e), Mul(Mul(Integer(2), c, d), x)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Integer(2), Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Integer(-1), Mul(Integer(4), a, c, Mul(p, Pow(Mul(Integer(2), Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule269)

    pattern270 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_, p_), Equal(Add(m_, Mul(Integer(2), p_), Integer(2)), Integer(0)), Less(p_, Integer(-1))), (e, c, x, m, b, p, a, d)))
    rule270 = ReplacementRule(pattern270, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Add(Mul(d, b), Mul(Integer(-1), Mul(Integer(2), a, e)), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Integer(2), Add(Mul(Integer(2), p), Integer(3)), Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule270)

    pattern271 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Equal(Add(m_, Mul(Integer(2), p_), Integer(2)), Integer(0)), Less(p_, Integer(-1))), (e, c, x, m, p, a, d)))
    rule271 = ReplacementRule(pattern271, lambda e, c, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Add(Mul(a, e), Mul(Integer(-1), Mul(c, d, x))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Add(Mul(Integer(2), p), Integer(3)), Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule271)

    pattern272 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_))))), (e, c, x, b, a, d)))
    rule272 = ReplacementRule(pattern272, lambda e, c, x, b, a, d : Mul(Integer(-2), Subst(Int(Mul(Integer(1), Pow(Add(Mul(Integer(4), c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(Integer(4), b, d, e)), Mul(Integer(4), a, Pow(e, Integer(2))), Mul(Integer(-1), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Add(Mul(Integer(2), a, e), Mul(Integer(-1), Mul(b, d)), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), x))), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule272)

    pattern273 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(True, (e, c, x, a, d)))
    rule273 = ReplacementRule(pattern273, lambda e, c, x, a, d : Mul(Integer(-1), Subst(Int(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))), Mul(Integer(-1), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Add(Mul(a, e), Mul(Integer(-1), Mul(c, d, x))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule273)

    pattern274 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Not(IntegerQ(p_)), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), (e, c, x, m, b, p, a, d)))
    rule274 = ReplacementRule(pattern274, lambda e, c, x, m, b, p, a, d : Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))), Mul(Integer(2), c, x))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Add(m, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(e, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Pow(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(e, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Add(b, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)), Mul(Integer(2), c, x)), Pow(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(e, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))))), Add(b, Mul(Integer(-1), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))), Mul(Integer(2), c, x))), Integer(-1)))), p)), Integer(-1))), Hypergeometric2F1(Add(m, Integer(1)), Mul(Integer(-1), p), Add(m, Integer(2)), Mul(Integer(-4), c, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)), Mul(Add(d, Mul(e, x)), Pow(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(e, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))))), Add(b, Mul(Integer(-1), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))), Mul(Integer(2), c, x))), Integer(-1)))))))
    rubi.add(rule274)

    pattern275 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), (e, c, x, m, p, a, d)))
    rule275 = ReplacementRule(pattern275, lambda e, c, x, m, p, a, d : Mul(Add(Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), Mul(Integer(-1), Mul(c, x))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, d), Mul(e, Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Pow(Mul(Add(Mul(c, d), Mul(e, Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Mul(Add(Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), Mul(c, x)), Pow(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Rt(Mul(Mul(Integer(-1), a), c), Integer(2))))), Add(Mul(Integer(-1), Rt(Mul(Mul(Integer(-1), a), c), Integer(2))), Mul(c, x))), Integer(-1)))), p)), Integer(-1))), Hypergeometric2F1(Add(m, Integer(1)), Mul(Integer(-1), p), Add(m, Integer(2)), Mul(Integer(2), c, Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), Mul(Add(d, Mul(e, x)), Pow(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Rt(Mul(Mul(Integer(-1), a), c), Integer(2))))), Add(Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), Mul(Integer(-1), Mul(c, x)))), Integer(-1)))))))
    rubi.add(rule275)

    pattern276 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), RationalQ(p_), Less(p_, Integer(-1))), (e, c, x, m, b, p, a, d)))
    rule276 = ReplacementRule(pattern276, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), m), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(m, Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule276)

    pattern277 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), RationalQ(p_), Less(p_, Integer(-1))), (e, c, x, m, p, a, d)))
    rule277 = ReplacementRule(pattern277, lambda e, c, x, m, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), m)), Mul(Integer(2), c, x), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(4), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(m, Mul(Mul(Integer(2), c, d), Pow(Mul(Integer(4), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule277)

    pattern278 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, c, x, m, b, p, a, d)))
    rule278 = ReplacementRule(pattern278, lambda e, c, x, m, b, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule278)

    pattern279 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, c, x, m, p, a, d)))
    rule279 = ReplacementRule(pattern279, lambda e, c, x, m, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(c, Mul(d, Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule279)

    pattern280 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(p_), Greater(p_, Integer(0)), Or(IntegerQ(p_), And(RationalQ(m_), Less(m_, Integer(-1)))), NonzeroQ(Add(m_, Integer(1))), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(1)))), IntQuadraticQ(a_, b_, c_, d_, e_, m_, p_, x_)), (e, c, x, m, b, p, a, d)))
    rule280 = ReplacementRule(pattern280, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(p, Pow(Mul(e, Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule280)

    pattern281 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Greater(p_, Integer(0)), Or(IntegerQ(p_), And(RationalQ(m_), Less(m_, Integer(-1)))), NonzeroQ(Add(m_, Integer(1))), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(1)))), IntQuadraticQ(a_, Integer(0), c_, d_, e_, m_, p_, x_)), (e, c, x, m, p, a, d)))
    rule281 = ReplacementRule(pattern281, lambda e, c, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Integer(2), c, Mul(p, Pow(Mul(e, Add(m, Integer(1))), Integer(-1))), Int(Mul(x, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule281)

    pattern282 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), Or(Not(RationalQ(m_)), Less(m_, Integer(1))), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_)))), IntQuadraticQ(a_, b_, c_, d_, e_, m_, p_, x_)), (e, c, x, m, b, p, a, d)))
    rule282 = ReplacementRule(pattern282, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(p, Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Simp(Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e)), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), x)), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule282)

    pattern283 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), Or(Not(RationalQ(m_)), Less(m_, Integer(1))), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_)))), IntQuadraticQ(a_, Integer(0), c_, d_, e_, m_, p_, x_)), (e, c, x, m, p, a, d)))
    rule283 = ReplacementRule(pattern283, lambda e, c, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(2), Mul(p, Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Simp(Add(Mul(a, e), Mul(Integer(-1), Mul(c, d, x))), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule283)

    pattern284 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(0)), Or(Less(m_, Integer(1)), And(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(3))), Unequal(m_, Integer(2)))), IntQuadraticQ(a_, b_, c_, d_, e_, m_, p_, x_)), (e, c, x, m, b, p, a, d)))
    rule284 = ReplacementRule(pattern284, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), m), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Add(Mul(b, e, m), Mul(Integer(2), c, d, Add(Mul(Integer(2), p), Integer(3))), Mul(Integer(2), c, e, Add(m, Mul(Integer(2), p), Integer(3)), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule284)

    pattern285 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(0)), Or(Less(m_, Integer(1)), And(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(3))), Unequal(m_, Integer(2)))), IntQuadraticQ(a_, Integer(0), c_, d_, e_, m_, p_, x_)), (e, c, x, m, p, a, d)))
    rule285 = ReplacementRule(pattern285, lambda e, c, x, m, p, a, d : Add(Mul(Mul(Integer(-1), x), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Add(Mul(d, Add(Mul(Integer(2), p), Integer(3))), Mul(e, Add(m, Mul(Integer(2), p), Integer(3)), x)), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule285)

    pattern286 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1)), IntQuadraticQ(a_, b_, c_, d_, e_, m_, p_, x_)), (e, c, x, m, b, p, a, d)))
    rule286 = ReplacementRule(pattern286, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Add(Mul(d, b), Mul(Integer(-1), Mul(Integer(2), a, e)), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Simp(Add(Mul(e, Add(Mul(Integer(2), a, e, Add(m, Integer(-1))), Mul(b, d, Add(Mul(Integer(2), p), Mul(Integer(-1), m), Integer(4))))), Mul(Integer(-1), Mul(Integer(2), c, Pow(d, Integer(2)), Add(Mul(Integer(2), p), Integer(3)))), Mul(e, Add(Mul(b, e), Mul(Integer(-1), Mul(Integer(2), d, c))), Add(m, Mul(Integer(2), p), Integer(2)), x)), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule286)

    pattern287 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1)), IntQuadraticQ(a_, Integer(0), c_, d_, e_, m_, p_, x_)), (e, c, x, m, p, a, d)))
    rule287 = ReplacementRule(pattern287, lambda e, c, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Add(Mul(a, e), Mul(Integer(-1), Mul(c, d, x))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(p, Integer(1)), Mul(Integer(-2), a, c)), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Simp(Add(Mul(a, Pow(e, Integer(2)), Add(m, Integer(-1))), Mul(Integer(-1), Mul(c, Pow(d, Integer(2)), Add(Mul(Integer(2), p), Integer(3)))), Mul(Integer(-1), Mul(d, c, e, Add(m, Mul(Integer(2), p), Integer(2)), x))), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule287)

    pattern288 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(p_), Less(p_, Integer(-1)), IntQuadraticQ(a_, b_, c_, d_, e_, m_, p_, x_)), (e, c, x, m, b, p, a, d)))
    rule288 = ReplacementRule(pattern288, lambda e, c, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(Mul(b, c, d), Mul(Integer(-1), Mul(Pow(b, Integer(2)), e)), Mul(Integer(2), a, c, e), Mul(c, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Simp(Add(Mul(b, c, d, e, Add(Mul(Integer(2), p), Mul(Integer(-1), m), Integer(2))), Mul(Pow(b, Integer(2)), Pow(e, Integer(2)), Add(m, p, Integer(2))), Mul(Integer(-1), Mul(Integer(2), Pow(c, Integer(2)), Pow(d, Integer(2)), Add(Mul(Integer(2), p), Integer(3)))), Mul(Integer(-1), Mul(Integer(2), a, c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3)))), Mul(Integer(-1), Mul(c, e, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Add(m, Mul(Integer(2), p), Integer(4)), x))), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule288)

    pattern289 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Less(p_, Integer(-1)), IntQuadraticQ(a_, Integer(0), c_, d_, e_, m_, p_, x_)), (e, c, x, m, p, a, d)))
    rule289 = ReplacementRule(pattern289, lambda e, c, x, m, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), Add(m, Integer(1)))), Add(Mul(a, e), Mul(c, d, x)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, Add(p, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, Add(p, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Simp(Add(Mul(c, Pow(d, Integer(2)), Add(Mul(Integer(2), p), Integer(3))), Mul(a, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3))), Mul(c, e, d, Add(m, Mul(Integer(2), p), Integer(4)), x)), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule289)

    pattern290 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), If(RationalQ(m_), Greater(m_, Integer(1)), SumSimplerQ(m_, Integer(-2))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), IntQuadraticQ(a_, b_, c_, d_, e_, m_, p_, x_)), (e, c, x, m, b, p, a, d)))
    rule290 = ReplacementRule(pattern290, lambda e, c, x, m, b, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Simp(Add(Mul(c, Pow(d, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1))), Mul(Integer(-1), Mul(e, Add(Mul(a, e, Add(m, Integer(-1))), Mul(b, d, Add(p, Integer(1)))))), Mul(e, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Add(m, p), x)), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule290)

    pattern291 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), If(RationalQ(m_), Greater(m_, Integer(1)), SumSimplerQ(m_, Integer(-2))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(1))), IntQuadraticQ(a_, Integer(0), c_, d_, e_, m_, p_, x_)), (e, c, x, m, p, a, d)))
    rule291 = ReplacementRule(pattern291, lambda e, c, x, m, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Simp(Add(Mul(c, Pow(d, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1))), Mul(Integer(-1), Mul(a, Pow(e, Integer(2)), Add(m, Integer(-1)))), Mul(Integer(2), c, d, e, Add(m, p), x)), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule291)

    pattern292 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Or(And(RationalQ(m_), Less(m_, Integer(-1)), IntQuadraticQ(a_, b_, c_, d_, e_, m_, p_, x_)), And(SumSimplerQ(m_, Integer(1)), IntegerQ(p_), NonzeroQ(Add(m_, Integer(1)))), And(NegativeIntegerQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(3)))), NonzeroQ(Add(m_, Integer(1)))))), (e, c, x, m, b, p, a, d)))
    rule292 = ReplacementRule(pattern292, lambda e, c, x, m, b, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Simp(Add(Mul(c, d, Add(m, Integer(1))), Mul(Integer(-1), Mul(b, e, Add(m, p, Integer(2)))), Mul(Integer(-1), Mul(c, e, Add(m, Mul(Integer(2), p), Integer(3)), x))), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule292)

    pattern293 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Or(And(RationalQ(m_), Less(m_, Integer(-1)), IntQuadraticQ(a_, Integer(0), c_, d_, e_, m_, p_, x_)), And(SumSimplerQ(m_, Integer(1)), IntegerQ(p_), NonzeroQ(Add(m_, Integer(1)))), And(NegativeIntegerQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(3)))), NonzeroQ(Add(m_, Integer(1)))))), (e, c, x, m, p, a, d)))
    rule293 = ReplacementRule(pattern293, lambda e, c, x, m, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(c, Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Simp(Add(Mul(d, Add(m, Integer(1))), Mul(Integer(-1), Mul(e, Add(m, Mul(Integer(2), p), Integer(3)), x))), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule293)

    pattern294 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, c_, d_, e_)), Mul(Pow(b_, Integer(2)), Pow(e_, Integer(2))), Mul(Integer(-1), Mul(Integer(3), a_, c_, Pow(e_, Integer(2)))))), PosQ(Mul(c_, Pow(e_, Integer(2)), Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))))), (e, c, x, b, a, d)))
    rule294 = ReplacementRule(pattern294, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Integer(3), c, Pow(e, Integer(2)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(3)))), Add(Mul(Mul(Integer(-1), Sqrt(Integer(3))), c, e, Mul(ArcTan(Add(Mul(Integer(1), Pow(Sqrt(Integer(3)), Integer(-1))), Mul(Integer(2), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(c, e, x))), Pow(Mul(Sqrt(Integer(3)), Integer(q), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1)))))), Pow(Pow(Integer(q), Integer(2)), Integer(-1)))), Mul(Integer(-1), Mul(Integer(3), c, e, Mul(Log(Add(d, Mul(e, x))), Pow(Mul(Integer(2), Pow(Integer(q), Integer(2))), Integer(-1))))), Mul(Integer(3), c, e, Mul(Log(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(c, e, x)), Mul(Integer(-1), Mul(Integer(q), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))))), Pow(Mul(Integer(2), Pow(Integer(q), Integer(2))), Integer(-1)))))))
    rubi.add(rule294)

    pattern295 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(3)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(Integer(3), a_, Pow(e_, Integer(2))))))), (e, c, x, a, d)))
    rule295 = ReplacementRule(pattern295, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Integer(6), Pow(c, Integer(2)), Mul(Pow(e, Integer(2)), Pow(Pow(d, Integer(2)), Integer(-1)))), Integer(3)))), Add(Mul(Mul(Integer(-1), Sqrt(Integer(3))), c, e, Mul(ArcTan(Add(Mul(Integer(1), Pow(Sqrt(Integer(3)), Integer(-1))), Mul(Integer(2), c, Mul(Add(d, Mul(Integer(-1), Mul(e, x))), Pow(Mul(Sqrt(Integer(3)), d, Integer(q), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1)))))), Pow(Mul(Pow(d, Integer(2)), Pow(Integer(q), Integer(2))), Integer(-1)))), Mul(Integer(-1), Mul(Integer(3), c, e, Mul(Log(Add(d, Mul(e, x))), Pow(Mul(Integer(2), Pow(d, Integer(2)), Pow(Integer(q), Integer(2))), Integer(-1))))), Mul(Integer(3), c, e, Mul(Log(Add(Mul(c, d), Mul(Integer(-1), Mul(c, e, x)), Mul(Integer(-1), Mul(d, Integer(q), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))))), Pow(Mul(Integer(2), Pow(d, Integer(2)), Pow(Integer(q), Integer(2))), Integer(-1)))))))
    rubi.add(rule295)

    pattern296 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, c_, d_, e_)), Mul(Pow(b_, Integer(2)), Pow(e_, Integer(2))), Mul(Integer(-1), Mul(Integer(3), a_, c_, Pow(e_, Integer(2)))))), NegQ(Mul(c_, Pow(e_, Integer(2)), Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))))), (e, c, x, b, a, d)))
    rule296 = ReplacementRule(pattern296, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Integer(-3), c, Pow(e, Integer(2)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(3)))), Add(Mul(Mul(Integer(-1), Sqrt(Integer(3))), c, e, Mul(ArcTan(Add(Mul(Integer(1), Pow(Sqrt(Integer(3)), Integer(-1))), Mul(Integer(-1), Mul(Integer(2), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(c, e, x))), Pow(Mul(Sqrt(Integer(3)), Integer(q), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1))))))), Pow(Pow(Integer(q), Integer(2)), Integer(-1)))), Mul(Integer(-1), Mul(Integer(3), c, e, Mul(Log(Add(d, Mul(e, x))), Pow(Mul(Integer(2), Pow(Integer(q), Integer(2))), Integer(-1))))), Mul(Integer(3), c, e, Mul(Log(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(c, e, x)), Mul(Integer(q), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))))), Pow(Mul(Integer(2), Pow(Integer(q), Integer(2))), Integer(-1)))))))
    rubi.add(rule296)

    pattern297 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, c_, d_, e_)), Mul(Integer(-1), Mul(Integer(2), Pow(b_, Integer(2)), Pow(e_, Integer(2)))), Mul(Integer(9), a_, c_, Pow(e_, Integer(2)))))), (e, c, x, b, a, d)))
    rule297 = ReplacementRule(pattern297, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Pow(Add(b, Integer(q), Mul(Integer(2), c, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Mul(Pow(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, x)), Pow(Add(b, Integer(q), Mul(Integer(2), c, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, x)), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1))), x))))
    rubi.add(rule297)

    pattern298 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(4)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule298 = ReplacementRule(pattern298, lambda e, c, x, a, d : Add(Mul(d, Int(Mul(Integer(1), Pow(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(4), Integer(-1))))), Integer(-1))), x)), Mul(Integer(-1), Mul(e, Int(Mul(x, Pow(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(4), Integer(-1))))), Integer(-1))), x)))))
    rubi.add(rule298)

    pattern299 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-3), Integer(4)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule299 = ReplacementRule(pattern299, lambda e, c, x, a, d : Add(Mul(d, Int(Mul(Integer(1), Pow(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Mul(Integer(3), Pow(Integer(4), Integer(-1))))), Integer(-1))), x)), Mul(Integer(-1), Mul(e, Int(Mul(x, Pow(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Mul(Integer(3), Pow(Integer(4), Integer(-1))))), Integer(-1))), x)))))
    rubi.add(rule299)

    pattern300 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(PositiveQ(Add(Mul(Integer(4), a_), Mul(Integer(-1), Mul(Pow(b_, Integer(2)), Pow(c_, Integer(-1)))))), IntegerQ(Mul(Integer(4), p_))), (e, c, x, b, p, a, d)))
    rule300 = ReplacementRule(pattern300, lambda e, c, x, b, p, a, d : Mul(Mul(Integer(1), Pow(Pow(Mul(Integer(-4), Mul(c, Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1)))), p), Integer(-1))), Subst(Int(Mul(Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(Pow(x, Integer(2)), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1))))), x), p), Pow(Simp(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(e, x)), x), Integer(-1))), x), x, Add(b, Mul(Integer(2), c, x)))))
    rubi.add(rule300)

    pattern301 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(Not(PositiveQ(Add(Mul(Integer(4), a_), Mul(Integer(-1), Mul(Pow(b_, Integer(2)), Pow(c_, Integer(-1))))))), IntegerQ(Mul(Integer(4), p_))), (e, c, x, b, p, a, d)))
    rule301 = ReplacementRule(pattern301, lambda e, c, x, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Pow(Mul(Mul(Integer(-1), c), Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1)))), p), Integer(-1))), Int(Mul(Pow(Add(Mul(Mul(Integer(-1), a), Mul(c, Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1)))), Mul(Integer(-1), Mul(b, c, Mul(x, Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1))))), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Mul(Pow(x, Integer(2)), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1)))))), p), Pow(Add(d, Mul(e, x)), Integer(-1))), x)))
    rubi.add(rule301)

    pattern302 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), PositiveQ(a_), NegativeQ(c_)), (e, c, x, m, p, a, d)))
    rule302 = ReplacementRule(pattern302, lambda e, c, x, m, p, a, d : Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(Rt(a, Integer(2)), Mul(Rt(Mul(Integer(-1), c), Integer(2)), x)), p), Pow(Add(Rt(a, Integer(2)), Mul(Integer(-1), Mul(Rt(Mul(Integer(-1), c), Integer(2)), x))), p)), x))
    rubi.add(rule302)

    pattern303 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Not(IntegerQ(p_)), NegativeIntegerQ(m_)), (e, c, x, m, b, p, a, d)))
    rule303 = ReplacementRule(pattern303, lambda e, c, x, m, b, p, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Mul(Integer(-1), Pow(Mul(Integer(1), Pow(Add(d, Mul(e, x)), Integer(-1))), Mul(Integer(2), p))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Pow(Mul(e, Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, x)), Pow(Mul(Integer(2), c, Add(d, Mul(e, x))), Integer(-1)))), p), Pow(Mul(e, Mul(Add(b, Integer(q), Mul(Integer(2), c, x)), Pow(Mul(Integer(2), c, Add(d, Mul(e, x))), Integer(-1)))), p)), Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(-1), m), Mul(Integer(-1), Mul(Integer(2), Add(p, Integer(1)))))), Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(Add(d, Mul(Integer(-1), Mul(e, Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Mul(Integer(2), c), Integer(-1)))))), x))), x), p), Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(Add(d, Mul(Integer(-1), Mul(e, Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), c), Integer(-1)))))), x))), x), p)), x), x, Mul(Integer(1), Pow(Add(d, Mul(e, x)), Integer(-1)))))))
    rubi.add(rule303)

    pattern304 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), NegativeIntegerQ(m_)), (e, c, x, m, p, a, d)))
    rule304 = ReplacementRule(pattern304, lambda e, c, x, m, p, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Mul(Mul(Integer(-1), Pow(Mul(Integer(1), Pow(Add(d, Mul(e, x)), Integer(-1))), Mul(Integer(2), p))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Pow(Mul(Mul(Integer(-1), e), Mul(Add(Integer(q), Mul(Integer(-1), Mul(c, x))), Pow(Mul(c, Add(d, Mul(e, x))), Integer(-1)))), p), Pow(Mul(e, Mul(Add(Integer(q), Mul(c, x)), Pow(Mul(c, Add(d, Mul(e, x))), Integer(-1)))), p)), Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(-1), m), Mul(Integer(-1), Mul(Integer(2), Add(p, Integer(1)))))), Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(Add(d, Mul(e, Mul(Integer(q), Pow(c, Integer(-1))))), x))), x), p), Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(Add(d, Mul(Integer(-1), Mul(e, Mul(Integer(q), Pow(c, Integer(-1)))))), x))), x), p)), x), x, Mul(Integer(1), Pow(Add(d, Mul(e, x)), Integer(-1)))))))
    rubi.add(rule304)

    pattern305 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Not(IntegerQ(p_))), (e, c, x, m, b, p, a, d)))
    rule305 = ReplacementRule(pattern305, lambda e, c, x, m, b, p, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Pow(Add(Integer(1), Mul(Integer(-1), Mul(Add(d, Mul(e, x)), Pow(Add(d, Mul(Integer(-1), Mul(e, Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Mul(Integer(2), c), Integer(-1)))))), Integer(-1))))), p), Pow(Add(Integer(1), Mul(Integer(-1), Mul(Add(d, Mul(e, x)), Pow(Add(d, Mul(Integer(-1), Mul(e, Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), c), Integer(-1)))))), Integer(-1))))), p)), Integer(-1))), Subst(Int(Mul(Pow(x, m), Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(x, Pow(Add(d, Mul(Integer(-1), Mul(e, Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Mul(Integer(2), c), Integer(-1)))))), Integer(-1))))), x), p), Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(x, Pow(Add(d, Mul(Integer(-1), Mul(e, Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), c), Integer(-1)))))), Integer(-1))))), x), p)), x), x, Add(d, Mul(e, x))))))
    rubi.add(rule305)

    pattern306 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (e, c, x, m, p, a, d)))
    rule306 = ReplacementRule(pattern306, lambda e, c, x, m, p, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Pow(Add(Integer(1), Mul(Integer(-1), Mul(Add(d, Mul(e, x)), Pow(Add(d, Mul(e, Mul(Integer(q), Pow(c, Integer(-1))))), Integer(-1))))), p), Pow(Add(Integer(1), Mul(Integer(-1), Mul(Add(d, Mul(e, x)), Pow(Add(d, Mul(Integer(-1), Mul(e, Mul(Integer(q), Pow(c, Integer(-1)))))), Integer(-1))))), p)), Integer(-1))), Subst(Int(Mul(Pow(x, m), Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(x, Pow(Add(d, Mul(e, Mul(Integer(q), Pow(c, Integer(-1))))), Integer(-1))))), x), p), Pow(Simp(Add(Integer(1), Mul(Integer(-1), Mul(x, Pow(Add(d, Mul(Integer(-1), Mul(e, Mul(Integer(q), Pow(c, Integer(-1)))))), Integer(-1))))), x), p)), x), x, Add(d, Mul(e, x))))))
    rubi.add(rule306)

    pattern307 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), u_), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, c, x, m, u, b, p, a, d)))
    rule307 = ReplacementRule(pattern307, lambda e, c, x, m, u, b, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x, u)))
    rubi.add(rule307)

    pattern308 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, c, x, m, u, p, a, d)))
    rule308 = ReplacementRule(pattern308, lambda e, c, x, m, u, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x, u)))
    rubi.add(rule308)

    pattern309 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('n', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(IntegerQ(n_), Not(IntegerQ(Mul(Integer(2), p_)))), (e, n, c, x, p, a, d)))
    rule309 = ReplacementRule(pattern309, lambda e, n, c, x, p, a, d : Add(Mul(d, Int(Mul(Pow(x, n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(e, Int(Mul(Pow(x, Add(n, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule309)

    pattern310 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_))))), (e, f, c, g, x, m, b, a, d)))
    rule310 = ReplacementRule(pattern310, lambda e, f, c, g, x, m, b, a, d : Mul(Mul(Add(f, Mul(g, x)), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), Int(Pow(Add(d, Mul(e, x)), m), x)))
    rubi.add(rule310)

    pattern311 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, b, p, a, d)))
    rule311 = ReplacementRule(pattern311, lambda e, f, c, g, x, m, b, p, a, d : Mul(Mul(Integer(-1), f), g, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(b, Add(p, Integer(1)), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1)))))
    rubi.add(rule311)

    pattern312 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(0))), (e, f, c, g, x, m, b, p, a, d)))
    rule312 = ReplacementRule(pattern312, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(g, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(e, g, Mul(m, Pow(Mul(Integer(2), c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule312)

    pattern313 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), RationalQ(p_), Less(p_, Integer(-1)), Not(And(RationalQ(m_), Greater(m_, Integer(0))))), (e, f, c, g, x, m, b, p, a, d)))
    rule313 = ReplacementRule(pattern313, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), f), g, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(b, Add(p, Integer(1)), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1)))), Mul(e, f, g, Mul(Add(m, Mul(Integer(2), p), Integer(3)), Pow(Mul(b, Add(p, Integer(1)), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule313)

    pattern314 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), RationalQ(m_), Less(m_, Integer(-1)), NonzeroQ(Add(Mul(Integer(2), p_), Integer(1))), Or(Not(RationalQ(p_)), And(Greater(p_, Integer(0)), Or(Not(IntegerQ(m_)), GreaterEqual(m_, Add(Mul(Integer(-2), p_), Integer(-2))), Less(m_, Mul(Integer(-4), Add(p_, Integer(1)))))))), (e, f, c, g, x, m, b, p, a, d)))
    rule314 = ReplacementRule(pattern314, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(f, Mul(g, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(g, Mul(Add(Mul(Integer(2), p), Integer(1)), Pow(Mul(e, Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule314)

    pattern315 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), RationalQ(m_), Less(m_, Integer(-1)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), (e, f, c, g, x, m, b, p, a, d)))
    rule315 = ReplacementRule(pattern315, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Integer(2), f, g, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(b, Add(m, Integer(1)), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1)))), Mul(Integer(-1), Mul(g, Mul(Add(m, Mul(Integer(2), p), Integer(3)), Pow(Mul(Add(m, Integer(1)), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(f, Mul(g, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule315)

    pattern316 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), PositiveIntegerQ(m_), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(2))), Or(Not(RationalQ(p_)), Less(m_, Add(Mul(Integer(2), p_), Integer(2))))), (e, f, c, g, x, m, b, p, a, d)))
    rule316 = ReplacementRule(pattern316, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(g, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Integer(-1), Mul(b, m, Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Mul(Integer(2), c, f, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Add(f, Mul(g, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule316)

    pattern317 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), (e, f, c, g, x, m, b, p, a, d)))
    rule317 = ReplacementRule(pattern317, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(f, Mul(g, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Mul(Add(Mul(Integer(2), p), Integer(1)), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule317)

    pattern318 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), RationalQ(p_), Less(p_, Integer(0))), (f, e, c, g, x, b, p, a, d)))
    rule318 = ReplacementRule(pattern318, lambda f, e, c, g, x, b, p, a, d : Add(Mul(Mul(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(-1))), Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(-1))), Int(Mul(Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x)), Integer(-1)))), x)))))
    rubi.add(rule318)

    pattern319 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), Or(And(ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(2))), NonzeroQ(Add(m_, Integer(1)))), And(ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Integer(-1)))))), (e, f, c, g, x, m, b, p, a, d)))
    rule319 = ReplacementRule(pattern319, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Mul(g, Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule319)

    pattern320 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, b, p, a, d)))
    rule320 = ReplacementRule(pattern320, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Mul(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Add(b, Mul(Integer(2), c, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule320)

    pattern321 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(2))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), RationalQ(m_), Less(m_, Integer(-1))), (e, f, c, g, x, m, b, p, a, d)))
    rule321 = ReplacementRule(pattern321, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(e, Add(m, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(2), c, e, f, Add(m, Mul(Integer(2), p), Integer(2))), Mul(Integer(-1), Mul(g, Add(Mul(Integer(2), c, d, Add(Mul(Integer(2), p), Integer(1))), Mul(b, e, Add(m, Integer(1))))))), Pow(Mul(e, Add(m, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule321)

    pattern322 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_)))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(2))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3))), Not(And(RationalQ(m_), Less(m_, Integer(-1)))), Not(And(ZeroQ(Add(m_, Integer(-1))), SimplerQ(Add(f_, Mul(g_, x_)), Add(d_, Mul(e_, x_)))))), (e, f, c, g, x, m, b, p, a, d)))
    rule322 = ReplacementRule(pattern322, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(g, Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Integer(2), c, e, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(2), c, e, f, Add(m, Mul(Integer(2), p), Integer(2))), Mul(Integer(-1), Mul(g, Add(Mul(b, e, Add(m, Integer(1))), Mul(Integer(2), c, Add(d, Mul(Integer(2), d, p))))))), Pow(Mul(Integer(2), c, e, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule322)

    pattern323 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_))), (f, e, n, c, g, x, m, b, p, a, d)))
    rule323 = ReplacementRule(pattern323, lambda f, e, n, c, g, x, m, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(c, IntPart(p)), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule323)

    pattern324 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(p_)), (e, n, f, c, g, x, m, b, p, a, d)))
    rule324 = ReplacementRule(pattern324, lambda e, n, f, c, g, x, m, b, p, a, d : Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(f, Mul(g, x)), n), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x))
    rubi.add(rule324)

    pattern325 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Or(IntegerQ(p_), And(PositiveQ(a_), PositiveQ(d_), ZeroQ(Add(m_, p_))))), (e, n, f, c, g, x, m, p, a, d)))
    rule325 = ReplacementRule(pattern325, lambda e, n, f, c, g, x, m, p, a, d : Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(f, Mul(g, x)), n), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x))
    rubi.add(rule325)

    pattern326 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NegativeIntegerQ(m_), Not(IntegerQ(Mul(Integer(2), p_)))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule326 = ReplacementRule(pattern326, lambda e, n, f, c, g, x, m, b, p, a, d : Mul(Pow(d, m), Pow(e, m), Int(Mul(Pow(Add(Mul(a, e), Mul(c, d, x)), Mul(Integer(-1), m)), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(m, p))), x)))
    rubi.add(rule326)

    pattern327 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), NegativeIntegerQ(m_), Not(IntegerQ(Mul(Integer(2), p_)))), (e, n, f, c, g, x, m, p, a, d)))
    rule327 = ReplacementRule(pattern327, lambda e, n, f, c, g, x, m, p, a, d : Mul(Pow(d, m), Pow(e, m), Int(Mul(Pow(Add(Mul(a, e), Mul(c, d, x)), Mul(Integer(-1), m)), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(m, p))), x)))
    rubi.add(rule327)

    pattern328 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Add(Mul(m_, Add(Mul(g_, Add(Mul(c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Mul(c_, e_, f_))), Mul(e_, Add(p_, Integer(1)), Add(Mul(Integer(2), c_, f_), Mul(Integer(-1), Mul(b_, g_))))))), (e, f, c, g, x, m, b, p, a, d)))
    rule328 = ReplacementRule(pattern328, lambda e, f, c, g, x, m, b, p, a, d : Mul(g, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))))
    rubi.add(rule328)

    pattern329 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Add(Mul(m_, Add(Mul(d_, g_), Mul(e_, f_))), Mul(Integer(2), e_, f_, Add(p_, Integer(1)))))), (e, f, c, g, x, m, p, a, d)))
    rule329 = ReplacementRule(pattern329, lambda e, f, c, g, x, m, p, a, d : Mul(g, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))))
    rubi.add(rule329)

    pattern330 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(0))), (e, f, c, g, x, m, b, p, a, d)))
    rule330 = ReplacementRule(pattern330, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Add(Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)))), Mul(c, e, f)), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))), Mul(Integer(-1), Mul(e, Mul(Add(Mul(m, Add(Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)))), Mul(c, e, f))), Mul(e, Add(p, Integer(1)), Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))))), Pow(Mul(c, Add(p, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule330)

    pattern331 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(0))), (e, f, c, g, x, m, p, a, d)))
    rule331 = ReplacementRule(pattern331, lambda e, f, c, g, x, m, p, a, d : Add(Mul(Add(Mul(d, g), Mul(e, f)), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, d, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(e, Mul(Add(Mul(m, Add(Mul(d, g), Mul(e, f))), Mul(Integer(2), e, f, Add(p, Integer(1)))), Pow(Mul(Integer(2), c, d, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule331)

    pattern332 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), SumSimplerQ(p_, Integer(1)), SumSimplerQ(m_, Integer(-1)), NonzeroQ(Add(p_, Integer(1)))), (e, f, c, g, x, m, b, p, a, d)))
    rule332 = ReplacementRule(pattern332, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Add(Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)))), Mul(c, e, f)), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1)))), Mul(Integer(-1), Mul(e, Mul(Add(Mul(m, Add(Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)))), Mul(c, e, f))), Mul(e, Add(p, Integer(1)), Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))))), Pow(Mul(c, Add(p, Integer(1)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Simplify(Add(m, Integer(-1)))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Simplify(Add(p, Integer(1))))), x)))))
    rubi.add(rule332)

    pattern333 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), SumSimplerQ(p_, Integer(1)), SumSimplerQ(m_, Integer(-1)), NonzeroQ(Add(p_, Integer(1)))), (e, f, c, g, x, m, p, a, d)))
    rule333 = ReplacementRule(pattern333, lambda e, f, c, g, x, m, p, a, d : Add(Mul(Add(Mul(d, g), Mul(e, f)), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, d, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(e, Mul(Add(Mul(m, Add(Mul(d, g), Mul(e, f))), Mul(Integer(2), e, f, Add(p, Integer(1)))), Pow(Mul(Integer(2), c, d, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Simplify(Add(m, Integer(-1)))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Simplify(Add(p, Integer(1))))), x)))))
    rubi.add(rule333)

    pattern334 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Or(And(RationalQ(m_), Less(m_, Integer(-1)), Not(PositiveIntegerQ(Add(m_, p_, Integer(1))))), And(RationalQ(m_, p_), Less(m_, Integer(0)), Less(p_, Integer(-1))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), NonzeroQ(Add(m_, p_, Integer(1)))), (e, f, c, g, x, m, b, p, a, d)))
    rule334 = ReplacementRule(pattern334, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Add(Mul(d, g), Mul(Integer(-1), Mul(e, f))), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Add(m, p, Integer(1))), Integer(-1)))), Mul(Mul(Add(Mul(m, Add(Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)))), Mul(c, e, f))), Mul(e, Add(p, Integer(1)), Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))))), Pow(Mul(e, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Add(m, p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule334)

    pattern335 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Or(And(RationalQ(m_), Less(m_, Integer(-1)), Not(PositiveIntegerQ(Add(m_, p_, Integer(1))))), And(RationalQ(m_, p_), Less(m_, Integer(0)), Less(p_, Integer(-1))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), NonzeroQ(Add(m_, p_, Integer(1)))), (e, f, c, g, x, m, p, a, d)))
    rule335 = ReplacementRule(pattern335, lambda e, f, c, g, x, m, p, a, d : Add(Mul(Add(Mul(d, g), Mul(Integer(-1), Mul(e, f))), Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, d, Add(m, p, Integer(1))), Integer(-1)))), Mul(Mul(Add(Mul(m, Add(Mul(g, c, d), Mul(c, e, f))), Mul(Integer(2), e, c, f, Add(p, Integer(1)))), Pow(Mul(e, Mul(Integer(2), c, d), Add(m, p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule335)

    pattern336 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), (e, f, c, g, x, m, b, p, a, d)))
    rule336 = ReplacementRule(pattern336, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(g, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Mul(Add(Mul(m, Add(Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)))), Mul(c, e, f))), Mul(e, Add(p, Integer(1)), Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))))), Pow(Mul(c, e, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule336)

    pattern337 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(2)))), (e, f, c, g, x, m, p, a, d)))
    rule337 = ReplacementRule(pattern337, lambda e, f, c, g, x, m, p, a, d : Add(Mul(g, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Mul(Add(Mul(m, Add(Mul(d, g), Mul(e, f))), Mul(Integer(2), e, f, Add(p, Integer(1)))), Pow(Mul(e, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule337)

    pattern338 = Pattern(Int(Mul(Pow(x_, Integer(2)), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(f, x), FreeQ(g, x), cons(And(ZeroQ(Add(Mul(a_, Pow(g_, Integer(2))), Mul(Pow(f_, Integer(2)), c_))), RationalQ(p_), Less(p_, Integer(-2))), (f, c, x, g, p, a)))
    rule338 = ReplacementRule(pattern338, lambda f, c, x, g, p, a : Add(Mul(Pow(x, Integer(2)), Add(Mul(a, g), Mul(Integer(-1), Mul(c, f, x))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(x, Simp(Add(Mul(Integer(2), a, g), Mul(Integer(-1), Mul(c, f, Add(Mul(Integer(2), p), Integer(5)), x))), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule338)

    pattern339 = Pattern(Int(Mul(Pow(x_, Integer(2)), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a_, Pow(g_, Integer(2))), Mul(Pow(f_, Integer(2)), c_)))), (f, c, x, g, p, a)))
    rule339 = ReplacementRule(pattern339, lambda f, c, x, g, p, a : Add(Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Add(f, Mul(g, x)), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)), Mul(Integer(-1), Mul(Mul(Pow(f, Integer(2)), Pow(c, Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(f, Mul(Integer(-1), Mul(g, x))), Integer(-1))), x)))))
    rubi.add(rule339)

    pattern340 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), IntegersQ(m_, n_), RationalQ(p_), Or(Less(Integer(0), Mul(Integer(-1), m_), Add(p_, Integer(1))), Less(p_, Mul(Integer(-1), m_), Integer(0)))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule340 = ReplacementRule(pattern340, lambda e, n, f, c, g, x, m, b, p, a, d : Int(Mul(Pow(Add(f, Mul(g, x)), n), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(m, p)), Pow(Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(c, Mul(x, Pow(e, Integer(-1))))), m), Integer(-1)))), x))
    rubi.add(rule340)

    pattern341 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), IntegersQ(m_, n_), RationalQ(p_), Or(Less(Integer(0), Mul(Integer(-1), m_), Add(p_, Integer(1))), Less(p_, Mul(Integer(-1), m_), Integer(0)))), (e, n, f, c, g, x, m, p, a, d)))
    rule341 = ReplacementRule(pattern341, lambda e, n, f, c, g, x, m, p, a, d : Mul(Mul(Pow(d, Mul(Integer(2), m)), Pow(Pow(a, m), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), n), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(m, p)), Pow(Pow(Add(d, Mul(Integer(-1), Mul(e, x))), m), Integer(-1)))), x)))
    rubi.add(rule341)

    pattern342 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), PositiveIntegerQ(n_), NegativeIntegerQ(Add(n_, Mul(Integer(2), p_)))), (e, n, f, c, g, x, b, p, a, d)))
    rule342 = ReplacementRule(pattern342, lambda e, n, f, c, g, x, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(f, Mul(g, x)), n)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Mul(Add(Mul(a, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Mul(c, Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e))), x)), Pow(Mul(d, e, p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(d, e, p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(b, Add(Mul(a, e, g, n), Mul(Integer(-1), Mul(c, d, f, Add(Mul(Integer(2), p), Integer(1)))))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(d, g, n), Mul(Integer(-1), Mul(e, f, Add(Mul(Integer(2), p), Integer(1))))))), Mul(Integer(-1), Mul(c, g, Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e))), Add(n, Mul(Integer(2), p), Integer(1)), x))), x)), x)))))
    rubi.add(rule342)

    pattern343 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), PositiveIntegerQ(n_), NegativeIntegerQ(Add(n_, Mul(Integer(2), p_)))), (e, n, f, c, g, x, p, a, d)))
    rule343 = ReplacementRule(pattern343, lambda e, n, f, c, g, x, p, a, d : Add(Mul(Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Mul(Add(d, Mul(Integer(-1), Mul(e, x))), Pow(Mul(Integer(2), d, e, p), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), d, e, p), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(d, g, n), Mul(Integer(-1), Mul(e, f, Add(Mul(Integer(2), p), Integer(1)))), Mul(Integer(-1), Mul(e, g, Add(n, Mul(Integer(2), p), Integer(1)), x))), x)), x)))))
    rubi.add(rule343)

    pattern344 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), NegativeIntegerQ(n_), NegativeIntegerQ(Add(n_, Mul(Integer(2), p_)))), (e, n, f, c, g, x, b, p, a, d)))
    rule344 = ReplacementRule(pattern344, lambda e, n, f, c, g, x, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(f, Mul(g, x)), Add(n, Integer(1)))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Mul(Add(Mul(a, c, d, Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g)))), Mul(Integer(-1), Mul(a, e, Add(Mul(b, c, f), Mul(Integer(-1), Mul(Pow(b, Integer(2)), g)), Mul(Integer(2), a, c, g)))), Mul(c, Add(Mul(c, d, Add(Mul(b, f), Mul(Integer(-1), Mul(Integer(2), a, g)))), Mul(Integer(-1), Mul(a, e, Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g)))))), x)), Pow(Mul(d, e, p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(f, Integer(2))), Mul(Integer(-1), Mul(b, f, g)), Mul(a, Pow(g, Integer(2))))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(d, e, p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(f, Integer(2))), Mul(Integer(-1), Mul(b, f, g)), Mul(a, Pow(g, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(Pow(b, Integer(2)), g, Add(Mul(c, d, f, p), Mul(Integer(-1), Mul(a, e, g, Add(n, p, Integer(1)))))), Mul(b, c, Add(Mul(a, g, Add(Mul(d, g, Add(n, Integer(1))), Mul(e, f, Add(n, Mul(Integer(-1), Mul(Integer(2), p)))))), Mul(Integer(-1), Mul(c, d, Pow(f, Integer(2)), Add(Mul(Integer(2), p), Integer(1)))))), Mul(Integer(2), a, c, Add(Mul(a, e, Pow(g, Integer(2)), Add(n, Mul(Integer(2), p), Integer(1))), Mul(c, f, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g, n)), Mul(Integer(2), e, f, p))))), Mul(c, g, Add(Mul(Integer(2), a, c, Add(Mul(e, f), Mul(d, g))), Mul(Integer(-1), Mul(b, Add(Mul(c, d, f), Mul(a, e, g))))), Add(n, Mul(Integer(2), p), Integer(2)), x)), x)), x)))))
    rubi.add(rule344)

    pattern345 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), NegativeIntegerQ(n_), NegativeIntegerQ(Add(n_, Mul(Integer(2), p_)))), (e, n, f, c, g, x, p, a, d)))
    rule345 = ReplacementRule(pattern345, lambda e, n, f, c, g, x, p, a, d : Add(Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Mul(Add(Mul(c, d, f), Mul(Integer(-1), Mul(a, e, g)), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(d, g)), x))), Pow(Mul(Integer(2), d, e, p, Add(Mul(c, Pow(f, Integer(2))), Mul(a, Pow(g, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), d, e, p, Add(Mul(c, Pow(f, Integer(2))), Mul(a, Pow(g, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Add(Mul(a, e, Pow(g, Integer(2)), Add(n, Mul(Integer(2), p), Integer(1))), Mul(Integer(-1), Mul(c, f, Add(Mul(d, g, n), Mul(Integer(-1), Mul(e, Add(f, Mul(Integer(2), f, p)))))))), Mul(c, g, Add(Mul(e, f), Mul(d, g)), Add(n, Mul(Integer(2), p), Integer(2)), x)), x)), x))))
    rubi.add(rule345)

    pattern346 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), ZeroQ(Add(Mul(c_, e_, f_), Mul(c_, d_, g_), Mul(Integer(-1), Mul(b_, e_, g_)))), NonzeroQ(Add(m_, Mul(Integer(-1), n_), Integer(-1)))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule346 = ReplacementRule(pattern346, lambda e, n, f, c, g, x, m, b, p, a, d : Mul(Mul(Integer(-1), e), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1)))))
    rubi.add(rule346)

    pattern347 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), ZeroQ(Add(Mul(e_, f_), Mul(d_, g_))), NonzeroQ(Add(m_, Mul(Integer(-1), n_), Integer(-1)))), (e, n, f, c, g, x, m, p, a, d)))
    rule347 = ReplacementRule(pattern347, lambda e, n, f, c, g, x, m, p, a, d : Mul(Mul(Integer(-1), e), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1)))))
    rubi.add(rule347)

    pattern348 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), ZeroQ(Add(m_, Mul(Integer(-1), n_), Integer(-2)))), (e, f, n, c, g, x, m, b, p, a, d)))
    rule348 = ReplacementRule(pattern348, lambda e, f, n, c, g, x, m, b, p, a, d : Mul(Mul(Integer(-1), Pow(e, Integer(2))), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(n, Integer(1)), Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g)))), Integer(-1)))))
    rubi.add(rule348)

    pattern349 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), ZeroQ(Add(m_, Mul(Integer(-1), n_), Integer(-2)))), (e, f, n, c, g, x, m, p, a, d)))
    rule349 = ReplacementRule(pattern349, lambda e, f, n, c, g, x, m, p, a, d : Mul(Mul(Integer(-1), Pow(e, Integer(2))), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(n, Integer(1)), Add(Mul(e, f), Mul(d, g))), Integer(-1)))))
    rubi.add(rule349)

    pattern350 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_, p_), Greater(p_, Integer(0)), Less(n_, Integer(-1)), Not(And(IntegerQ(Add(n_, p_)), LessEqual(Add(n_, p_, Integer(2)), Integer(0))))), (e, f, n, c, g, x, m, b, p, a, d)))
    rule350 = ReplacementRule(pattern350, lambda e, f, n, c, g, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(g, Add(n, Integer(1))), Integer(-1)))), Mul(c, Mul(m, Pow(Mul(e, g, Add(n, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule350)

    pattern351 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_, p_), Greater(p_, Integer(0)), Less(n_, Integer(-1)), Not(And(IntegerQ(Add(n_, p_)), LessEqual(Add(n_, p_, Integer(2)), Integer(0))))), (e, f, n, c, g, x, m, p, a, d)))
    rule351 = ReplacementRule(pattern351, lambda e, f, n, c, g, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(g, Add(n, Integer(1))), Integer(-1)))), Mul(c, Mul(m, Pow(Mul(e, g, Add(n, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule351)

    pattern352 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_, p_), Greater(p_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(-1), n_), Integer(-1))), Not(PositiveIntegerQ(n_)), Not(And(IntegerQ(Add(n_, p_)), Less(Add(n_, p_, Integer(2)), Integer(0))))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule352 = ReplacementRule(pattern352, lambda e, n, f, c, g, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), m)), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(g, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1)))), Mul(Integer(-1), Mul(m, Mul(Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g))), Pow(Mul(Pow(e, Integer(2)), g, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule352)

    pattern353 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_, p_), Greater(p_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(-1), n_), Integer(-1))), Not(PositiveIntegerQ(n_)), Not(And(IntegerQ(Add(n_, p_)), Less(Add(n_, p_, Integer(2)), Integer(0))))), (e, n, f, c, g, x, m, p, a, d)))
    rule353 = ReplacementRule(pattern353, lambda e, n, f, c, g, x, m, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), m)), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(g, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1)))), Mul(Integer(-1), Mul(c, m, Mul(Add(Mul(e, f), Mul(d, g)), Pow(Mul(Pow(e, Integer(2)), g, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule353)

    pattern354 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_, p_), Less(p_, Integer(-1)), Greater(n_, Integer(0))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule354 = ReplacementRule(pattern354, lambda e, n, f, c, g, x, m, b, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(e, g, Mul(n, Pow(Mul(c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule354)

    pattern355 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_, p_), Less(p_, Integer(-1)), Greater(n_, Integer(0))), (e, n, f, c, g, x, m, p, a, d)))
    rule355 = ReplacementRule(pattern355, lambda e, n, f, c, g, x, m, p, a, d : Add(Mul(e, Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(e, g, Mul(n, Pow(Mul(c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule355)

    pattern356 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_, p_), Less(p_, Integer(-1))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule356 = ReplacementRule(pattern356, lambda e, n, f, c, g, x, m, b, p, a, d : Add(Mul(Pow(e, Integer(2)), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g)))), Integer(-1)))), Mul(Pow(e, Integer(2)), g, Mul(Add(m, Mul(Integer(-1), n), Integer(-2)), Pow(Mul(Add(p, Integer(1)), Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule356)

    pattern357 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_, p_), Less(p_, Integer(-1))), (e, n, f, c, g, x, m, p, a, d)))
    rule357 = ReplacementRule(pattern357, lambda e, n, f, c, g, x, m, p, a, d : Add(Mul(Pow(e, Integer(2)), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1)), Add(Mul(e, f), Mul(d, g))), Integer(-1)))), Mul(Pow(e, Integer(2)), g, Mul(Add(m, Mul(Integer(-1), n), Integer(-2)), Pow(Mul(c, Add(p, Integer(1)), Add(Mul(e, f), Mul(d, g))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x))))
    rubi.add(rule357)

    pattern358 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_), Greater(n_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(-1), n_), Integer(-1))), Or(IntegerQ(Mul(Integer(2), p_)), IntegerQ(n_))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule358 = ReplacementRule(pattern358, lambda e, n, f, c, g, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), e), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1)))), Mul(Integer(-1), Mul(n, Mul(Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g))), Pow(Mul(c, e, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule358)

    pattern359 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_), Greater(n_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(-1), n_), Integer(-1))), Or(IntegerQ(Mul(Integer(2), p_)), IntegerQ(n_))), (e, n, f, c, g, x, m, p, a, d)))
    rule359 = ReplacementRule(pattern359, lambda e, n, f, c, g, x, m, p, a, d : Add(Mul(Mul(Integer(-1), e), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1)))), Mul(Integer(-1), Mul(n, Mul(Add(Mul(e, f), Mul(d, g)), Pow(Mul(e, Add(m, Mul(Integer(-1), n), Integer(-1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule359)

    pattern360 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_), Less(n_, Integer(-1)), IntegerQ(Mul(Integer(2), p_))), (e, f, n, c, g, x, m, b, p, a, d)))
    rule360 = ReplacementRule(pattern360, lambda e, f, n, c, g, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(e, Integer(2))), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(n, Integer(1)), Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g)))), Integer(-1)))), Mul(Integer(-1), Mul(c, e, Mul(Add(m, Mul(Integer(-1), n), Integer(-2)), Pow(Mul(Add(n, Integer(1)), Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule360)

    pattern361 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_)), RationalQ(n_), Less(n_, Integer(-1)), IntegerQ(Mul(Integer(2), p_))), (e, f, n, c, g, x, m, p, a, d)))
    rule361 = ReplacementRule(pattern361, lambda e, f, n, c, g, x, m, p, a, d : Add(Mul(Mul(Integer(-1), Pow(e, Integer(2))), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(n, Integer(1)), Add(Mul(c, e, f), Mul(c, d, g))), Integer(-1)))), Mul(Integer(-1), Mul(e, Mul(Add(m, Mul(Integer(-1), n), Integer(-2)), Pow(Mul(Add(n, Integer(1)), Add(Mul(e, f), Mul(d, g))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule361)

    pattern362 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (e, f, c, g, x, b, a, d)))
    rule362 = ReplacementRule(pattern362, lambda e, f, c, g, x, b, a, d : Mul(Integer(2), Pow(e, Integer(2)), Subst(Int(Mul(Integer(1), Pow(Add(Mul(c, Add(Mul(e, f), Mul(d, g))), Mul(Integer(-1), Mul(b, e, g)), Mul(Pow(e, Integer(2)), g, Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Pow(Sqrt(Add(d, Mul(e, x))), Integer(-1))))))
    rubi.add(rule362)

    pattern363 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(1), Integer(2))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, f, c, g, x, a, d)))
    rule363 = ReplacementRule(pattern363, lambda e, f, c, g, x, a, d : Mul(Integer(2), Pow(e, Integer(2)), Subst(Int(Mul(Integer(1), Pow(Add(Mul(c, Add(Mul(e, f), Mul(d, g))), Mul(Pow(e, Integer(2)), g, Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))), Pow(Sqrt(Add(d, Mul(e, x))), Integer(-1))))))
    rubi.add(rule363)

    pattern364 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_, Integer(-1))), ZeroQ(Add(Mul(b_, e_, g_, Add(n_, Integer(1))), Mul(c_, e_, f_, Add(p_, Integer(1))), Mul(Integer(-1), Mul(c_, d_, g_, Add(Mul(Integer(2), n_), p_, Integer(3)))))), NonzeroQ(Add(n_, p_, Integer(2)))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule364 = ReplacementRule(pattern364, lambda e, n, f, c, g, x, m, b, p, a, d : Mul(Pow(e, Integer(2)), Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, g, Add(n, p, Integer(2))), Integer(-1)))))
    rubi.add(rule364)

    pattern365 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_, Integer(-1))), ZeroQ(Add(Mul(e_, f_, Add(p_, Integer(1))), Mul(Integer(-1), Mul(d_, g_, Add(Mul(Integer(2), n_), p_, Integer(3)))))), NonzeroQ(Add(n_, p_, Integer(2)))), (e, n, f, c, g, x, m, p, a, d)))
    rule365 = ReplacementRule(pattern365, lambda e, n, f, c, g, x, m, p, a, d : Mul(Pow(e, Integer(2)), Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, g, Add(n, p, Integer(2))), Integer(-1)))))
    rubi.add(rule365)

    pattern366 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_, Integer(-1))), RationalQ(n_), Less(n_, Integer(-1)), IntegerQ(Mul(Integer(2), p_))), (e, f, n, c, g, x, m, b, p, a, d)))
    rule366 = ReplacementRule(pattern366, lambda e, f, n, c, g, x, m, b, p, a, d : Add(Mul(Pow(e, Integer(2)), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(g, Add(n, Integer(1)), Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g)))), Integer(-1)))), Mul(Integer(-1), Mul(e, Mul(Add(Mul(b, e, g, Add(n, Integer(1))), Mul(c, e, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, g, Add(Mul(Integer(2), n), p, Integer(3))))), Pow(Mul(g, Add(n, Integer(1)), Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule366)

    pattern367 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_, Integer(-1))), RationalQ(n_), Less(n_, Integer(-1)), IntegerQ(Mul(Integer(2), p_))), (e, f, n, c, g, x, m, p, a, d)))
    rule367 = ReplacementRule(pattern367, lambda e, f, n, c, g, x, m, p, a, d : Add(Mul(Pow(e, Integer(2)), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, g, Add(n, Integer(1)), Add(Mul(e, f), Mul(d, g))), Integer(-1)))), Mul(Integer(-1), Mul(e, Mul(Add(Mul(e, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(d, g, Add(Mul(Integer(2), n), p, Integer(3))))), Pow(Mul(g, Add(n, Integer(1)), Add(Mul(e, f), Mul(d, g))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule367)

    pattern368 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_, Integer(-1))), Not(And(RationalQ(n_), Less(n_, Integer(-1)))), IntegerQ(Mul(Integer(2), p_))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule368 = ReplacementRule(pattern368, lambda e, n, f, c, g, x, m, b, p, a, d : Add(Mul(Pow(e, Integer(2)), Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, g, Add(n, p, Integer(2))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(b, e, g, Add(n, Integer(1))), Mul(c, e, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, g, Add(Mul(Integer(2), n), p, Integer(3))))), Pow(Mul(c, g, Add(n, p, Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule368)

    pattern369 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), ZeroQ(Add(m_, p_, Integer(-1))), Not(And(RationalQ(n_), Less(n_, Integer(-1)))), IntegerQ(Mul(Integer(2), p_))), (e, n, f, c, g, x, m, p, a, d)))
    rule369 = ReplacementRule(pattern369, lambda e, n, f, c, g, x, m, p, a, d : Add(Mul(Pow(e, Integer(2)), Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, g, Add(n, p, Integer(2))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(e, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(d, g, Add(Mul(Integer(2), n), p, Integer(3))))), Pow(Mul(g, Add(n, p, Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule369)

    pattern370 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), Or(PositiveIntegerQ(m_), IntegersQ(m_, n_))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule370 = ReplacementRule(pattern370, lambda e, n, f, c, g, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule370)

    pattern371 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(Add(p_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), IntegersQ(m_, n_), Not(And(Less(m_, Integer(0)), Less(p_, Integer(0)))), Unequal(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), (e, n, f, c, g, x, m, p, a, d)))
    rule371 = ReplacementRule(pattern371, lambda e, n, f, c, g, x, m, p, a, d : Int(ExpandIntegrand(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))), Integer(-1))), Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), x), x))
    rubi.add(rule371)

    pattern372 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), Or(PositiveIntegerQ(m_), IntegersQ(m_, n_))), (e, n, f, c, g, x, m, p, a, d)))
    rule372 = ReplacementRule(pattern372, lambda e, n, f, c, g, x, m, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule372)

    pattern373 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, b, p, a, d)))
    rule373 = ReplacementRule(pattern373, lambda e, c, x, b, p, a, d : Add(Mul(Mul(Pow(d, Integer(2)), Pow(Pow(e, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Pow(e, Integer(2)), Integer(-1))), Int(Mul(Add(d, Mul(Integer(-1), Mul(e, x))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule373)

    pattern374 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, p, a, d)))
    rule374 = ReplacementRule(pattern374, lambda e, c, x, p, a, d : Add(Mul(Mul(Pow(d, Integer(2)), Pow(Pow(e, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Pow(e, Integer(2)), Integer(-1))), Int(Mul(Add(d, Mul(Integer(-1), Mul(e, x))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule374)

    pattern375 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Integer(2)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, b, p, a, d)))
    rule375 = ReplacementRule(pattern375, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(g, Pow(Add(d, Mul(e, x)), m), Add(f, Mul(g, x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(b, e, g, Add(Mul(d, g), Mul(e, f, Add(m, p, Integer(1))))), Mul(Integer(-1), Mul(c, Add(Mul(Pow(d, Integer(2)), Pow(g, Integer(2))), Mul(d, e, f, g, m), Mul(Pow(e, Integer(2)), Pow(f, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3)))))), Mul(e, g, Add(Mul(b, e, g, Add(m, p, Integer(2))), Mul(Integer(-1), Mul(c, Add(Mul(d, g, m), Mul(e, f, Add(m, Mul(Integer(2), p), Integer(4))))))), x)), x)), x)))))
    rubi.add(rule375)

    pattern376 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, p, a, d)))
    rule376 = ReplacementRule(pattern376, lambda e, f, c, g, x, m, p, a, d : Add(Mul(g, Pow(Add(d, Mul(e, x)), m), Add(f, Mul(g, x)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(Mul(Integer(-1), c), Add(Mul(Pow(d, Integer(2)), Pow(g, Integer(2))), Mul(d, e, f, g, m), Mul(Pow(e, Integer(2)), Pow(f, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3))))), Mul(Integer(-1), Mul(c, e, g, Add(Mul(d, g, m), Mul(e, f, Add(m, Mul(Integer(2), p), Integer(4)))), x))), x)), x)))))
    rubi.add(rule376)

    pattern377 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(p_))), (e, n, f, c, g, x, m, b, p)))
    rule377 = ReplacementRule(pattern377, lambda e, n, f, c, g, x, m, b, p : Mul(Pow(Mul(e, x), m), Mul(Pow(Add(Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Pow(x, Add(m, p)), Pow(Add(b, Mul(c, x)), p)), Integer(-1))), Int(Mul(Pow(x, Add(m, p)), Pow(Add(f, Mul(g, x)), n), Pow(Add(b, Mul(c, x)), p)), x)))
    rubi.add(rule377)

    pattern378 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_)), PositiveQ(a_), PositiveQ(d_)), (e, n, f, c, g, x, m, p, a, d)))
    rule378 = ReplacementRule(pattern378, lambda e, n, f, c, g, x, m, p, a, d : Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(f, Mul(g, x)), n), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x))
    rubi.add(rule378)

    pattern379 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule379 = ReplacementRule(pattern379, lambda e, n, f, c, g, x, m, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, x)), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, x), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(f, Mul(g, x)), n), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x)))
    rubi.add(rule379)

    pattern380 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (e, n, f, c, g, x, m, p, a, d)))
    rule380 = ReplacementRule(pattern380, lambda e, n, f, c, g, x, m, p, a, d : Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, x)), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, x), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, p)), Pow(Add(f, Mul(g, x)), n), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), x)), p)), x)))
    rubi.add(rule380)

    pattern381 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(p_)), (e, f, c, g, x, m, b, p, a, d)))
    rule381 = ReplacementRule(pattern381, lambda e, f, c, g, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Add(f, Mul(g, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule381)

    pattern382 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(p_)), (e, f, c, g, x, m, p, a, d)))
    rule382 = ReplacementRule(pattern382, lambda e, f, c, g, x, m, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Add(f, Mul(g, x)), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule382)

    pattern383 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, b, a, d)))
    rule383 = ReplacementRule(pattern383, lambda f, e, c, g, x, b, a, d : Add(Mul(e, Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Integer(1), Pow(Add(d, Mul(e, x)), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Simp(Add(Mul(c, d, f), Mul(Integer(-1), Mul(b, e, f)), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x))))
    rubi.add(rule383)

    pattern384 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, a, d)))
    rule384 = ReplacementRule(pattern384, lambda f, e, c, g, x, a, d : Add(Mul(e, Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Integer(1), Pow(Add(d, Mul(e, x)), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Simp(Add(Mul(c, d, f), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1))), x))))
    rubi.add(rule384)

    pattern385 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(3)))), ZeroQ(Add(Mul(b_, Add(Mul(e_, f_), Mul(d_, g_))), Mul(Integer(-1), Mul(Integer(2), Add(Mul(c_, d_, f_), Mul(a_, e_, g_))))))), (f, e, c, g, x, m, b, p, a, d)))
    rule385 = ReplacementRule(pattern385, lambda f, e, c, g, x, m, b, p, a, d : Mul(Mul(Integer(-1), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), Add(p, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))))
    rubi.add(rule385)

    pattern386 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(3)))), ZeroQ(Add(Mul(c_, d_, f_), Mul(a_, e_, g_)))), (f, e, c, g, x, m, p, a, d)))
    rule386 = ReplacementRule(pattern386, lambda f, e, c, g, x, m, p, a, d : Mul(Mul(Integer(-1), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), Add(p, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))))
    rubi.add(rule386)

    pattern387 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(3)))), RationalQ(p_), Less(p_, Integer(-1)), Not(And(Equal(m_, Integer(1)), Or(ZeroQ(d_), ZeroQ(Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))))))), (e, f, c, g, x, m, b, p, a, d)))
    rule387 = ReplacementRule(pattern387, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Add(Mul(b, f), Mul(Integer(-1), Mul(Integer(2), a, g)), Mul(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))), x)), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(m, Mul(Add(Mul(b, Add(Mul(e, f), Mul(d, g))), Mul(Integer(-1), Mul(Integer(2), Add(Mul(c, d, f), Mul(a, e, g))))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule387)

    pattern388 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(3)))), RationalQ(p_), Less(p_, Integer(-1)), Not(And(Equal(m_, Integer(1)), ZeroQ(d_)))), (e, f, c, g, x, m, p, a, d)))
    rule388 = ReplacementRule(pattern388, lambda e, f, c, g, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Add(Mul(a, g), Mul(Integer(-1), Mul(c, f, x))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(m, Mul(Add(Mul(c, d, f), Mul(a, e, g)), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule388)

    pattern389 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(3))))), (f, e, c, g, x, m, b, p, a, d)))
    rule389 = ReplacementRule(pattern389, lambda f, e, c, g, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), Add(p, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(b, Add(Mul(e, f), Mul(d, g))), Mul(Integer(-1), Mul(Integer(2), Add(Mul(c, d, f), Mul(a, e, g))))), Pow(Mul(Integer(2), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))))
    rubi.add(rule389)

    pattern390 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(3))))), (f, e, c, g, x, m, p, a, d)))
    rule390 = ReplacementRule(pattern390, lambda f, e, c, g, x, m, p, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), Add(p, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Add(Mul(c, d, f), Mul(a, e, g)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule390)

    pattern391 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Add(Mul(Pow(b_, Integer(2)), e_, g_, Add(p_, Integer(2))), Mul(Integer(-1), Mul(Integer(2), a_, c_, e_, g_)), Mul(c_, Add(Mul(Integer(2), c_, d_, f_), Mul(Integer(-1), Mul(b_, Add(Mul(e_, f_), Mul(d_, g_))))), Add(Mul(Integer(2), p_), Integer(3)))))), (f, e, c, g, x, b, p, a, d)))
    rule391 = ReplacementRule(pattern391, lambda f, e, c, g, x, b, p, a, d : Mul(Mul(Integer(-1), Add(Mul(b, e, g, Add(p, Integer(2))), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(d, g)), Add(Mul(Integer(2), p), Integer(3)))), Mul(Integer(-1), Mul(Integer(2), c, e, g, Add(p, Integer(1)), x)))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), Pow(c, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(3))), Integer(-1)))))
    rubi.add(rule391)

    pattern392 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), ZeroQ(Add(Mul(a_, e_, g_), Mul(Integer(-1), Mul(c_, d_, f_, Add(Mul(Integer(2), p_), Integer(3))))))), (f, e, c, g, x, p, a, d)))
    rule392 = ReplacementRule(pattern392, lambda f, e, c, g, x, p, a, d : Mul(Add(Mul(Add(Mul(e, f), Mul(d, g)), Add(Mul(Integer(2), p), Integer(3))), Mul(Integer(2), e, g, Add(p, Integer(1)), x)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(3))), Integer(-1)))))
    rubi.add(rule392)

    pattern393 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Less(p_, Integer(-1))), (f, e, c, g, x, b, p, a, d)))
    rule393 = ReplacementRule(pattern393, lambda f, e, c, g, x, b, p, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(Integer(2), a, c, Add(Mul(e, f), Mul(d, g))), Mul(Integer(-1), Mul(b, Add(Mul(c, d, f), Mul(a, e, g)))), Mul(Integer(-1), Mul(Add(Mul(Pow(b, Integer(2)), e, g), Mul(Integer(-1), Mul(b, c, Add(Mul(e, f), Mul(d, g)))), Mul(Integer(2), c, Add(Mul(c, d, f), Mul(Integer(-1), Mul(a, e, g))))), x)))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(Pow(b, Integer(2)), e, g, Add(p, Integer(2))), Mul(Integer(-1), Mul(Integer(2), a, c, e, g)), Mul(c, Add(Mul(Integer(2), c, d, f), Mul(Integer(-1), Mul(b, Add(Mul(e, f), Mul(d, g))))), Add(Mul(Integer(2), p), Integer(3)))), Pow(Mul(c, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), x)))))
    rubi.add(rule393)

    pattern394 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Less(p_, Integer(-1))), (f, e, c, g, x, p, a, d)))
    rule394 = ReplacementRule(pattern394, lambda f, e, c, g, x, p, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(c, d, f, x), Mul(Integer(-1), Mul(a, Add(Mul(d, g), Mul(e, Add(f, Mul(g, x)))))))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(a, e, g), Mul(Integer(-1), Mul(c, d, f, Add(Mul(Integer(2), p), Integer(3))))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1))), Int(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), x)))))
    rubi.add(rule394)

    pattern395 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(And(RationalQ(p_), LessEqual(p_, Integer(-1))))), (f, e, c, g, x, b, p, a, d)))
    rule395 = ReplacementRule(pattern395, lambda f, e, c, g, x, b, p, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(b, e, g, Add(p, Integer(2))), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(d, g)), Add(Mul(Integer(2), p), Integer(3)))), Mul(Integer(-1), Mul(Integer(2), c, e, g, Add(p, Integer(1)), x)))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), Pow(c, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(3))), Integer(-1)))), Mul(Mul(Add(Mul(Pow(b, Integer(2)), e, g, Add(p, Integer(2))), Mul(Integer(-1), Mul(Integer(2), a, c, e, g)), Mul(c, Add(Mul(Integer(2), c, d, f), Mul(Integer(-1), Mul(b, Add(Mul(e, f), Mul(d, g))))), Add(Mul(Integer(2), p), Integer(3)))), Pow(Mul(Integer(2), Pow(c, Integer(2)), Add(Mul(Integer(2), p), Integer(3))), Integer(-1))), Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), x))))
    rubi.add(rule395)

    pattern396 = Pattern(Int(Mul(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(And(RationalQ(p_), LessEqual(p_, Integer(-1))))), (f, e, c, g, x, p, a, d)))
    rule396 = ReplacementRule(pattern396, lambda f, e, c, g, x, p, a, d : Add(Mul(Add(Mul(Add(Mul(e, f), Mul(d, g)), Add(Mul(Integer(2), p), Integer(3))), Mul(Integer(2), e, g, Add(p, Integer(1)), x)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(a, e, g), Mul(Integer(-1), Mul(c, d, f, Add(Mul(Integer(2), p), Integer(3))))), Pow(Mul(c, Add(Mul(Integer(2), p), Integer(3))), Integer(-1))), Int(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), x)))))
    rubi.add(rule396)

    pattern397 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), m_), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(Not(RationalQ(m_)), Not(PositiveIntegerQ(p_))), (e, f, c, x, g, m, p, a)))
    rule397 = ReplacementRule(pattern397, lambda e, f, c, x, g, m, p, a : Add(Mul(f, Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Mul(g, Pow(e, Integer(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule397)

    pattern398 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), p_))), ZeroQ(Add(Mul(b_, d_), Mul(a_, e_))), ZeroQ(Add(Mul(c_, d_), Mul(b_, e_)))), (f, e, c, g, x, m, b, p, a, d)))
    rule398 = ReplacementRule(pattern398, lambda f, e, c, g, x, m, b, p, a, d : Mul(Pow(Add(d, Mul(e, x)), FracPart(p)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Pow(Add(Mul(a, d), Mul(c, e, Pow(x, Integer(3)))), FracPart(p)), Integer(-1))), Int(Mul(Add(f, Mul(g, x)), Pow(Add(Mul(a, d), Mul(c, e, Pow(x, Integer(3)))), p)), x)))
    rubi.add(rule398)

    pattern399 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Integer(-2)), Less(Add(m_, Mul(Integer(2), p_)), Integer(0)), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(3))))), (f, e, c, g, x, m, b, p, a, d)))
    rule399 = ReplacementRule(pattern399, lambda f, e, c, g, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), Add(m, Integer(1)))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Integer(2)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Add(Mul(Add(Mul(d, g), Mul(Integer(-1), Mul(e, f, Add(m, Integer(2))))), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Mul(Integer(-1), Mul(d, p, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))))), Mul(Integer(-1), Mul(e, Add(Mul(g, Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Mul(p, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))))), x)))), Mul(Integer(-1), Mul(Mul(p, Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Integer(2)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Simp(Add(Mul(Integer(2), a, c, e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Add(m, Integer(2))), Mul(Pow(b, Integer(2)), e, Add(Mul(d, g, Add(p, Integer(1))), Mul(Integer(-1), Mul(e, f, Add(m, p, Integer(2)))))), Mul(b, Add(Mul(a, Pow(e, Integer(2)), g, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(Mul(d, g, Add(Mul(Integer(2), p), Integer(1))), Mul(Integer(-1), Mul(e, f, Add(m, Mul(Integer(2), p), Integer(2))))))))), Mul(Integer(-1), Mul(c, Add(Mul(Integer(2), c, d, Add(Mul(d, g, Add(Mul(Integer(2), p), Integer(1))), Mul(Integer(-1), Mul(e, f, Add(m, Mul(Integer(2), p), Integer(2)))))), Mul(Integer(-1), Mul(e, Add(Mul(Integer(2), a, e, g, Add(m, Integer(1))), Mul(Integer(-1), Mul(b, Add(Mul(d, g, Add(m, Mul(Integer(-1), Mul(Integer(2), p)))), Mul(e, f, Add(m, Mul(Integer(2), p), Integer(2)))))))))), x))), x)), x)))))
    rubi.add(rule399)

    pattern400 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Integer(-2)), Less(Add(m_, Mul(Integer(2), p_)), Integer(0)), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(3))))), (f, e, c, g, x, m, p, a, d)))
    rule400 = ReplacementRule(pattern400, lambda f, e, c, g, x, m, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), Add(m, Integer(1)))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Integer(2)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Add(Mul(Add(Mul(d, g), Mul(Integer(-1), Mul(e, f, Add(m, Integer(2))))), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Mul(Integer(-1), Mul(Integer(2), c, Pow(d, Integer(2)), p, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))))), Mul(Integer(-1), Mul(e, Add(Mul(g, Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Mul(Integer(2), c, d, p, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))))), x)))), Mul(Integer(-1), Mul(Mul(p, Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Integer(2)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(2))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Simp(Add(Mul(Integer(2), a, c, e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Add(m, Integer(2))), Mul(Integer(-1), Mul(c, Add(Mul(Integer(2), c, d, Add(Mul(d, g, Add(Mul(Integer(2), p), Integer(1))), Mul(Integer(-1), Mul(e, f, Add(m, Mul(Integer(2), p), Integer(2)))))), Mul(Integer(-1), Mul(Integer(2), a, Pow(e, Integer(2)), g, Add(m, Integer(1))))), x))), x)), x)))))
    rubi.add(rule400)

    pattern401 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Greater(p_, Integer(0)), Or(And(RationalQ(m_), Less(m_, Integer(-1))), Equal(p_, Integer(1)), And(IntegerQ(p_), Not(RationalQ(m_)))), NonzeroQ(Add(m_, Integer(1))), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(1)))), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (f, e, c, g, x, m, b, p, a, d)))
    rule401 = ReplacementRule(pattern401, lambda f, e, c, g, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(Mul(e, f, Add(m, Mul(Integer(2), p), Integer(2))), Mul(Integer(-1), Mul(d, g, Add(Mul(Integer(2), p), Integer(1)))), Mul(e, g, Add(m, Integer(1)), x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Mul(p, Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Simp(Add(Mul(g, Add(Mul(b, d), Mul(Integer(2), a, e), Mul(Integer(2), a, e, m), Mul(Integer(2), b, d, p))), Mul(Integer(-1), Mul(f, b, e, Add(m, Mul(Integer(2), p), Integer(2)))), Mul(Add(Mul(g, Add(Mul(Integer(2), c, d), Mul(b, e), Mul(b, e, m), Mul(Integer(4), c, d, p))), Mul(Integer(-1), Mul(Integer(2), c, e, f, Add(m, Mul(Integer(2), p), Integer(2))))), x)), x)), x))))
    rubi.add(rule401)

    pattern402 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Greater(p_, Integer(0)), Or(And(RationalQ(m_), Less(m_, Integer(-1))), Equal(p_, Integer(1)), And(IntegerQ(p_), Not(RationalQ(m_)))), NonzeroQ(Add(m_, Integer(1))), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(1)))), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (f, e, c, g, x, m, p, a, d)))
    rule402 = ReplacementRule(pattern402, lambda f, e, c, g, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(Mul(e, f, Add(m, Mul(Integer(2), p), Integer(2))), Mul(Integer(-1), Mul(d, g, Add(Mul(Integer(2), p), Integer(1)))), Mul(e, g, Add(m, Integer(1)), x)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Mul(p, Pow(Mul(Pow(e, Integer(2)), Add(m, Integer(1)), Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Simp(Add(Mul(g, Add(Mul(Integer(2), a, e), Mul(Integer(2), a, e, m))), Mul(Add(Mul(g, Add(Mul(Integer(2), c, d), Mul(Integer(4), c, d, p))), Mul(Integer(-1), Mul(Integer(2), c, e, f, Add(m, Mul(Integer(2), p), Integer(2))))), x)), x)), x))))
    rubi.add(rule402)

    pattern403 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Greater(p_, Integer(0)), Or(IntegerQ(p_), Not(RationalQ(m_)), Inequality(Integer(-1), Integer(LessEqual), m_, Integer(Less), Integer(0))), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_)))), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (f, e, c, g, x, m, b, p, a, d)))
    rule403 = ReplacementRule(pattern403, lambda f, e, c, g, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(Mul(c, e, f, Add(m, Mul(Integer(2), p), Integer(2))), Mul(Integer(-1), Mul(g, Add(Mul(c, d), Mul(Integer(2), c, d, p), Mul(Integer(-1), Mul(b, e, p))))), Mul(g, c, e, Add(m, Mul(Integer(2), p), Integer(1)), x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1)), Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(p, Pow(Mul(c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1)), Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Simp(Add(Mul(c, e, f, Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e))), Add(m, Mul(Integer(2), p), Integer(2))), Mul(g, Add(Mul(a, e, Add(Mul(b, e), Mul(Integer(-1), Mul(Integer(2), c, d, m)), Mul(b, e, m))), Mul(b, d, Add(Mul(b, e, p), Mul(Integer(-1), Mul(c, d)), Mul(Integer(-1), Mul(Integer(2), c, d, p)))))), Mul(Add(Mul(c, e, f, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Add(m, Mul(Integer(2), p), Integer(2))), Mul(g, Add(Mul(Pow(b, Integer(2)), Pow(e, Integer(2)), Add(p, m, Integer(1))), Mul(Integer(-1), Mul(Integer(2), Pow(c, Integer(2)), Pow(d, Integer(2)), Add(Integer(1), Mul(Integer(2), p)))), Mul(Integer(-1), Mul(c, e, Add(Mul(b, d, Add(m, Mul(Integer(-1), Mul(Integer(2), p)))), Mul(Integer(2), a, e, Add(m, Mul(Integer(2), p), Integer(1))))))))), x)), x)), x)))))
    rubi.add(rule403)

    pattern404 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Greater(p_, Integer(0)), Or(IntegerQ(p_), Not(RationalQ(m_)), Inequality(Integer(-1), Integer(LessEqual), m_, Integer(Less), Integer(0))), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_)))), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (f, e, c, g, x, m, p, a, d)))
    rule404 = ReplacementRule(pattern404, lambda f, e, c, g, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(Mul(c, e, f, Add(m, Mul(Integer(2), p), Integer(2))), Mul(Integer(-1), Mul(g, c, d, Add(Mul(Integer(2), p), Integer(1)))), Mul(g, c, e, Add(m, Mul(Integer(2), p), Integer(1)), x)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Mul(c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1)), Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Integer(2), Mul(p, Pow(Mul(c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1)), Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Simp(Add(Mul(f, a, c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(2))), Mul(a, c, d, e, g, m), Mul(Integer(-1), Mul(Add(Mul(Pow(c, Integer(2)), f, d, e, Add(m, Mul(Integer(2), p), Integer(2))), Mul(Integer(-1), Mul(g, Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2)), Add(Mul(Integer(2), p), Integer(1))), Mul(a, c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(1))))))), x))), x)), x))))
    rubi.add(rule404)

    pattern405 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1)), Or(And(Equal(m_, Integer(2)), Equal(p_, Integer(-3)), RationalQ(a_, b_, c_, d_, e_, f_, g_)), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(3)))))), (f, e, c, g, x, m, b, p, a, d)))
    rule405 = ReplacementRule(pattern405, lambda f, e, c, g, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1)))), Add(Mul(Integer(2), a, c, Add(Mul(e, f), Mul(d, g))), Mul(Integer(-1), Mul(b, Add(Mul(c, d, f), Mul(a, e, g)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d, f), Mul(Pow(b, Integer(2)), e, g), Mul(Integer(-1), Mul(c, Add(Mul(b, e, f), Mul(b, d, g), Mul(Integer(2), a, e, g))))), x))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(Integer(2), Pow(c, Integer(2)), Pow(d, Integer(2)), f, Add(Mul(Integer(2), p), Integer(3))), Mul(b, e, g, Add(Mul(a, e, Add(m, Integer(-1))), Mul(b, d, Add(p, Integer(2))))), Mul(Integer(-1), Mul(c, Add(Mul(Integer(2), a, e, Add(Mul(e, f, Add(m, Integer(-1))), Mul(d, g, m))), Mul(b, d, Add(Mul(d, g, Add(Mul(Integer(2), p), Integer(3))), Mul(Integer(-1), Mul(e, f, Add(m, Mul(Integer(-1), Mul(Integer(2), p)), Integer(-4))))))))), Mul(e, Add(Mul(Pow(b, Integer(2)), e, g, Add(m, p, Integer(1))), Mul(Integer(2), Pow(c, Integer(2)), d, f, Add(m, Mul(Integer(2), p), Integer(2))), Mul(Integer(-1), Mul(c, Add(Mul(Integer(2), a, e, g, m), Mul(b, Add(Mul(e, f), Mul(d, g)), Add(m, Mul(Integer(2), p), Integer(2))))))), x)), x)), x)))))
    rubi.add(rule405)

    pattern406 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1)), Or(And(Equal(m_, Integer(2)), Equal(p_, Integer(-3)), RationalQ(a_, c_, d_, e_, f_, g_)), Not(NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(3)))))), (f, e, c, g, x, m, p, a, d)))
    rule406 = ReplacementRule(pattern406, lambda f, e, c, g, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Add(Mul(Integer(2), a, Add(Mul(e, f), Mul(d, g))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d, f), Mul(Integer(-1), Mul(Integer(2), a, e, g))), x))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(4), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(4), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-2))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(Integer(2), a, e, Add(Mul(e, f, Add(m, Integer(-1))), Mul(d, g, m))), Mul(Integer(-1), Mul(Integer(2), c, Pow(d, Integer(2)), f, Add(Mul(Integer(2), p), Integer(3)))), Mul(e, Add(Mul(Integer(2), a, e, g, m), Mul(Integer(-1), Mul(Integer(2), c, d, f, Add(m, Mul(Integer(2), p), Integer(2))))), x)), x)), x)))))
    rubi.add(rule406)

    pattern407 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(0)), Not(And(Equal(m_, Integer(1)), SimplerQ(Add(d_, Mul(e_, x_)), Add(f_, Mul(g_, x_))))), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (e, f, c, g, x, m, b, p, a, d)))
    rule407 = ReplacementRule(pattern407, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Add(Mul(f, b), Mul(Integer(-1), Mul(Integer(2), a, g)), Mul(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))), x)), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(g, Add(Mul(Integer(2), a, e, m), Mul(b, d, Add(Mul(Integer(2), p), Integer(3))))), Mul(Integer(-1), Mul(f, Add(Mul(b, e, m), Mul(Integer(2), c, d, Add(Mul(Integer(2), p), Integer(3)))))), Mul(Integer(-1), Mul(e, Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))), Add(m, Mul(Integer(2), p), Integer(3)), x))), x)), x))))
    rubi.add(rule407)

    pattern408 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(0)), Not(And(Equal(m_, Integer(1)), SimplerQ(Add(d_, Mul(e_, x_)), Add(f_, Mul(g_, x_))))), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (e, f, c, g, x, m, p, a, d)))
    rule408 = ReplacementRule(pattern408, lambda e, f, c, g, x, m, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Add(Mul(a, g), Mul(Integer(-1), Mul(c, f, x))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(a, e, g, m), Mul(Integer(-1), Mul(c, d, f, Add(Mul(Integer(2), p), Integer(3)))), Mul(Integer(-1), Mul(c, e, f, Add(m, Mul(Integer(2), p), Integer(3)), x))), x)), x)))))
    rubi.add(rule408)

    pattern409 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Less(p_, Integer(-1)), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (f, e, c, g, x, m, b, p, a, d)))
    rule409 = ReplacementRule(pattern409, lambda f, e, c, g, x, m, b, p, a, d : Add(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Add(Mul(f, Add(Mul(b, c, d), Mul(Integer(-1), Mul(Pow(b, Integer(2)), e)), Mul(Integer(2), a, c, e))), Mul(Integer(-1), Mul(a, g, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))))), Mul(c, Add(Mul(f, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Mul(Integer(-1), Mul(g, Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e)))))), x)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(f, Add(Mul(b, c, d, e, Add(Mul(Integer(2), p), Mul(Integer(-1), m), Integer(2))), Mul(Pow(b, Integer(2)), Pow(e, Integer(2)), Add(p, m, Integer(2))), Mul(Integer(-1), Mul(Integer(2), Pow(c, Integer(2)), Pow(d, Integer(2)), Add(Mul(Integer(2), p), Integer(3)))), Mul(Integer(-1), Mul(Integer(2), a, c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3)))))), Mul(Integer(-1), Mul(g, Add(Mul(a, e, Add(Mul(b, e), Mul(Integer(-1), Mul(Integer(2), c, d, m)), Mul(b, e, m))), Mul(Integer(-1), Mul(b, d, Add(Mul(Integer(3), c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(2), c, d, p), Mul(Integer(-1), Mul(b, e, p)))))))), Mul(c, e, Add(Mul(g, Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e)))), Mul(Integer(-1), Mul(f, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))))), Add(m, Mul(Integer(2), p), Integer(4)), x)), x)), x))))
    rubi.add(rule409)

    pattern410 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(p_), Less(p_, Integer(-1)), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (f, e, c, g, x, m, p, a, d)))
    rule410 = ReplacementRule(pattern410, lambda f, e, c, g, x, m, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Add(d, Mul(e, x)), Add(m, Integer(1)))), Add(Mul(f, a, c, e), Mul(Integer(-1), Mul(a, g, c, d)), Mul(c, Add(Mul(c, d, f), Mul(a, e, g)), x)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(p, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(f, Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2)), Add(Mul(Integer(2), p), Integer(3))), Mul(a, c, Pow(e, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3))))), Mul(Integer(-1), Mul(a, c, d, e, g, m)), Mul(c, e, Add(Mul(c, d, f), Mul(a, e, g)), Add(m, Mul(Integer(2), p), Integer(4)), x)), x)), x))))
    rubi.add(rule410)

    pattern411 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(m_)), (e, f, c, g, x, m, b, a, d)))
    rule411 = ReplacementRule(pattern411, lambda e, f, c, g, x, m, b, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Mul(Add(f, Mul(g, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x), x))
    rubi.add(rule411)

    pattern412 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(m_)), (e, f, c, g, x, m, a, d)))
    rule412 = ReplacementRule(pattern412, lambda e, f, c, g, x, m, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Mul(Add(f, Mul(g, x)), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x), x))
    rubi.add(rule412)

    pattern413 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), FractionQ(m_), Greater(m_, Integer(0))), (f, e, c, g, x, m, b, a, d)))
    rule413 = ReplacementRule(pattern413, lambda f, e, c, g, x, m, b, a, d : Add(Mul(g, Mul(Pow(Add(d, Mul(e, x)), m), Pow(Mul(c, m), Integer(-1)))), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Simp(Add(Mul(c, d, f), Mul(Integer(-1), Mul(a, e, g)), Mul(Add(Mul(g, c, d), Mul(Integer(-1), Mul(b, e, g)), Mul(c, e, f)), x)), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule413)

    pattern414 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), FractionQ(m_), Greater(m_, Integer(0))), (f, e, c, g, x, m, a, d)))
    rule414 = ReplacementRule(pattern414, lambda f, e, c, g, x, m, a, d : Add(Mul(g, Mul(Pow(Add(d, Mul(e, x)), m), Pow(Mul(c, m), Integer(-1)))), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Simp(Add(Mul(c, d, f), Mul(Integer(-1), Mul(a, e, g)), Mul(Add(Mul(g, c, d), Mul(c, e, f)), x)), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule414)

    pattern415 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, b, a, d)))
    rule415 = ReplacementRule(pattern415, lambda f, e, c, g, x, b, a, d : Mul(Integer(2), Subst(Int(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)), Mul(g, Pow(x, Integer(2)))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(x, Integer(2)))), Mul(c, Pow(x, Integer(4)))), Integer(-1))), x), x, Sqrt(Add(d, Mul(e, x))))))
    rubi.add(rule415)

    pattern416 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, a, d)))
    rule416 = ReplacementRule(pattern416, lambda f, e, c, g, x, a, d : Mul(Integer(2), Subst(Int(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)), Mul(g, Pow(x, Integer(2)))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))), Mul(Integer(-1), Mul(Integer(2), c, d, Pow(x, Integer(2)))), Mul(c, Pow(x, Integer(4)))), Integer(-1))), x), x, Sqrt(Add(d, Mul(e, x))))))
    rubi.add(rule416)

    pattern417 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), FractionQ(m_), Less(m_, Integer(-1))), (f, e, c, g, x, m, b, a, d)))
    rule417 = ReplacementRule(pattern417, lambda f, e, c, g, x, m, b, a, d : Add(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Simp(Add(Mul(c, d, f), Mul(Integer(-1), Mul(f, b, e)), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule417)

    pattern418 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), FractionQ(m_), Less(m_, Integer(-1))), (f, e, c, g, x, m, a, d)))
    rule418 = ReplacementRule(pattern418, lambda f, e, c, g, x, m, a, d : Add(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Simp(Add(Mul(c, d, f), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule418)

    pattern419 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(RationalQ(m_))), (f, e, c, g, x, m, b, a, d)))
    rule419 = ReplacementRule(pattern419, lambda f, e, c, g, x, m, b, a, d : Int(ExpandIntegrand(Pow(Add(d, Mul(e, x)), m), Mul(Add(f, Mul(g, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x), x))
    rubi.add(rule419)

    pattern420 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(RationalQ(m_))), (f, e, c, g, x, m, a, d)))
    rule420 = ReplacementRule(pattern420, lambda f, e, c, g, x, m, a, d : Int(ExpandIntegrand(Pow(Add(d, Mul(e, x)), m), Mul(Add(f, Mul(g, x)), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1))), x), x))
    rubi.add(rule420)

    pattern421 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), Greater(m_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(2))), Not(And(Equal(m_, Integer(1)), SimplerQ(Add(f_, Mul(g_, x_)), Add(d_, Mul(e_, x_))))), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (e, f, c, g, x, m, b, p, a, d)))
    rule421 = ReplacementRule(pattern421, lambda e, f, c, g, x, m, b, p, a, d : Add(Mul(g, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(m, Add(Mul(c, d, f), Mul(Integer(-1), Mul(a, e, g)))), Mul(d, Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))), Add(p, Integer(1))), Mul(Add(Mul(m, Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g)))), Mul(e, Add(p, Integer(1)), Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))))), x)), x)), x))))
    rubi.add(rule421)

    pattern422 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), Greater(m_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(2))), Not(And(Equal(m_, Integer(1)), SimplerQ(Add(f_, Mul(g_, x_)), Add(d_, Mul(e_, x_))))), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (e, f, c, g, x, m, p, a, d)))
    rule422 = ReplacementRule(pattern422, lambda e, f, c, g, x, m, p, a, d : Add(Mul(g, Pow(Add(d, Mul(e, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(c, Add(m, Mul(Integer(2), p), Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(c, d, f, Add(m, Mul(Integer(2), p), Integer(2))), Mul(Integer(-1), Mul(a, e, g, m)), Mul(c, Add(Mul(e, f, Add(m, Mul(Integer(2), p), Integer(2))), Mul(d, g, m)), x)), x)), x))))
    rubi.add(rule422)

    pattern423 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), Less(m_, Integer(-1)), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (f, e, c, g, x, m, b, p, a, d)))
    rule423 = ReplacementRule(pattern423, lambda f, e, c, g, x, m, b, p, a, d : Add(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(Add(Mul(c, d, f), Mul(Integer(-1), Mul(f, b, e)), Mul(a, e, g)), Add(m, Integer(1))), Mul(b, Add(Mul(d, g), Mul(Integer(-1), Mul(e, f))), Add(p, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Add(m, Mul(Integer(2), p), Integer(3)), x))), x)), x))))
    rubi.add(rule423)

    pattern424 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_), Less(m_, Integer(-1)), Or(IntegerQ(m_), IntegerQ(p_), IntegersQ(Mul(Integer(2), m_), Mul(Integer(2), p_)))), (f, e, c, g, x, m, p, a, d)))
    rule424 = ReplacementRule(pattern424, lambda f, e, c, g, x, m, p, a, d : Add(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(Add(Mul(c, d, f), Mul(a, e, g)), Add(m, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Add(m, Mul(Integer(2), p), Integer(3)), x))), x)), x))))
    rubi.add(rule424)

    pattern425 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NegativeIntegerQ(Simplify(Add(m_, Mul(Integer(2), p_), Integer(3)))), NonzeroQ(Add(m_, Integer(1)))), (f, e, c, g, x, m, b, p, a, d)))
    rule425 = ReplacementRule(pattern425, lambda f, e, c, g, x, m, b, p, a, d : Add(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(Add(Mul(c, d, f), Mul(Integer(-1), Mul(f, b, e)), Mul(a, e, g)), Add(m, Integer(1))), Mul(b, Add(Mul(d, g), Mul(Integer(-1), Mul(e, f))), Add(p, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Add(m, Mul(Integer(2), p), Integer(3)), x))), x)), x))))
    rubi.add(rule425)

    pattern426 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), NegativeIntegerQ(Add(m_, Mul(Integer(2), p_), Integer(3))), NonzeroQ(Add(m_, Integer(1)))), (f, e, c, g, x, m, p, a, d)))
    rule426 = ReplacementRule(pattern426, lambda f, e, c, g, x, m, p, a, d : Add(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(m, Integer(1)), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(Add(Mul(c, d, f), Mul(a, e, g)), Add(m, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Add(m, Mul(Integer(2), p), Integer(3)), x))), x)), x))))
    rubi.add(rule426)

    pattern427 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(ZeroQ(Add(Mul(Integer(4), c_, Add(a_, Mul(Integer(-1), d_))), Mul(Integer(-1), Pow(Add(b_, Mul(Integer(-1), e_)), Integer(2))))), ZeroQ(Add(Mul(e_, f_, Add(b_, Mul(Integer(-1), e_))), Mul(Integer(-1), Mul(Integer(2), g_, Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_))))))), NonzeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_))))), (e, f, c, g, x, b, a, d)))
    rule427 = ReplacementRule(pattern427, lambda e, f, c, g, x, b, a, d : Mul(Integer(4), f, Mul(Add(a, Mul(Integer(-1), d)), Pow(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Mul(Integer(4), Add(a, Mul(Integer(-1), d))), Mul(Integer(-1), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Add(Mul(Integer(2), Add(a, Mul(Integer(-1), d))), Mul(Add(b, Mul(Integer(-1), e)), x)), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule427)

    pattern428 = Pattern(Int(Mul(Pow(x_, Rational(Integer(-1), Integer(2))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, g, b, a)))
    rule428 = ReplacementRule(pattern428, lambda f, c, x, g, b, a : Mul(Integer(2), Subst(Int(Mul(Add(f, Mul(g, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x), x, Sqrt(x))))
    rubi.add(rule428)

    pattern429 = Pattern(Int(Mul(Pow(x_, Rational(Integer(-1), Integer(2))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(f, x), FreeQ(g, x), cons(True, (f, c, x, g, a)))
    rule429 = ReplacementRule(pattern429, lambda f, c, x, g, a : Mul(Integer(2), Subst(Int(Mul(Add(f, Mul(g, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x), x, Sqrt(x))))
    rubi.add(rule429)

    pattern430 = Pattern(Int(Mul(Pow(Mul(e_, x_), Rational(Integer(-1), Integer(2))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, f, c, x, g, b, a)))
    rule430 = ReplacementRule(pattern430, lambda e, f, c, x, g, b, a : Mul(Mul(Sqrt(x), Pow(Sqrt(Mul(e, x)), Integer(-1))), Int(Mul(Add(f, Mul(g, x)), Pow(Mul(Sqrt(x), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1))), x)))
    rubi.add(rule430)

    pattern431 = Pattern(Int(Mul(Pow(Mul(e_, x_), Rational(Integer(-1), Integer(2))), Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(True, (e, f, c, x, g, a)))
    rule431 = ReplacementRule(pattern431, lambda e, f, c, x, g, a : Mul(Mul(Sqrt(x), Pow(Sqrt(Mul(e, x)), Integer(-1))), Int(Mul(Add(f, Mul(g, x)), Pow(Mul(Sqrt(x), Sqrt(Add(a, Mul(c, Pow(x, Integer(2)))))), Integer(-1))), x)))
    rubi.add(rule431)

    pattern432 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, m, b, p, a, d)))
    rule432 = ReplacementRule(pattern432, lambda f, e, c, g, x, m, b, p, a, d : Add(Mul(Mul(g, Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule432)

    pattern433 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, m, p, a, d)))
    rule433 = ReplacementRule(pattern433, lambda f, e, c, g, x, m, p, a, d : Add(Mul(Mul(g, Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule433)

    pattern434 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegersQ(m_, n_, p_)), (f, e, n, c, g, x, m, b, p, a, d)))
    rule434 = ReplacementRule(pattern434, lambda f, e, n, c, g, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule434)

    pattern435 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegersQ(m_, n_, p_)), (f, e, n, c, g, x, m, p, a, d)))
    rule435 = ReplacementRule(pattern435, lambda f, e, n, c, g, x, m, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule435)

    pattern436 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), FractionQ(p_), Greater(p_, Integer(0))), (f, e, c, g, x, b, p, a, d)))
    rule436 = ReplacementRule(pattern436, lambda f, e, c, g, x, b, p, a, d : Add(Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Mul(e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Simp(Add(Mul(c, d, f), Mul(Integer(-1), Mul(b, e, f)), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), x), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(f, Mul(g, x)), Integer(-1)))), x)))))
    rubi.add(rule436)

    pattern437 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), FractionQ(p_), Greater(p_, Integer(0))), (f, e, c, g, x, p, a, d)))
    rule437 = ReplacementRule(pattern437, lambda f, e, c, g, x, p, a, d : Add(Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Mul(e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Simp(Add(Mul(c, d, f), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), x), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(f, Mul(g, x)), Integer(-1)))), x)))))
    rubi.add(rule437)

    pattern438 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegersQ(n_, p_), FractionQ(m_)), (f, e, n, c, g, x, m, b, p, a, d)))
    rule438 = ReplacementRule(pattern438, lambda f, e, n, c, g, x, m, b, p, a, d : With(List(Set(Integer(q), Denominator(m))), Mul(Mul(Integer(q), Pow(e, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(q), Add(m, Integer(1))), Integer(-1))), Pow(Add(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(e, Integer(-1))), Mul(g, Mul(Pow(x, Integer(q)), Pow(e, Integer(-1))))), n), Pow(Add(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Pow(e, Integer(2)), Integer(-1))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Mul(Pow(x, Integer(q)), Pow(Pow(e, Integer(2)), Integer(-1))))), Mul(c, Mul(Pow(x, Mul(Integer(2), Integer(q))), Pow(Pow(e, Integer(2)), Integer(-1))))), p)), x), x, Pow(Add(d, Mul(e, x)), Mul(Integer(1), Pow(Integer(q), Integer(-1))))))))
    rubi.add(rule438)

    pattern439 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegersQ(n_, p_), FractionQ(m_)), (f, e, n, c, g, x, m, p, a, d)))
    rule439 = ReplacementRule(pattern439, lambda f, e, n, c, g, x, m, p, a, d : With(List(Set(Integer(q), Denominator(m))), Mul(Mul(Integer(q), Pow(e, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(q), Add(m, Integer(1))), Integer(-1))), Pow(Add(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(e, Integer(-1))), Mul(g, Mul(Pow(x, Integer(q)), Pow(e, Integer(-1))))), n), Pow(Add(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Pow(e, Integer(2)), Integer(-1))), Mul(Integer(-1), Mul(Integer(2), c, d, Mul(Pow(x, Integer(q)), Pow(Pow(e, Integer(2)), Integer(-1))))), Mul(c, Mul(Pow(x, Mul(Integer(2), Integer(q))), Pow(Pow(e, Integer(2)), Integer(-1))))), p)), x), x, Pow(Add(d, Mul(e, x)), Mul(Integer(1), Pow(Integer(q), Integer(-1))))))))
    rubi.add(rule439)

    pattern440 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), n_))), ZeroQ(Add(Mul(e_, f_), Mul(d_, g_))), Or(IntegerQ(m_), And(PositiveQ(d_), PositiveQ(f_)))), (e, n, f, c, g, x, m, b, p, a, d)))
    rule440 = ReplacementRule(pattern440, lambda e, n, f, c, g, x, m, b, p, a, d : Int(Mul(Pow(Add(Mul(d, f), Mul(e, g, Pow(x, Integer(2)))), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))
    rubi.add(rule440)

    pattern441 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), n_))), ZeroQ(Add(Mul(e_, f_), Mul(d_, g_))), Or(IntegerQ(m_), And(PositiveQ(d_), PositiveQ(f_)))), (e, n, f, c, g, x, m, p, a, d)))
    rule441 = ReplacementRule(pattern441, lambda e, n, f, c, g, x, m, p, a, d : Int(Mul(Pow(Add(Mul(d, f), Mul(e, g, Pow(x, Integer(2)))), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))
    rubi.add(rule441)

    pattern442 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), n_))), ZeroQ(Add(Mul(e_, f_), Mul(d_, g_)))), (e, f, n, c, g, x, m, b, p, a, d)))
    rule442 = ReplacementRule(pattern442, lambda e, f, n, c, g, x, m, b, p, a, d : Mul(Pow(Add(d, Mul(e, x)), FracPart(m)), Mul(Pow(Add(f, Mul(g, x)), FracPart(m)), Pow(Pow(Add(Mul(d, f), Mul(e, g, Pow(x, Integer(2)))), FracPart(m)), Integer(-1))), Int(Mul(Pow(Add(Mul(d, f), Mul(e, g, Pow(x, Integer(2)))), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))
    rubi.add(rule442)

    pattern443 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), n_))), ZeroQ(Add(Mul(e_, f_), Mul(d_, g_)))), (e, f, n, c, g, x, m, p, a, d)))
    rule443 = ReplacementRule(pattern443, lambda e, f, n, c, g, x, m, p, a, d : Mul(Pow(Add(d, Mul(e, x)), FracPart(m)), Mul(Pow(Add(f, Mul(g, x)), FracPart(m)), Pow(Pow(Add(Mul(d, f), Mul(e, g, Pow(x, Integer(2)))), FracPart(m)), Integer(-1))), Int(Mul(Pow(Add(Mul(d, f), Mul(e, g, Pow(x, Integer(2)))), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)))
    rubi.add(rule443)

    pattern444 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, n_)), (f, e, n, c, g, x, m, b, a, d)))
    rule444 = ReplacementRule(pattern444, lambda f, e, n, c, g, x, m, b, a, d : Add(Int(Mul(Add(a, Mul(b, x)), Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n)), x), Mul(c, Int(Mul(Pow(x, Integer(2)), Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n)), x))))
    rubi.add(rule444)

    pattern445 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(m_, n_)), (f, e, n, c, g, x, m, a, d)))
    rule445 = ReplacementRule(pattern445, lambda f, e, n, c, g, x, m, a, d : Add(Mul(a, Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n)), x)), Mul(c, Int(Mul(Pow(x, Integer(2)), Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n)), x))))
    rubi.add(rule445)

    pattern446 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), RationalQ(m_, n_), Greater(m_, Integer(0)), Greater(n_, Integer(1))), (f, e, n, c, g, x, m, b, a, d)))
    rule446 = ReplacementRule(pattern446, lambda f, e, n, c, g, x, m, b, a, d : Add(Mul(Mul(g, Pow(Pow(c, Integer(2)), Integer(-1))), Int(Mul(Simp(Add(Mul(Integer(2), c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g)), Mul(c, e, g, x)), x), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(-2)))), x)), Mul(Mul(Integer(1), Pow(Pow(c, Integer(2)), Integer(-1))), Int(Mul(Simp(Add(Mul(Pow(c, Integer(2)), d, Pow(f, Integer(2))), Mul(Integer(-1), Mul(Integer(2), a, c, e, f, g)), Mul(Integer(-1), Mul(a, c, d, Pow(g, Integer(2)))), Mul(a, b, e, Pow(g, Integer(2))), Mul(Add(Mul(Pow(c, Integer(2)), e, Pow(f, Integer(2))), Mul(Integer(2), Pow(c, Integer(2)), d, f, g), Mul(Integer(-1), Mul(Integer(2), b, c, e, f, g)), Mul(Integer(-1), Mul(b, c, d, Pow(g, Integer(2)))), Mul(Pow(b, Integer(2)), e, Pow(g, Integer(2))), Mul(Integer(-1), Mul(a, c, e, Pow(g, Integer(2))))), x)), x), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule446)

    pattern447 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), RationalQ(m_, n_), Greater(m_, Integer(0)), Greater(n_, Integer(1))), (f, e, n, c, g, x, m, a, d)))
    rule447 = ReplacementRule(pattern447, lambda f, e, n, c, g, x, m, a, d : Add(Mul(Mul(g, Pow(c, Integer(-1))), Int(Mul(Simp(Add(Mul(Integer(2), e, f), Mul(d, g), Mul(e, g, x)), x), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(-2)))), x)), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Simp(Add(Mul(c, d, Pow(f, Integer(2))), Mul(Integer(-1), Mul(Integer(2), a, e, f, g)), Mul(Integer(-1), Mul(a, d, Pow(g, Integer(2)))), Mul(Add(Mul(c, e, Pow(f, Integer(2))), Mul(Integer(2), c, d, f, g), Mul(Integer(-1), Mul(a, e, Pow(g, Integer(2))))), x)), x), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-2))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule447)

    pattern448 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), RationalQ(m_, n_), Greater(m_, Integer(0)), Greater(n_, Integer(0))), (f, e, n, c, g, x, m, b, a, d)))
    rule448 = ReplacementRule(pattern448, lambda f, e, n, c, g, x, m, b, a, d : Add(Mul(e, Mul(g, Pow(c, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1)))), x)), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Simp(Add(Mul(c, d, f), Mul(Integer(-1), Mul(a, e, g)), Mul(Add(Mul(c, e, f), Mul(c, d, g), Mul(Integer(-1), Mul(b, e, g))), x)), x), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule448)

    pattern449 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), RationalQ(m_, n_), Greater(m_, Integer(0)), Greater(n_, Integer(0))), (f, e, n, c, g, x, m, a, d)))
    rule449 = ReplacementRule(pattern449, lambda f, e, n, c, g, x, m, a, d : Add(Mul(e, Mul(g, Pow(c, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1)))), x)), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Simp(Add(Mul(c, d, f), Mul(Integer(-1), Mul(a, e, g)), Mul(Add(Mul(c, e, f), Mul(c, d, g)), x)), x), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule449)

    pattern450 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), RationalQ(m_, n_), Greater(m_, Integer(0)), Less(n_, Integer(-1))), (f, e, n, c, g, x, m, b, a, d)))
    rule450 = ReplacementRule(pattern450, lambda f, e, n, c, g, x, m, b, a, d : Add(Mul(Mul(Integer(-1), g), Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(c, Pow(f, Integer(2))), Mul(Integer(-1), Mul(b, f, g)), Mul(a, Pow(g, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n)), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(f, Integer(2))), Mul(Integer(-1), Mul(b, f, g)), Mul(a, Pow(g, Integer(2)))), Integer(-1))), Int(Mul(Simp(Add(Mul(c, d, f), Mul(Integer(-1), Mul(b, d, g)), Mul(a, e, g), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x)), x), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule450)

    pattern451 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), RationalQ(m_, n_), Greater(m_, Integer(0)), Less(n_, Integer(-1))), (f, e, n, c, g, x, m, a, d)))
    rule451 = ReplacementRule(pattern451, lambda f, e, n, c, g, x, m, a, d : Add(Mul(Mul(Integer(-1), g), Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(c, Pow(f, Integer(2))), Mul(a, Pow(g, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Pow(Add(f, Mul(g, x)), n)), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(f, Integer(2))), Mul(a, Pow(g, Integer(2)))), Integer(-1))), Int(Mul(Simp(Add(Mul(c, d, f), Mul(a, e, g), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x)), x), Pow(Add(d, Mul(e, x)), Add(m, Integer(-1))), Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule451)

    pattern452 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (f, e, c, g, x, m, b, a, d)))
    rule452 = ReplacementRule(pattern452, lambda f, e, c, g, x, m, b, a, d : Int(ExpandIntegrand(Mul(Integer(1), Pow(Mul(Sqrt(Add(d, Mul(e, x))), Sqrt(Add(f, Mul(g, x)))), Integer(-1))), Mul(Pow(Add(d, Mul(e, x)), Add(m, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x), x))
    rubi.add(rule452)

    pattern453 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (f, e, c, g, x, m, a, d)))
    rule453 = ReplacementRule(pattern453, lambda f, e, c, g, x, m, a, d : Int(ExpandIntegrand(Mul(Integer(1), Pow(Mul(Sqrt(Add(d, Mul(e, x))), Sqrt(Add(f, Mul(g, x)))), Integer(-1))), Mul(Pow(Add(d, Mul(e, x)), Add(m, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1))), x), x))
    rubi.add(rule453)

    pattern454 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(m_)), Not(IntegerQ(n_))), (f, e, n, c, g, x, m, b, a, d)))
    rule454 = ReplacementRule(pattern454, lambda f, e, n, c, g, x, m, b, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n)), Mul(Integer(1), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x), x))
    rubi.add(rule454)

    pattern455 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(m_)), Not(IntegerQ(n_))), (f, e, n, c, g, x, m, a, d)))
    rule455 = ReplacementRule(pattern455, lambda f, e, n, c, g, x, m, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n)), Mul(Integer(1), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Integer(-1))), x), x))
    rubi.add(rule455)

    pattern456 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Or(IntegerQ(p_), IntegersQ(m_, n_))), (f, e, n, c, g, x, m, b, p, a, d)))
    rule456 = ReplacementRule(pattern456, lambda f, e, n, c, g, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule456)

    pattern457 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Or(IntegerQ(p_), IntegersQ(m_, n_))), (f, e, n, c, g, x, m, p, a, d)))
    rule457 = ReplacementRule(pattern457, lambda f, e, n, c, g, x, m, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule457)

    pattern458 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', Integer(1)), x_), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), p_))), ZeroQ(Add(Mul(b_, d_), Mul(a_, e_))), ZeroQ(Add(Mul(c_, d_), Mul(b_, e_)))), (e, n, c, g, x, m, b, p, a, d)))
    rule458 = ReplacementRule(pattern458, lambda e, n, c, g, x, m, b, p, a, d : Mul(Pow(Add(d, Mul(e, x)), FracPart(p)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Pow(Add(Mul(a, d), Mul(c, e, Pow(x, Integer(3)))), FracPart(p)), Integer(-1))), Int(Mul(Pow(Mul(g, x), n), Pow(Add(Mul(a, d), Mul(c, e, Pow(x, Integer(3)))), p)), x)))
    rubi.add(rule458)

    pattern459 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(n_)), Not(IntegerQ(p_)), RationalQ(n_, p_), Greater(p_, Integer(0)), Less(n_, Integer(-1))), (f, e, n, c, g, x, b, p, a, d)))
    rule459 = ReplacementRule(pattern459, lambda f, e, n, c, g, x, b, p, a, d : Add(Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Mul(e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x)), Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), n), Add(Mul(c, d, f), Mul(Integer(-1), Mul(b, e, f)), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule459)

    pattern460 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(n_)), Not(IntegerQ(p_)), RationalQ(n_, p_), Greater(p_, Integer(0)), Less(n_, Integer(-1))), (f, e, n, c, g, x, p, a, d)))
    rule460 = ReplacementRule(pattern460, lambda f, e, n, c, g, x, p, a, d : Add(Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Mul(e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x)), Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(e, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), n), Add(Mul(c, d, f), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule460)

    pattern461 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(n_)), Not(IntegerQ(p_)), RationalQ(n_, p_), Less(p_, Integer(-1)), Greater(n_, Integer(0))), (f, e, n, c, g, x, b, p, a, d)))
    rule461 = ReplacementRule(pattern461, lambda f, e, n, c, g, x, b, p, a, d : Add(Mul(e, Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x)), Integer(-1)))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Add(Mul(c, d, f), Mul(Integer(-1), Mul(b, e, f)), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule461)

    pattern462 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(n_)), Not(IntegerQ(p_)), RationalQ(n_, p_), Less(p_, Integer(-1)), Greater(n_, Integer(0))), (f, e, n, c, g, x, p, a, d)))
    rule462 = ReplacementRule(pattern462, lambda f, e, n, c, g, x, p, a, d : Add(Mul(e, Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x)), Integer(-1)))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Add(Mul(c, d, f), Mul(a, e, g), Mul(Integer(-1), Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), x))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule462)

    pattern463 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, b, a, d)))
    rule463 = ReplacementRule(pattern463, lambda f, e, c, g, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Integer(-2), Sqrt(Mul(Mul(Integer(-1), g), Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, x)), Pow(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g)), Mul(g, Integer(q))), Integer(-1))))), Mul(Sqrt(Mul(Mul(Integer(-1), g), Mul(Add(b, Integer(q), Mul(Integer(2), c, x)), Pow(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g)), Mul(Integer(-1), Mul(g, Integer(q)))), Integer(-1))))), Pow(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Sqrt(Mul(Integer(2), Mul(c, Pow(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g)), Mul(g, Integer(q))), Integer(-1))))), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1))), EllipticPi(Mul(e, Mul(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g)), Mul(g, Integer(q))), Pow(Mul(Integer(2), c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1)))), ArcSin(Mul(Sqrt(Mul(Integer(2), Mul(c, Pow(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g)), Mul(g, Integer(q))), Integer(-1))))), Sqrt(Add(f, Mul(g, x))))), Mul(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g)), Mul(g, Integer(q))), Pow(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g)), Mul(Integer(-1), Mul(g, Integer(q)))), Integer(-1)))))))
    rubi.add(rule463)

    pattern464 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, a, d)))
    rule464 = ReplacementRule(pattern464, lambda f, e, c, g, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Mul(Integer(-2), Sqrt(Mul(g, Mul(Add(Integer(q), Mul(Integer(-1), Mul(c, x))), Pow(Add(Mul(c, f), Mul(g, Integer(q))), Integer(-1))))), Mul(Sqrt(Mul(Mul(Integer(-1), g), Mul(Add(Integer(q), Mul(c, x)), Pow(Add(Mul(c, f), Mul(Integer(-1), Mul(g, Integer(q)))), Integer(-1))))), Pow(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Sqrt(Mul(c, Pow(Add(Mul(c, f), Mul(g, Integer(q))), Integer(-1)))), Sqrt(Add(a, Mul(c, Pow(x, Integer(2)))))), Integer(-1))), EllipticPi(Mul(e, Mul(Add(Mul(c, f), Mul(g, Integer(q))), Pow(Mul(c, Add(Mul(e, f), Mul(Integer(-1), Mul(d, g)))), Integer(-1)))), ArcSin(Mul(Sqrt(Mul(c, Pow(Add(Mul(c, f), Mul(g, Integer(q))), Integer(-1)))), Sqrt(Add(f, Mul(g, x))))), Mul(Add(Mul(c, f), Mul(g, Integer(q))), Pow(Add(Mul(c, f), Mul(Integer(-1), Mul(g, Integer(q)))), Integer(-1)))))))
    rubi.add(rule464)

    pattern465 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(Add(n_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (f, e, n, c, g, x, b, a, d)))
    rule465 = ReplacementRule(pattern465, lambda f, e, n, c, g, x, b, a, d : Int(ExpandIntegrand(Mul(Integer(1), Pow(Mul(Sqrt(Add(f, Mul(g, x))), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1))), Mul(Pow(Add(f, Mul(g, x)), Add(n, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Pow(Add(d, Mul(e, x)), Integer(-1))), x), x))
    rubi.add(rule465)

    pattern466 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(Add(n_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (f, e, n, c, g, x, a, d)))
    rule466 = ReplacementRule(pattern466, lambda f, e, n, c, g, x, a, d : Int(ExpandIntegrand(Mul(Integer(1), Pow(Mul(Sqrt(Add(f, Mul(g, x))), Sqrt(Add(a, Mul(c, Pow(x, Integer(2)))))), Integer(-1))), Mul(Pow(Add(f, Mul(g, x)), Add(n, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Pow(Add(d, Mul(e, x)), Integer(-1))), x), x))
    rubi.add(rule466)

    pattern467 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, b, a, d)))
    rule467 = ReplacementRule(pattern467, lambda f, e, c, g, x, b, a, d : Mul(Integer(-2), Add(d, Mul(e, x)), Mul(Sqrt(Mul(Pow(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Integer(2)), Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Pow(Mul(Add(Mul(c, Pow(f, Integer(2))), Mul(Integer(-1), Mul(b, f, g)), Mul(a, Pow(g, Integer(2)))), Pow(Add(d, Mul(e, x)), Integer(2))), Integer(-1))))), Pow(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Sqrt(Add(Integer(1), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d, f), Mul(Integer(-1), Mul(b, e, f)), Mul(Integer(-1), Mul(b, d, g)), Mul(Integer(2), a, e, g)), Mul(Pow(x, Integer(2)), Pow(Add(Mul(c, Pow(f, Integer(2))), Mul(Integer(-1), Mul(b, f, g)), Mul(a, Pow(g, Integer(2)))), Integer(-1))))), Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Mul(Pow(x, Integer(4)), Pow(Add(Mul(c, Pow(f, Integer(2))), Mul(Integer(-1), Mul(b, f, g)), Mul(a, Pow(g, Integer(2)))), Integer(-1)))))), Integer(-1))), x), x, Mul(Sqrt(Add(f, Mul(g, x))), Pow(Sqrt(Add(d, Mul(e, x))), Integer(-1))))))
    rubi.add(rule467)

    pattern468 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (f, e, c, g, x, a, d)))
    rule468 = ReplacementRule(pattern468, lambda f, e, c, g, x, a, d : Mul(Integer(-2), Add(d, Mul(e, x)), Mul(Sqrt(Mul(Pow(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Integer(2)), Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Pow(Mul(Add(Mul(c, Pow(f, Integer(2))), Mul(a, Pow(g, Integer(2)))), Pow(Add(d, Mul(e, x)), Integer(2))), Integer(-1))))), Pow(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Sqrt(Add(a, Mul(c, Pow(x, Integer(2)))))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Sqrt(Add(Integer(1), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d, f), Mul(Integer(2), a, e, g)), Mul(Pow(x, Integer(2)), Pow(Add(Mul(c, Pow(f, Integer(2))), Mul(a, Pow(g, Integer(2)))), Integer(-1))))), Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Mul(Pow(x, Integer(4)), Pow(Add(Mul(c, Pow(f, Integer(2))), Mul(a, Pow(g, Integer(2)))), Integer(-1)))))), Integer(-1))), x), x, Mul(Sqrt(Add(f, Mul(g, x))), Pow(Sqrt(Add(d, Mul(e, x))), Integer(-1))))))
    rubi.add(rule468)

    pattern469 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(True, (e, f, c, g, x, m, p, a)))
    rule469 = ReplacementRule(pattern469, lambda e, f, c, g, x, m, p, a : Add(Mul(Integer(2), f, Mul(g, Pow(e, Integer(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)), Int(Mul(Pow(Mul(e, x), m), Add(Pow(f, Integer(2)), Mul(Pow(g, Integer(2)), Pow(x, Integer(2)))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)))
    rubi.add(rule469)

    pattern470 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Integer(3)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(True, (e, f, c, g, x, m, p, a)))
    rule470 = ReplacementRule(pattern470, lambda e, f, c, g, x, m, p, a : Add(Mul(f, Int(Mul(Pow(Mul(e, x), m), Add(Pow(f, Integer(2)), Mul(Integer(3), Pow(g, Integer(2)), Pow(x, Integer(2)))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Mul(g, Pow(e, Integer(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Integer(1))), Add(Mul(Integer(3), Pow(f, Integer(2))), Mul(Pow(g, Integer(2)), Pow(x, Integer(2)))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule470)

    pattern471 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(n_)), (f, e, n, c, g, x, m, b, p, a, d)))
    rule471 = ReplacementRule(pattern471, lambda f, e, n, c, g, x, m, b, p, a, d : Add(Mul(Mul(g, Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule471)

    pattern472 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(e_, f_), Mul(Integer(-1), Mul(d_, g_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(n_)), (f, e, n, c, g, x, m, p, a, d)))
    rule472 = ReplacementRule(pattern472, lambda f, e, n, c, g, x, m, p, a, d : Add(Mul(Mul(g, Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), Add(m, Integer(1))), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(e, Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), Add(n, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x))))
    rubi.add(rule472)

    pattern473 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), cons((Mul(Pow(Add(d_, Mul(e_, x_)), m_), Pow(Add(f_, Mul(g_, x_)), n_), Pow(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2)))), p_)), x_), (e, f, n, c, g, x, m, b, p, a, d)))
    rule473 = ReplacementRule(pattern473, lambda e, f, n, c, g, x, m, b, p, a, d : Defer(Integer(Int)))
    rubi.add(rule473)

    pattern474 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), cons((Mul(Pow(Add(d_, Mul(e_, x_)), m_), Pow(Add(f_, Mul(g_, x_)), n_), Pow(Add(a_, Mul(c_, Pow(x_, Integer(2)))), p_)), x_), (e, f, n, c, g, x, m, p, a, d)))
    rule474 = ReplacementRule(pattern474, lambda e, f, n, c, g, x, m, p, a, d : Defer(Integer(Int)))
    rubi.add(rule474)

    pattern475 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), u_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), u_), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, f, n, c, g, x, m, u, b, p, a, d)))
    rule475 = ReplacementRule(pattern475, lambda e, f, n, c, g, x, m, u, b, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x, u)))
    rubi.add(rule475)

    pattern476 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), u_)), Wildcard.optional('n', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, f, n, c, g, x, m, u, p, a, d)))
    rule476 = ReplacementRule(pattern476, lambda e, f, n, c, g, x, m, u, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x, u)))
    rubi.add(rule476)

    pattern477 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), Or(IntegerQ(p_), PositiveQ(Mul(c_, Pow(f_, Integer(-1))))), Or(Not(IntegerQ(q_)), LessEqual(LeafCount(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2))))), LeafCount(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2)))))))), (e, f, q, c, x, b, p, a, d)))
    rule477 = ReplacementRule(pattern477, lambda e, f, q, c, x, b, p, a, d : Mul(Pow(Mul(c, Pow(f, Integer(-1))), p), Int(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q)), x)))
    rubi.add(rule477)

    pattern478 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), Not(IntegerQ(p_)), Not(IntegerQ(q_)), Not(PositiveQ(Mul(c_, Pow(f_, Integer(-1)))))), (e, f, q, c, x, b, p, a, d)))
    rule478 = ReplacementRule(pattern478, lambda e, f, q, c, x, b, p, a, d : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(d, IntPart(p)), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), FracPart(p))), Integer(-1))), Int(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q)), x)))
    rubi.add(rule478)

    pattern479 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_))), (e, f, q, c, x, b, p, a, d)))
    rule479 = ReplacementRule(pattern479, lambda e, f, q, c, x, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), p)), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q)), x)))
    rubi.add(rule479)

    pattern480 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_))), (f, q, c, x, b, p, a, d)))
    rule480 = ReplacementRule(pattern480, lambda f, q, c, x, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), p)), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q)), x)))
    rubi.add(rule480)

    pattern481 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(f_, Add(Mul(Integer(2), a_, f_), Mul(Integer(-1), Mul(b_, e_))), Add(Mul(Integer(2), q_), Integer(3))), Mul(c_, Add(Mul(Pow(e_, Integer(2)), Add(q_, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d_, f_)))))), NonzeroQ(Add(q_, Integer(1))), NonzeroQ(Add(Mul(Integer(2), q_), Integer(3)))), (e, f, q, c, x, b, a, d)))
    rule481 = ReplacementRule(pattern481, lambda e, f, q, c, x, b, a, d : Mul(Add(Mul(b, f, Add(Mul(Integer(2), q), Integer(3))), Mul(Integer(-1), Mul(c, e, Add(q, Integer(2)))), Mul(Integer(2), c, f, Add(q, Integer(1)), x)), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(q, Integer(1)), Add(Mul(Integer(2), q), Integer(3))), Integer(-1)))))
    rubi.add(rule481)

    pattern482 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(Integer(2), a_, Pow(f_, Integer(2)), Add(Mul(Integer(2), q_), Integer(3))), Mul(c_, Add(Mul(Pow(e_, Integer(2)), Add(q_, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d_, f_)))))), NonzeroQ(Add(q_, Integer(1))), NonzeroQ(Add(Mul(Integer(2), q_), Integer(3)))), (f, e, q, c, x, a, d)))
    rule482 = ReplacementRule(pattern482, lambda f, e, q, c, x, a, d : Mul(Add(Mul(Mul(Integer(-1), c), e, Add(q, Integer(2))), Mul(Integer(2), c, f, Add(q, Integer(1)), x)), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(q, Integer(1)), Add(Mul(Integer(2), q), Integer(3))), Integer(-1)))))
    rubi.add(rule482)

    pattern483 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(q, x), cons(And(NonzeroQ(Add(q_, Integer(1))), ZeroQ(Add(Mul(Integer(3), a_, f_), Mul(Integer(-1), Mul(c_, d_)), Mul(Integer(2), a_, f_, q_)))), (f, q, c, x, b, a, d)))
    rule483 = ReplacementRule(pattern483, lambda f, q, c, x, b, a, d : Mul(Add(Mul(b, d), Mul(Integer(2), a, f, Add(q, Integer(1)), x)), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), d, f, Add(q, Integer(1))), Integer(-1)))))
    rubi.add(rule483)

    pattern484 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(q, x), cons(And(PositiveIntegerQ(Add(q_, Integer(2)))), (f, q, c, x, b, a, d)))
    rule484 = ReplacementRule(pattern484, lambda f, q, c, x, b, a, d : Add(Mul(b, Int(Mul(x, Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q)), x)), Int(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q)), x)))
    rubi.add(rule484)

    pattern485 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), PositiveIntegerQ(Add(q_, Integer(2)))), (e, f, q, c, x, b, a, d)))
    rule485 = ReplacementRule(pattern485, lambda e, f, q, c, x, b, a, d : Int(ExpandIntegrand(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q)), x), x))
    rubi.add(rule485)

    pattern486 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), PositiveIntegerQ(Add(q_, Integer(2)))), (f, e, q, c, x, a, d)))
    rule486 = ReplacementRule(pattern486, lambda f, e, q, c, x, a, d : Int(ExpandIntegrand(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q)), x), x))
    rubi.add(rule486)

    pattern487 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(q_), Less(q_, Integer(-1)), NonzeroQ(Add(Mul(f_, Add(Mul(Integer(2), a_, f_), Mul(Integer(-1), Mul(b_, e_))), Add(Mul(Integer(2), q_), Integer(3))), Mul(c_, Add(Mul(Pow(e_, Integer(2)), Add(q_, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d_, f_))))))), (e, f, q, c, x, b, a, d)))
    rule487 = ReplacementRule(pattern487, lambda e, f, q, c, x, b, a, d : Add(Mul(Add(Mul(a, e, f), Mul(Integer(-1), Mul(Integer(2), b, d, f)), Mul(c, d, e), Mul(Add(Mul(f, Add(Mul(Integer(2), a, f), Mul(Integer(-1), Mul(b, e)))), Mul(c, Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(2), d, f))))), x)), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(f, Add(q, Integer(1)), Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(f, Add(Mul(Integer(2), a, f), Mul(Integer(-1), Mul(b, e))), Add(Mul(Integer(2), q), Integer(3))), Mul(c, Add(Mul(Pow(e, Integer(2)), Add(q, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d, f))))), Pow(Mul(f, Add(q, Integer(1)), Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f)))), Integer(-1))), Int(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), x)))))
    rubi.add(rule487)

    pattern488 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(q_), Less(q_, Integer(-1)), NonzeroQ(Add(Mul(Integer(2), a_, Pow(f_, Integer(2)), Add(Mul(Integer(2), q_), Integer(3))), Mul(c_, Add(Mul(Pow(e_, Integer(2)), Add(q_, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d_, f_))))))), (f, e, q, c, x, a, d)))
    rule488 = ReplacementRule(pattern488, lambda f, e, q, c, x, a, d : Add(Mul(Add(Mul(a, e, f), Mul(c, d, e), Mul(Add(Mul(Integer(2), a, Pow(f, Integer(2))), Mul(c, Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(2), d, f))))), x)), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(f, Add(q, Integer(1)), Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(Integer(2), a, Pow(f, Integer(2)), Add(Mul(Integer(2), q), Integer(3))), Mul(c, Add(Mul(Pow(e, Integer(2)), Add(q, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d, f))))), Pow(Mul(f, Add(q, Integer(1)), Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f)))), Integer(-1))), Int(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), x)))))
    rubi.add(rule488)

    pattern489 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), cons(And(RationalQ(q_), Less(q_, Integer(-1)), NonzeroQ(Add(Mul(Integer(3), a_, f_), Mul(Integer(-1), Mul(c_, d_)), Mul(Integer(2), a_, f_, q_)))), (f, q, c, x, b, a, d)))
    rule489 = ReplacementRule(pattern489, lambda f, q, c, x, b, a, d : Add(Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(Add(Mul(a, f), Mul(Integer(-1), Mul(c, d))), x))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), d, f, Add(q, Integer(1))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(3), a, f), Mul(Integer(-1), Mul(c, d)), Mul(Integer(2), a, f, q)), Pow(Mul(Integer(2), d, f, Add(q, Integer(1))), Integer(-1))), Int(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), x))))
    rubi.add(rule489)

    pattern490 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), Not(PositiveIntegerQ(q_)), Not(And(RationalQ(q_), LessEqual(q_, Integer(-1)))), NonzeroQ(Add(Mul(f_, Add(Mul(Integer(2), a_, f_), Mul(Integer(-1), Mul(b_, e_))), Add(Mul(Integer(2), q_), Integer(3))), Mul(c_, Add(Mul(Pow(e_, Integer(2)), Add(q_, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d_, f_))))))), (e, f, q, c, x, b, a, d)))
    rule490 = ReplacementRule(pattern490, lambda e, f, q, c, x, b, a, d : Add(Mul(Add(Mul(b, f, Add(Mul(Integer(2), q), Integer(3))), Mul(Integer(-1), Mul(c, e, Add(q, Integer(2)))), Mul(Integer(2), c, f, Add(q, Integer(1)), x)), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(q, Integer(1)), Add(Mul(Integer(2), q), Integer(3))), Integer(-1)))), Mul(Mul(Add(Mul(f, Add(Mul(Integer(2), a, f), Mul(Integer(-1), Mul(b, e))), Add(Mul(Integer(2), q), Integer(3))), Mul(c, Add(Mul(Pow(e, Integer(2)), Add(q, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d, f))))), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(Mul(Integer(2), q), Integer(3))), Integer(-1))), Int(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), x))))
    rubi.add(rule490)

    pattern491 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(a, x), FreeQ(c, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), Not(PositiveIntegerQ(q_)), Not(And(RationalQ(q_), LessEqual(q_, Integer(-1)))), NonzeroQ(Add(Mul(Integer(2), a_, Pow(f_, Integer(2)), Add(Mul(Integer(2), q_), Integer(3))), Mul(c_, Add(Mul(Pow(e_, Integer(2)), Add(q_, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d_, f_))))))), (f, e, q, c, x, a, d)))
    rule491 = ReplacementRule(pattern491, lambda f, e, q, c, x, a, d : Add(Mul(Add(Mul(Mul(Integer(-1), c), e, Add(q, Integer(2))), Mul(Integer(2), c, f, Add(q, Integer(1)), x)), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(q, Integer(1)), Add(Mul(Integer(2), q), Integer(3))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(2), a, Pow(f, Integer(2)), Add(Mul(Integer(2), q), Integer(3))), Mul(c, Add(Mul(Pow(e, Integer(2)), Add(q, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d, f))))), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(Mul(Integer(2), q), Integer(3))), Integer(-1))), Int(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), x))))
    rubi.add(rule491)

    pattern492 = Pattern(Int(Mul(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), FreeQ(d, x), FreeQ(f, x), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(q, x), cons(And(Not(PositiveIntegerQ(q_)), Not(And(RationalQ(q_), LessEqual(q_, Integer(-1)))), NonzeroQ(Add(Mul(Integer(3), a_, f_), Mul(Integer(-1), Mul(c_, d_)), Mul(Integer(2), a_, f_, q_)))), (f, q, c, x, b, a, d)))
    rule492 = ReplacementRule(pattern492, lambda f, q, c, x, b, a, d : Add(Mul(Add(Mul(b, f, Add(Mul(Integer(2), q), Integer(3))), Mul(Integer(2), c, f, Add(q, Integer(1)), x)), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(q, Integer(1)), Add(Mul(Integer(2), q), Integer(3))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(3), a, f), Mul(Integer(-1), Mul(c, d)), Mul(Integer(2), a, f, q)), Pow(Mul(f, Add(Mul(Integer(2), q), Integer(3))), Integer(-1))), Int(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), x))))
    rubi.add(rule492)

    pattern493 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (e, f, q, c, x, b, p, a, d)))
    rule493 = ReplacementRule(pattern493, lambda e, f, q, c, x, b, p, a, d : Add(Mul(Add(b, Mul(Integer(2), c, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(Integer(2), c, d, Add(Mul(Integer(2), p), Integer(3))), Mul(b, e, q), Mul(Add(Mul(Integer(2), b, f, q), Mul(Integer(2), c, e, Add(Mul(Integer(2), p), q, Integer(3)))), x), Mul(Integer(2), c, f, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule493)

    pattern494 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (f, q, c, x, b, p, a, d)))
    rule494 = ReplacementRule(pattern494, lambda f, q, c, x, b, p, a, d : Add(Mul(Add(b, Mul(Integer(2), c, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(Integer(2), c, d, Add(Mul(Integer(2), p), Integer(3))), Mul(Mul(Integer(2), b, f, q), x), Mul(Integer(2), c, f, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule494)

    pattern495 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (f, e, q, c, x, p, a, d)))
    rule495 = ReplacementRule(pattern495, lambda f, e, q, c, x, p, a, d : Add(Mul(Mul(Integer(2), c, x), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(Mul(Integer(-4), a, c), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Mul(Integer(-4), a, c), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(Integer(2), c, d, Add(Mul(Integer(2), p), Integer(3))), Mul(Mul(Integer(2), c, e, Add(Mul(Integer(2), p), q, Integer(3))), x), Mul(Integer(2), c, f, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule495)

    pattern496 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_))), Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_))))))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (e, f, q, c, x, b, p, a, d)))
    rule496 = ReplacementRule(pattern496, lambda e, f, q, c, x, b, p, a, d : Add(Mul(Add(Mul(Integer(2), a, Pow(c, Integer(2)), e), Mul(Integer(-1), Mul(Pow(b, Integer(2)), c, e)), Mul(Pow(b, Integer(3)), f), Mul(b, c, Add(Mul(c, d), Mul(Integer(-1), Mul(Integer(3), a, f)))), Mul(c, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Integer(2), c, Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2))))))), Mul(Integer(-1), Mul(e, Add(Mul(Pow(b, Integer(2)), c, e), Mul(Integer(-1), Mul(Integer(2), a, Pow(c, Integer(2)), e)), Mul(Integer(-1), Mul(Pow(b, Integer(3)), f)), Mul(Integer(-1), Mul(b, c, Add(Mul(c, d), Mul(Integer(-1), Mul(Integer(3), a, f)))))), Add(p, q, Integer(2)))), Mul(Add(Mul(Integer(2), f, Add(Mul(Integer(2), a, Pow(c, Integer(2)), e), Mul(Integer(-1), Mul(Pow(b, Integer(2)), c, e)), Mul(Pow(b, Integer(3)), f), Mul(b, c, Add(Mul(c, d), Mul(Integer(-1), Mul(Integer(3), a, f))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))), Add(Mul(b, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, e, Add(Mul(Integer(2), p), q, Integer(4)))))))), x), Mul(c, f, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule496)

    pattern497 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(Pow(b_, Integer(2)), d_, f_), Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (f, q, c, x, b, p, a, d)))
    rule497 = ReplacementRule(pattern497, lambda f, q, c, x, b, p, a, d : Add(Mul(Add(Mul(Pow(b, Integer(3)), f), Mul(b, c, Add(Mul(c, d), Mul(Integer(-1), Mul(Integer(3), a, f)))), Mul(c, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(Pow(b, Integer(2)), d, f), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(Pow(b, Integer(2)), d, f), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Integer(2), c, Add(Mul(Pow(b, Integer(2)), d, f), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2))))))), Mul(Add(Mul(Integer(2), f, Add(Mul(Pow(b, Integer(3)), f), Mul(b, c, Add(Mul(c, d), Mul(Integer(-1), Mul(Integer(3), a, f))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))), Mul(b, f, Add(p, Integer(1)))))), x), Mul(c, f, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule497)

    pattern498 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(a_, c_, Pow(e_, Integer(2))), Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (f, e, q, c, x, p, a, d)))
    rule498 = ReplacementRule(pattern498, lambda f, e, q, c, x, p, a, d : Add(Mul(Add(Mul(Integer(2), a, Pow(c, Integer(2)), e), Mul(c, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))), x)), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Mul(Integer(-4), a, c), Add(Mul(a, c, Pow(e, Integer(2))), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Mul(Integer(-4), a, c), Add(Mul(a, c, Pow(e, Integer(2))), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Integer(2), c, Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Mul(Mul(Integer(-1), a), e), Mul(c, e)))), Add(p, Integer(1))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2))))))), Mul(Integer(-1), Mul(e, Mul(Integer(-2), a, Pow(c, Integer(2)), e), Add(p, q, Integer(2)))), Mul(Add(Mul(Integer(2), f, Mul(Integer(2), a, Pow(c, Integer(2)), e), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))), Mul(Mul(Integer(-1), c), e, Add(Mul(Integer(2), p), q, Integer(4)))))), x), Mul(c, f, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule498)

    pattern499 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Greater(p_, Integer(1)), NonzeroQ(Add(p_, q_)), NonzeroQ(Add(Mul(Integer(2), p_), Mul(Integer(2), q_), Integer(1)))), (e, f, q, c, x, b, p, a, d)))
    rule499 = ReplacementRule(pattern499, lambda e, f, q, c, x, b, p, a, d : Add(Mul(Add(Mul(b, f, Add(Mul(Integer(3), p), Mul(Integer(2), q))), Mul(Integer(-1), Mul(c, e, Add(Mul(Integer(2), p), q))), Mul(Integer(2), c, f, Add(p, q), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(p, q), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(p, q), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-2))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(Integer(1), Mul(Integer(-1), p)), Add(Mul(Integer(2), p), q)), Mul(Integer(-1), Mul(Add(p, q), Add(Mul(Pow(b, Integer(2)), d, f, Add(Integer(1), Mul(Integer(-1), p))), Mul(Integer(-1), Mul(a, Add(Mul(f, Add(Mul(b, e), Mul(Integer(-1), Mul(Integer(2), a, f))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1))), Mul(c, Add(Mul(Integer(2), d, f), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Add(Mul(Integer(2), p), q))))))))))), Mul(Add(Mul(Integer(2), Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(Integer(1), Mul(Integer(-1), p)), Add(Mul(Integer(2), p), q)), Mul(Integer(-1), Mul(Add(p, q), Add(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), e, f, Add(Integer(1), Mul(Integer(-1), p))), Mul(b, Add(Mul(c, Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f))), Add(Mul(Integer(2), p), q)), Mul(f, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(2), a, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1))))))))), x), Mul(Add(Mul(Pow(Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Integer(2)), Add(Integer(1), Mul(Integer(-1), p)), p), Mul(c, Add(p, q), Add(Mul(f, Add(Mul(b, e), Mul(Integer(-1), Mul(Integer(2), a, f))), Add(Mul(Integer(4), p), Mul(Integer(2), q), Integer(-1))), Mul(Integer(-1), Mul(c, Add(Mul(Integer(2), d, f, Add(Integer(1), Mul(Integer(-1), Mul(Integer(2), p)))), Mul(Pow(e, Integer(2)), Add(Mul(Integer(3), p), q, Integer(-1))))))))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule499)

    pattern500 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Greater(p_, Integer(1)), NonzeroQ(Add(p_, q_)), NonzeroQ(Add(Mul(Integer(2), p_), Mul(Integer(2), q_), Integer(1)))), (f, q, c, x, b, p, a, d)))
    rule500 = ReplacementRule(pattern500, lambda f, q, c, x, b, p, a, d : Add(Mul(Add(Mul(b, Add(Mul(Integer(3), p), Mul(Integer(2), q))), Mul(Integer(2), c, Add(p, q), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), f, Add(p, q), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), f, Add(p, q), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-2))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Pow(b, Integer(2)), d, Add(p, Integer(-1)), Add(Mul(Integer(2), p), q)), Mul(Integer(-1), Mul(Add(p, q), Add(Mul(Pow(b, Integer(2)), d, Add(Integer(1), Mul(Integer(-1), p))), Mul(Integer(-1), Mul(Integer(2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1)))))))))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), b, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Integer(1), Mul(Integer(-1), p)), Add(Mul(Integer(2), p), q)), Mul(Integer(-1), Mul(Integer(2), Add(p, q), b, Add(Mul(Integer(2), c, d, Add(Mul(Integer(2), p), q)), Mul(Integer(-1), Mul(Add(Mul(c, d), Mul(a, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1)))))))), x)), Mul(Add(Mul(Pow(b, Integer(2)), f, p, Add(Integer(1), Mul(Integer(-1), p))), Mul(Integer(2), c, Add(p, q), Add(Mul(c, d, Add(Mul(Integer(2), p), Integer(-1))), Mul(Integer(-1), Mul(a, f, Add(Mul(Integer(4), p), Mul(Integer(2), q), Integer(-1))))))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule500)

    pattern501 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Greater(p_, Integer(1)), NonzeroQ(Add(p_, q_)), NonzeroQ(Add(Mul(Integer(2), p_), Mul(Integer(2), q_), Integer(1)))), (f, e, q, c, x, p, a, d)))
    rule501 = ReplacementRule(pattern501, lambda f, e, q, c, x, p, a, d : Add(Mul(Mul(Integer(-1), c), Add(Mul(e, Add(Mul(Integer(2), p), q)), Mul(Integer(-1), Mul(Integer(2), f, Add(p, q), x))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(p, q), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), Pow(f, Integer(2)), Add(p, q), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-2))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Mul(Integer(-1), a), c, Pow(e, Integer(2)), Add(Integer(1), Mul(Integer(-1), p)), Add(Mul(Integer(2), p), q)), Mul(a, Add(p, q), Add(Mul(Integer(-2), a, Pow(f, Integer(2)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(1))), Mul(c, Add(Mul(Integer(2), d, f), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Add(Mul(Integer(2), p), q))))))), Mul(Add(Mul(Integer(2), Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Mul(c, e), Add(Integer(1), Mul(Integer(-1), p)), Add(Mul(Integer(2), p), q)), Mul(Integer(4), a, c, e, f, Add(Integer(1), Mul(Integer(-1), p)), Add(p, q))), x), Mul(Add(Mul(p, Pow(c, Integer(2)), Pow(e, Integer(2)), Add(Integer(1), Mul(Integer(-1), p))), Mul(Integer(-1), Mul(c, Add(p, q), Add(Mul(Integer(2), a, Pow(f, Integer(2)), Add(Mul(Integer(4), p), Mul(Integer(2), q), Integer(-1))), Mul(c, Add(Mul(Integer(2), d, f, Add(Integer(1), Mul(Integer(-1), Mul(Integer(2), p)))), Mul(Pow(e, Integer(2)), Add(Mul(Integer(3), p), q, Integer(-1))))))))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule501)

    pattern502 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, x, b, a, d)))
    rule502 = ReplacementRule(pattern502, lambda e, f, c, x, b, a, d : With(List(Set(Integer(q), Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, c, d, e)), Mul(a, c, Pow(e, Integer(2))), Mul(Pow(b, Integer(2)), d, f), Mul(Integer(-1), Mul(Integer(2), a, c, d, f)), Mul(Integer(-1), Mul(a, b, e, f)), Mul(Pow(a, Integer(2)), Pow(f, Integer(2)))))), Condition(Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(b, c, e)), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(a, c, f)), Mul(Integer(-1), Mul(Add(Mul(Pow(c, Integer(2)), e), Mul(Integer(-1), Mul(b, c, f))), x))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(c, Pow(e, Integer(2))), Mul(Integer(-1), Mul(c, d, f)), Mul(Integer(-1), Mul(b, e, f)), Mul(a, Pow(f, Integer(2))), Mul(Add(Mul(c, e, f), Mul(Integer(-1), Mul(b, Pow(f, Integer(2))))), x)), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Integer(-1))), x))), NonzeroQ(Integer(q)))))
    rubi.add(rule502)

    pattern503 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, b, a, d)))
    rule503 = ReplacementRule(pattern503, lambda f, c, x, b, a, d : With(List(Set(Integer(q), Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2))), Mul(Pow(b, Integer(2)), d, f), Mul(Integer(-1), Mul(Integer(2), a, c, d, f)), Mul(Pow(a, Integer(2)), Pow(f, Integer(2)))))), Condition(Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(a, c, f)), Mul(b, c, f, x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(c, d, f), Mul(Integer(-1), Mul(a, Pow(f, Integer(2)))), Mul(b, Pow(f, Integer(2)), x)), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Integer(-1))), x)))), NonzeroQ(Integer(q)))))
    rubi.add(rule503)

    pattern504 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), ZeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_))))), (e, f, c, x, b, a, d)))
    rule504 = ReplacementRule(pattern504, lambda e, f, c, x, b, a, d : Mul(Integer(-2), e, Subst(Int(Mul(Integer(1), Pow(Add(Mul(e, Add(Mul(b, e), Mul(Integer(-1), Mul(Integer(4), a, f)))), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(Add(e, Mul(Integer(2), f, x)), Pow(Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule504)

    pattern505 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NonzeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_)))), PosQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, f, c, x, b, a, d)))
    rule505 = ReplacementRule(pattern505, lambda e, f, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, x)), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(b, Integer(q), Mul(Integer(2), c, x)), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule505)

    pattern506 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), PosQ(Mul(Mul(Integer(-1), a_), c_))), (f, e, c, x, a, d)))
    rule506 = ReplacementRule(pattern506, lambda f, e, c, x, a, d : Add(Mul(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(a, Mul(Integer(-1), Mul(Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), x))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(a, Mul(Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), x)), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule506)

    pattern507 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PosQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, b, a, d)))
    rule507 = ReplacementRule(pattern507, lambda f, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, x)), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(b, Integer(q), Mul(Integer(2), c, x)), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule507)

    pattern508 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NonzeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_)))), NegQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, f, c, x, b, a, d)))
    rule508 = ReplacementRule(pattern508, lambda e, f, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Integer(q), Mul(Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), x)), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Integer(q)), Mul(Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), x)), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule508)

    pattern509 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NegQ(Mul(Mul(Integer(-1), a_), c_))), (f, e, c, x, a, d)))
    rule509 = ReplacementRule(pattern509, lambda f, e, c, x, a, d : With(List(Set(Integer(q), Rt(Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(a, c, Pow(e, Integer(2)))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Integer(q), Mul(c, e, x)), Pow(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Integer(q)), Mul(c, e, x)), Pow(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule509)

    pattern510 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, b, a, d)))
    rule510 = ReplacementRule(pattern510, lambda f, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Pow(b, Integer(2)), d, f)), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Integer(q), Mul(Mul(Mul(Integer(-1), b), f), x)), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Integer(q)), Mul(Mul(Mul(Integer(-1), b), f), x)), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule510)

    pattern511 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, x, b, a, d)))
    rule511 = ReplacementRule(pattern511, lambda e, f, c, x, b, a, d : Add(Mul(Mul(c, Pow(f, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(f, Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), x)), Pow(Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)))))
    rubi.add(rule511)

    pattern512 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, b, a, d)))
    rule512 = ReplacementRule(pattern512, lambda f, c, x, b, a, d : Add(Mul(Mul(c, Pow(f, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(f, Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Mul(b, f, x))), Pow(Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Add(d, Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)))))
    rubi.add(rule512)

    pattern513 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (f, e, c, x, a, d)))
    rule513 = ReplacementRule(pattern513, lambda f, e, c, x, a, d : Add(Mul(Mul(c, Pow(f, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(f, Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(c, e, x)), Pow(Mul(Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))), Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)))))
    rubi.add(rule513)

    pattern514 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, x, b, a, d)))
    rule514 = ReplacementRule(pattern514, lambda e, f, c, x, b, a, d : With(List(Set(Integer(r), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Sqrt(Add(b, Integer(r), Mul(Integer(2), c, x))), Mul(Sqrt(Add(Mul(Integer(2), a), Mul(Add(b, Integer(r)), x))), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(b, Integer(r), Mul(Integer(2), c, x))), Sqrt(Add(Mul(Integer(2), a), Mul(Add(b, Integer(r)), x))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule514)

    pattern515 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, b, a, d)))
    rule515 = ReplacementRule(pattern515, lambda f, c, x, b, a, d : With(List(Set(Integer(r), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Sqrt(Add(b, Integer(r), Mul(Integer(2), c, x))), Mul(Sqrt(Add(Mul(Integer(2), a), Mul(Add(b, Integer(r)), x))), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(b, Integer(r), Mul(Integer(2), c, x))), Sqrt(Add(Mul(Integer(2), a), Mul(Add(b, Integer(r)), x))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule515)

    pattern516 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), cons((Mul(Pow(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2)))), q_)), x_), (e, f, q, c, x, b, p, a, d)))
    rule516 = ReplacementRule(pattern516, lambda e, f, q, c, x, b, p, a, d : Defer(Integer(Int)))
    rubi.add(rule516)

    pattern517 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), cons((Mul(Pow(Add(a_, Mul(c_, Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2)))), q_)), x_), (f, e, q, c, x, p, a, d)))
    rule517 = ReplacementRule(pattern517, lambda f, e, q, c, x, p, a, d : Defer(Integer(Int)))
    rubi.add(rule517)

    pattern518 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, f, q, c, x, u, b, p, a, d)))
    rule518 = ReplacementRule(pattern518, lambda e, f, q, c, x, u, b, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q)), x), x, u)))
    rubi.add(rule518)

    pattern519 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, f, q, c, x, u, p, a, d)))
    rule519 = ReplacementRule(pattern519, lambda e, f, q, c, x, u, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q)), x), x, u)))
    rubi.add(rule519)

    pattern520 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), Or(IntegerQ(p_), PositiveQ(Mul(c_, Pow(f_, Integer(-1))))), Or(Not(IntegerQ(q_)), LessEqual(LeafCount(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2))))), LeafCount(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2)))))))), (e, f, q, c, g, x, m, b, p, a, h, d)))
    rule520 = ReplacementRule(pattern520, lambda e, f, q, c, g, x, m, b, p, a, h, d : Mul(Pow(Mul(c, Pow(f, Integer(-1))), p), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q))), x)))
    rubi.add(rule520)

    pattern521 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), Not(IntegerQ(p_)), Not(IntegerQ(q_)), Not(PositiveQ(Mul(c_, Pow(f_, Integer(-1)))))), (e, f, q, c, g, x, m, b, p, a, h, d)))
    rule521 = ReplacementRule(pattern521, lambda e, f, q, c, g, x, m, b, p, a, h, d : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(d, IntPart(p)), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q))), x)))
    rubi.add(rule521)

    pattern522 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, f, q, c, g, x, m, b, p, a, h, d)))
    rule522 = ReplacementRule(pattern522, lambda e, f, q, c, g, x, m, b, p, a, h, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), p)), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q)), x)))
    rubi.add(rule522)

    pattern523 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, q, c, g, x, m, b, p, a, h, d)))
    rule523 = ReplacementRule(pattern523, lambda f, q, c, g, x, m, b, p, a, h, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), p)), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q)), x)))
    rubi.add(rule523)

    pattern524 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(b_, g_, h_)), Mul(a_, Pow(h_, Integer(2))))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), d_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(a_, c_, e_, g_, h_)), Mul(Pow(a_, Integer(2)), f_, Pow(h_, Integer(2))))), IntegerQ(m_)), (e, f, c, g, x, m, b, p, a, h, d)))
    rule524 = ReplacementRule(pattern524, lambda e, f, c, g, x, m, b, p, a, h, d : Int(Mul(Pow(Add(Mul(d, Mul(g, Pow(a, Integer(-1)))), Mul(f, h, Mul(x, Pow(c, Integer(-1))))), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(m, p))), x))
    rubi.add(rule524)

    pattern525 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(a_, Pow(h_, Integer(2))))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), d_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(a_, c_, e_, g_, h_)), Mul(Pow(a_, Integer(2)), f_, Pow(h_, Integer(2))))), IntegerQ(m_)), (e, f, c, g, x, m, p, a, h, d)))
    rule525 = ReplacementRule(pattern525, lambda e, f, c, g, x, m, p, a, h, d : Int(Mul(Pow(Add(Mul(d, Mul(g, Pow(a, Integer(-1)))), Mul(f, h, Mul(x, Pow(c, Integer(-1))))), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(m, p))), x))
    rubi.add(rule525)

    pattern526 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(b_, g_, h_)), Mul(a_, Pow(h_, Integer(2))))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), d_, Pow(g_, Integer(2))), Mul(Pow(a_, Integer(2)), f_, Pow(h_, Integer(2))))), IntegerQ(m_)), (f, c, g, x, m, b, p, a, h, d)))
    rule526 = ReplacementRule(pattern526, lambda f, c, g, x, m, b, p, a, h, d : Int(Mul(Pow(Add(Mul(d, Mul(g, Pow(a, Integer(-1)))), Mul(f, h, Mul(x, Pow(c, Integer(-1))))), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(m, p))), x))
    rubi.add(rule526)

    pattern527 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(a_, Pow(h_, Integer(2))))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), d_, Pow(g_, Integer(2))), Mul(Pow(a_, Integer(2)), f_, Pow(h_, Integer(2))))), IntegerQ(m_)), (f, c, g, x, m, p, a, h, d)))
    rule527 = ReplacementRule(pattern527, lambda f, c, g, x, m, p, a, h, d : Int(Mul(Pow(Add(Mul(d, Mul(g, Pow(a, Integer(-1)))), Mul(f, h, Mul(x, Pow(c, Integer(-1))))), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(m, p))), x))
    rubi.add(rule527)

    pattern528 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(e_, Integer(2))), Mul(Integer(-1), Mul(b_, e_, f_)), Mul(a_, Pow(f_, Integer(2))))), IntegerQ(p_)), (e, f, q, c, x, p, b, a)))
    rule528 = ReplacementRule(pattern528, lambda e, f, q, c, x, p, b, a : Int(Mul(Pow(Add(Mul(a, Pow(e, Integer(-1))), Mul(Mul(c, Pow(f, Integer(-1))), x)), p), Pow(Add(Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q))), x))
    rubi.add(rule528)

    pattern529 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('p', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(c_, Pow(e_, Integer(2))), Mul(a_, Pow(f_, Integer(2))))), IntegerQ(p_)), (e, f, q, c, x, p, a)))
    rule529 = ReplacementRule(pattern529, lambda e, f, q, c, x, p, a : Int(Mul(Pow(Add(Mul(a, Pow(e, Integer(-1))), Mul(Mul(c, Pow(f, Integer(-1))), x)), p), Pow(Add(Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q))), x))
    rubi.add(rule529)

    pattern530 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, f_, h_, Add(m_, p_, Integer(2))), Mul(c_, Add(Mul(Integer(2), f_, g_, Add(p_, Integer(1))), Mul(Integer(-1), Mul(e_, h_, Add(m_, Mul(Integer(2), p_), Integer(3)))))))), ZeroQ(Add(Mul(b_, f_, g_, Add(p_, Integer(1))), Mul(h_, Add(Mul(a_, f_, Add(m_, Integer(1))), Mul(Integer(-1), Mul(c_, d_, Add(m_, Mul(Integer(2), p_), Integer(3)))))))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, b, p, a, h, d)))
    rule530 = ReplacementRule(pattern530, lambda e, f, c, g, x, m, b, p, a, h, d : Mul(f, Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1)))))
    rubi.add(rule530)

    pattern531 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Mul(c_, Add(Mul(Integer(2), f_, g_, Add(p_, Integer(1))), Mul(Integer(-1), Mul(e_, h_, Add(m_, Mul(Integer(2), p_), Integer(3))))))), ZeroQ(Mul(h_, Add(Mul(a_, f_, Add(m_, Integer(1))), Mul(Integer(-1), Mul(c_, d_, Add(m_, Mul(Integer(2), p_), Integer(3))))))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, p, a, h, d)))
    rule531 = ReplacementRule(pattern531, lambda e, f, c, g, x, m, p, a, h, d : Mul(f, Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1)))))
    rubi.add(rule531)

    pattern532 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, f_, h_, Add(m_, p_, Integer(2))), Mul(c_, Mul(Integer(2), f_, g_, Add(p_, Integer(1)))))), ZeroQ(Add(Mul(b_, f_, g_, Add(p_, Integer(1))), Mul(h_, Add(Mul(a_, f_, Add(m_, Integer(1))), Mul(Integer(-1), Mul(c_, d_, Add(m_, Mul(Integer(2), p_), Integer(3)))))))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (f, c, g, x, m, b, p, a, h, d)))
    rule532 = ReplacementRule(pattern532, lambda f, c, g, x, m, b, p, a, h, d : Mul(f, Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1)))))
    rubi.add(rule532)

    pattern533 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), Or(IntegersQ(m_, p_), PositiveIntegerQ(p_))), (e, f, c, g, x, m, b, p, a, h, d)))
    rule533 = ReplacementRule(pattern533, lambda e, f, c, g, x, m, b, p, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), x), x))
    rubi.add(rule533)

    pattern534 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), Or(IntegersQ(m_, p_), PositiveIntegerQ(p_))), (e, f, c, g, x, m, p, a, h, d)))
    rule534 = ReplacementRule(pattern534, lambda e, f, c, g, x, m, p, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), x), x))
    rubi.add(rule534)

    pattern535 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Or(IntegersQ(m_, p_), PositiveIntegerQ(p_))), (f, c, g, x, m, b, p, a, h, d)))
    rule535 = ReplacementRule(pattern535, lambda f, c, g, x, m, b, p, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Add(d, Mul(f, Pow(x, Integer(2))))), x), x))
    rubi.add(rule535)

    pattern536 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(Or(IntegersQ(m_, p_), PositiveIntegerQ(p_))), (f, c, g, x, m, p, a, h, d)))
    rule536 = ReplacementRule(pattern536, lambda f, c, g, x, m, p, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Add(d, Mul(f, Pow(x, Integer(2))))), x), x))
    rubi.add(rule536)

    pattern537 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(m_), Less(m_, Integer(-1)), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(b_, g_, h_)), Mul(a_, Pow(h_, Integer(2)))))), (e, f, c, g, x, m, b, p, a, h, d)))
    rule537 = ReplacementRule(pattern537, lambda e, f, c, g, x, m, b, p, a, h, d : Add(Mul(Add(Mul(f, Pow(g, Integer(2))), Mul(Integer(-1), Mul(e, g, h)), Mul(d, Pow(h, Integer(2)))), Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(h, Add(m, Integer(1)), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(b, g, h)), Mul(a, Pow(h, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(h, Add(m, Integer(1)), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(b, g, h)), Mul(a, Pow(h, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(h, Add(Mul(c, d, g), Mul(Integer(-1), Mul(a, f, g)), Mul(a, e, h)), Add(m, Integer(1))), Mul(Integer(-1), Mul(b, Add(Mul(f, Pow(g, Integer(2)), Add(p, Integer(1))), Mul(Integer(-1), Mul(h, Add(Mul(e, g, Add(p, Integer(1))), Mul(Integer(-1), Mul(d, h, Add(m, p, Integer(2)))))))))), Mul(Integer(-1), Mul(Add(Mul(f, h, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(m, Integer(1))), Mul(c, Add(Mul(Integer(2), f, Pow(g, Integer(2)), Add(p, Integer(1))), Mul(Integer(-1), Mul(h, Add(Mul(e, g), Mul(Integer(-1), Mul(d, h))), Add(m, Mul(Integer(2), p), Integer(3))))))), x))), x)), x))))
    rubi.add(rule537)

    pattern538 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(m_), Less(m_, Integer(-1)), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(a_, Pow(h_, Integer(2)))))), (e, f, c, g, x, m, p, a, h, d)))
    rule538 = ReplacementRule(pattern538, lambda e, f, c, g, x, m, p, a, h, d : Add(Mul(Add(Mul(f, Pow(g, Integer(2))), Mul(Integer(-1), Mul(e, g, h)), Mul(d, Pow(h, Integer(2)))), Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(h, Add(m, Integer(1)), Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(h, Add(m, Integer(1)), Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(h, Add(Mul(c, d, g), Mul(Integer(-1), Mul(a, f, g)), Mul(a, e, h)), Add(m, Integer(1))), Mul(Add(Mul(a, f, Pow(h, Integer(2)), Add(m, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(Integer(2), f, Pow(g, Integer(2)), Add(p, Integer(1))), Mul(Integer(-1), Mul(h, Add(Mul(e, g), Mul(Integer(-1), Mul(d, h))), Add(m, Mul(Integer(2), p), Integer(3)))))))), x)), x)), x))))
    rubi.add(rule538)

    pattern539 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(m_), Less(m_, Integer(-1)), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(b_, g_, h_)), Mul(a_, Pow(h_, Integer(2)))))), (f, c, g, x, m, b, p, a, h, d)))
    rule539 = ReplacementRule(pattern539, lambda f, c, g, x, m, b, p, a, h, d : Add(Mul(Add(Mul(f, Pow(g, Integer(2))), Mul(d, Pow(h, Integer(2)))), Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(h, Add(m, Integer(1)), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(b, g, h)), Mul(a, Pow(h, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(h, Add(m, Integer(1)), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(b, g, h)), Mul(a, Pow(h, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(h, Add(Mul(c, d, g), Mul(Integer(-1), Mul(a, f, g))), Add(m, Integer(1))), Mul(Integer(-1), Mul(b, Add(Mul(f, Pow(g, Integer(2)), Add(p, Integer(1))), Mul(d, Pow(h, Integer(2)), Add(m, p, Integer(2)))))), Mul(Integer(-1), Mul(Add(Mul(f, h, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h))), Add(m, Integer(1))), Mul(c, Add(Mul(Integer(2), f, Pow(g, Integer(2)), Add(p, Integer(1))), Mul(d, Pow(h, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3)))))), x))), x)), x))))
    rubi.add(rule539)

    pattern540 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(RationalQ(m_), Less(m_, Integer(-1)), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(a_, Pow(h_, Integer(2)))))), (f, c, g, x, m, p, a, h, d)))
    rule540 = ReplacementRule(pattern540, lambda f, c, g, x, m, p, a, h, d : Add(Mul(Add(Mul(f, Pow(g, Integer(2))), Mul(d, Pow(h, Integer(2)))), Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(h, Add(m, Integer(1)), Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2))))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(h, Add(m, Integer(1)), Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(h, Add(Mul(c, d, g), Mul(Integer(-1), Mul(a, f, g))), Add(m, Integer(1))), Mul(Add(Mul(a, f, Pow(h, Integer(2)), Add(m, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(Integer(2), f, Pow(g, Integer(2)), Add(p, Integer(1))), Mul(d, Pow(h, Integer(2)), Add(m, Mul(Integer(2), p), Integer(3))))))), x)), x)), x))))
    rubi.add(rule540)

    pattern541 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-3), Integer(2))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(b_, g_, h_)), Mul(a_, Pow(h_, Integer(2)))))), (e, f, c, g, x, b, a, h, d)))
    rule541 = ReplacementRule(pattern541, lambda e, f, c, g, x, b, a, h, d : Add(Mul(Mul(Add(Mul(f, Pow(g, Integer(2))), Mul(Integer(-1), Mul(e, g, h)), Mul(d, Pow(h, Integer(2)))), Pow(Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(b, g, h)), Mul(a, Pow(h, Integer(2)))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(g, Mul(h, x)), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(b, g, h)), Mul(a, Pow(h, Integer(2)))), Integer(-1))), Int(Mul(Add(Mul(c, d, g), Mul(Integer(-1), Mul(a, f, g)), Mul(Integer(-1), Mul(b, d, h)), Mul(a, e, h), Mul(Add(Mul(c, e, g), Mul(Integer(-1), Mul(b, f, g)), Mul(Integer(-1), Mul(c, d, h)), Mul(a, f, h)), x)), Pow(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Mul(Integer(3), Pow(Integer(2), Integer(-1)))), Integer(-1))), x))))
    rubi.add(rule541)

    pattern542 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-3), Integer(2))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(a_, Pow(h_, Integer(2)))))), (e, f, c, g, x, a, h, d)))
    rule542 = ReplacementRule(pattern542, lambda e, f, c, g, x, a, h, d : Add(Mul(Mul(Add(Mul(f, Pow(g, Integer(2))), Mul(Integer(-1), Mul(e, g, h)), Mul(d, Pow(h, Integer(2)))), Pow(Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(g, Mul(h, x)), Sqrt(Add(a, Mul(c, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Integer(-1))), Int(Mul(Add(Mul(c, d, g), Mul(Integer(-1), Mul(a, f, g)), Mul(a, e, h), Mul(Add(Mul(c, e, g), Mul(Integer(-1), Mul(c, d, h)), Mul(a, f, h)), x)), Pow(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Mul(Integer(3), Pow(Integer(2), Integer(-1)))), Integer(-1))), x))))
    rubi.add(rule542)

    pattern543 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Integer(-1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-3), Integer(2))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(b_, g_, h_)), Mul(a_, Pow(h_, Integer(2)))))), (f, c, g, x, b, a, h, d)))
    rule543 = ReplacementRule(pattern543, lambda f, c, g, x, b, a, h, d : Add(Mul(Mul(Add(Mul(f, Pow(g, Integer(2))), Mul(d, Pow(h, Integer(2)))), Pow(Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(b, g, h)), Mul(a, Pow(h, Integer(2)))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(g, Mul(h, x)), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(b, g, h)), Mul(a, Pow(h, Integer(2)))), Integer(-1))), Int(Mul(Add(Mul(c, d, g), Mul(Integer(-1), Mul(a, f, g)), Mul(Integer(-1), Mul(b, d, h)), Mul(Integer(-1), Mul(Add(Mul(b, f, g), Mul(c, d, h), Mul(Integer(-1), Mul(a, f, h))), x))), Pow(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Mul(Integer(3), Pow(Integer(2), Integer(-1)))), Integer(-1))), x))))
    rubi.add(rule543)

    pattern544 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-3), Integer(2))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(a_, Pow(h_, Integer(2)))))), (f, c, g, x, a, h, d)))
    rule544 = ReplacementRule(pattern544, lambda f, c, g, x, a, h, d : Add(Mul(Mul(Add(Mul(f, Pow(g, Integer(2))), Mul(d, Pow(h, Integer(2)))), Pow(Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(g, Mul(h, x)), Sqrt(Add(a, Mul(c, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Integer(-1))), Int(Mul(Add(Mul(c, d, g), Mul(Integer(-1), Mul(a, f, g)), Mul(Integer(-1), Mul(Add(Mul(c, d, h), Mul(Integer(-1), Mul(a, f, h))), x))), Pow(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Mul(Integer(3), Pow(Integer(2), Integer(-1)))), Integer(-1))), x))))
    rubi.add(rule544)

    pattern545 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1))), (e, f, c, g, x, m, b, p, a, h, d)))
    rule545 = ReplacementRule(pattern545, lambda e, f, c, g, x, m, b, p, a, h, d : Add(Mul(Add(Mul(b, c, d), Mul(Integer(-1), Mul(Integer(2), a, c, e)), Mul(a, b, f), Mul(Add(Mul(c, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Mul(f, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c))))), x)), Pow(Add(g, Mul(h, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(h, m, Add(Mul(b, c, d), Mul(Integer(-1), Mul(Integer(2), a, c, e)), Mul(a, b, f))), Mul(g, Add(Mul(c, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Add(Mul(Integer(2), p), Integer(3))), Mul(Integer(-1), Mul(f, Add(Mul(Integer(2), a, c), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, Integer(2))))))))), Mul(h, Add(Mul(c, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Add(m, Mul(Integer(2), p), Integer(3))), Mul(Integer(-1), Mul(f, Add(Mul(Integer(2), a, c, Add(m, Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(m, p, Integer(2)))))))), x)), x)), x)))))
    rubi.add(rule545)

    pattern546 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1))), (e, f, c, g, x, m, p, a, h, d)))
    rule546 = ReplacementRule(pattern546, lambda e, f, c, g, x, m, p, a, h, d : Add(Mul(Add(Mul(a, e), Mul(Integer(-1), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), x))), Pow(Add(g, Mul(h, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(a, Add(Mul(f, g), Mul(e, h, m))), Mul(Integer(-1), Mul(c, d, g, Add(Mul(Integer(2), p), Integer(3)))), Mul(h, Add(Mul(a, f, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(Integer(2), p), Integer(3))))), x)), x)), x)))))
    rubi.add(rule546)

    pattern547 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1))), (f, c, g, x, m, b, p, a, h, d)))
    rule547 = ReplacementRule(pattern547, lambda f, c, g, x, m, b, p, a, h, d : Add(Mul(Add(Mul(b, c, d), Mul(a, b, f), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(f, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c))))), x)), Pow(Add(g, Mul(h, x)), m), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(h, m, Add(Mul(b, c, d), Mul(a, b, f))), Mul(g, Add(Mul(c, Mul(Integer(2), c, d), Add(Mul(Integer(2), p), Integer(3))), Mul(Integer(-1), Mul(f, Add(Mul(Integer(2), a, c), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, Integer(2))))))))), Mul(h, Add(Mul(Integer(2), Pow(c, Integer(2)), d, Add(m, Mul(Integer(2), p), Integer(3))), Mul(Integer(-1), Mul(f, Add(Mul(Integer(2), a, c, Add(m, Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(m, p, Integer(2)))))))), x)), x)), x)))))
    rubi.add(rule547)

    pattern548 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(1))), (f, c, g, x, m, p, a, h, d)))
    rule548 = ReplacementRule(pattern548, lambda f, c, g, x, m, p, a, h, d : Add(Mul(Mul(Integer(-1), Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), x, Pow(Add(g, Mul(h, x)), m), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(a, f, g), Mul(Integer(-1), Mul(c, d, g, Add(Mul(Integer(2), p), Integer(3)))), Mul(h, Add(Mul(a, f, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(Integer(2), p), Integer(3))))), x)), x)), x)))))
    rubi.add(rule548)

    pattern549 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(h_, Add(Mul(b_, g_), Mul(Integer(-1), Mul(a_, h_)))))))), (e, f, c, g, x, m, b, p, a, h, d)))
    rule549 = ReplacementRule(pattern549, lambda e, f, c, g, x, m, b, p, a, h, d : Add(Mul(Mul(Integer(-1), Add(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(b, g), Mul(Integer(-1), Mul(Integer(2), a, h)))), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(b, h))))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d, g), Mul(b, f, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h)))), Mul(Integer(-1), Mul(c, Add(Mul(b, e, g), Mul(Integer(2), a, f, g), Mul(b, d, h), Mul(Integer(-1), Mul(Integer(2), a, e, h)))))), x)))), Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h)))))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h)))))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(2), a, f)), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h)))))), Add(p, Integer(1))), Mul(g, Add(Mul(Pow(b, Integer(2)), f, g), Mul(Integer(-1), Mul(b, Add(Mul(c, e, g), Mul(c, d, h), Mul(a, f, h)))), Mul(Integer(2), Add(Mul(Pow(c, Integer(2)), d, g), Mul(Integer(-1), Mul(a, Add(Mul(c, f, g), Mul(Integer(-1), Mul(c, e, h)))))))), Add(p, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(b, g), Mul(Integer(-1), Mul(Integer(2), a, h)))), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(b, h)))))), Add(p, m, Integer(2)))), Mul(h, Add(Mul(Pow(b, Integer(2)), f, g), Mul(Integer(-1), Mul(b, Add(Mul(c, e, g), Mul(c, d, h), Mul(a, f, h)))), Mul(Integer(2), Add(Mul(Pow(c, Integer(2)), d, g), Mul(Integer(-1), Mul(a, Add(Mul(c, f, g), Mul(Integer(-1), Mul(c, e, h)))))))), Add(Mul(Integer(2), p), m, Integer(4)), x)), x)), x)))))
    rubi.add(rule549)

    pattern550 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(a_, Pow(h_, Integer(2)))))), (e, f, c, g, x, m, p, a, h, d)))
    rule550 = ReplacementRule(pattern550, lambda e, f, c, g, x, m, p, a, h, d : Add(Mul(Add(Mul(a, c, e, g), Mul(Integer(-1), Mul(a, h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))))), Mul(Integer(-1), Mul(c, Add(Mul(c, d, g), Mul(Integer(-1), Add(Mul(a, f, g), Mul(Integer(-1), Mul(a, e, h))))), x))), Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(Add(Mul(c, d), Mul(a, f)), Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Add(p, Integer(1))), Mul(g, Add(Mul(Pow(c, Integer(2)), d, g), Mul(Integer(-1), Mul(a, Add(Mul(c, f, g), Mul(Integer(-1), Mul(c, e, h)))))), Add(p, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(a, c, e, g), Mul(Integer(-1), Mul(a, h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))), Add(p, m, Integer(2)))), Mul(h, Add(Mul(Pow(c, Integer(2)), d, g), Mul(Integer(-1), Mul(a, Add(Mul(c, f, g), Mul(Integer(-1), Mul(c, e, h)))))), Add(Mul(Integer(2), p), m, Integer(4)), x)), x)), x))))
    rubi.add(rule550)

    pattern551 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(h_, Add(Mul(b_, g_), Mul(Integer(-1), Mul(a_, h_)))))))), (f, c, g, x, m, b, p, a, h, d)))
    rule551 = ReplacementRule(pattern551, lambda f, c, g, x, m, b, p, a, h, d : Add(Mul(Mul(Integer(-1), Add(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(b, g), Mul(Integer(-1), Mul(Integer(2), a, h)))), Mul(Integer(-1), Mul(b, d, Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(b, h))))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2)), d, g), Mul(b, f, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h)))), Mul(Integer(-1), Mul(c, Add(Mul(Integer(2), a, f, g), Mul(b, d, h))))), x)))), Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h)))))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h)))))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(Integer(2), Add(Mul(c, d), Mul(a, f)), Add(Mul(c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(b, g), Mul(Integer(-1), Mul(a, h)))))), Add(p, Integer(1))), Mul(g, Add(Mul(Pow(b, Integer(2)), f, g), Mul(Integer(-1), Mul(b, Add(Mul(c, d, h), Mul(a, f, h)))), Mul(Integer(2), Add(Mul(Pow(c, Integer(2)), d, g), Mul(Integer(-1), Mul(a, c, f, g))))), Add(p, Integer(2))), Mul(Integer(-1), Mul(h, Add(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(b, g), Mul(Integer(-1), Mul(Integer(2), a, h)))), Mul(Integer(-1), Mul(b, d, Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(b, h)))))), Add(p, m, Integer(2)))), Mul(h, Add(Mul(Pow(b, Integer(2)), f, g), Mul(Integer(-1), Mul(b, Add(Mul(c, d, h), Mul(a, f, h)))), Mul(Integer(2), Add(Mul(Pow(c, Integer(2)), d, g), Mul(Integer(-1), Mul(a, c, f, g))))), Add(Mul(Integer(2), p), m, Integer(4)), x)), x)), x)))))
    rubi.add(rule551)

    pattern552 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(a_, Pow(h_, Integer(2)))))), (f, c, g, x, m, p, a, h, d)))
    rule552 = ReplacementRule(pattern552, lambda f, c, g, x, m, p, a, h, d : Add(Mul(Mul(Integer(-1), Add(Mul(a, h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(c, Add(Mul(c, d, g), Mul(Integer(-1), Mul(a, f, g))), x))), Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Simp(Add(Mul(Add(Mul(c, d), Mul(a, f)), Add(Mul(c, Pow(g, Integer(2))), Mul(a, Pow(h, Integer(2)))), Add(p, Integer(1))), Mul(g, Add(Mul(Pow(c, Integer(2)), d, g), Mul(Integer(-1), Mul(a, c, f, g))), Add(p, Integer(2))), Mul(Integer(-1), Mul(h, Mul(Mul(Integer(-1), a), h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Add(p, m, Integer(2)))), Mul(h, Add(Mul(Pow(c, Integer(2)), d, g), Mul(Integer(-1), Mul(a, Mul(c, f, g)))), Add(Mul(Integer(2), p), m, Integer(4)), x)), x)), x))))
    rubi.add(rule552)

    pattern553 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, b, p, a, h, d)))
    rule553 = ReplacementRule(pattern553, lambda e, f, c, g, x, m, b, p, a, h, d : Add(Mul(Mul(f, Pow(Pow(h, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Pow(h, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Add(Mul(f, Pow(g, Integer(2))), Mul(Integer(-1), Mul(d, Pow(h, Integer(2)))), Mul(h, Add(Mul(Integer(2), f, g), Mul(Integer(-1), Mul(e, h))), x))), x)))))
    rubi.add(rule553)

    pattern554 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, p, a, h, d)))
    rule554 = ReplacementRule(pattern554, lambda e, f, c, g, x, m, p, a, h, d : Add(Mul(Mul(f, Pow(Pow(h, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(2))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Pow(h, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Add(Mul(f, Pow(g, Integer(2))), Mul(Integer(-1), Mul(d, Pow(h, Integer(2)))), Mul(h, Add(Mul(Integer(2), f, g), Mul(Integer(-1), Mul(e, h))), x))), x)))))
    rubi.add(rule554)

    pattern555 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (f, c, g, x, m, b, p, a, h, d)))
    rule555 = ReplacementRule(pattern555, lambda f, c, g, x, m, b, p, a, h, d : Add(Mul(Mul(f, Pow(Pow(h, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(2))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Pow(h, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Add(Mul(f, Pow(g, Integer(2))), Mul(Integer(-1), Mul(d, Pow(h, Integer(2)))), Mul(Integer(2), f, g, h, x))), x)))))
    rubi.add(rule555)

    pattern556 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (f, c, g, x, m, p, a, h, d)))
    rule556 = ReplacementRule(pattern556, lambda f, c, g, x, m, p, a, h, d : Add(Mul(Mul(f, Pow(Pow(h, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), Add(m, Integer(2))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Pow(h, Integer(2)), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Add(Mul(f, Pow(g, Integer(2))), Mul(Integer(-1), Mul(d, Pow(h, Integer(2)))), Mul(Integer(2), f, g, h, x))), x)))))
    rubi.add(rule556)

    pattern557 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, b, p, a, h, d)))
    rule557 = ReplacementRule(pattern557, lambda e, f, c, g, x, m, b, p, a, h, d : Add(Mul(f, Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(b, f, g, Add(p, Integer(1))), Mul(h, Add(Mul(a, f, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(Integer(2), p), Integer(3)))))), Mul(Add(Mul(b, f, h, Add(m, p, Integer(2))), Mul(c, Add(Mul(Integer(2), f, g, Add(p, Integer(1))), Mul(Integer(-1), Mul(e, h, Add(m, Mul(Integer(2), p), Integer(3))))))), x)), x)), x)))))
    rubi.add(rule557)

    pattern558 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (e, f, c, g, x, m, p, a, h, d)))
    rule558 = ReplacementRule(pattern558, lambda e, f, c, g, x, m, p, a, h, d : Add(Mul(f, Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(h, Add(Mul(a, f, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(Integer(2), p), Integer(3)))))), Mul(Mul(c, Add(Mul(Integer(2), f, g, Add(p, Integer(1))), Mul(Integer(-1), Mul(e, h, Add(m, Mul(Integer(2), p), Integer(3)))))), x)), x)), x)))))
    rubi.add(rule558)

    pattern559 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (f, c, g, x, m, b, p, a, h, d)))
    rule559 = ReplacementRule(pattern559, lambda f, c, g, x, m, b, p, a, h, d : Add(Mul(f, Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(b, f, g, Add(p, Integer(1))), Mul(h, Add(Mul(a, f, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(Integer(2), p), Integer(3)))))), Mul(f, Add(Mul(b, h, Add(m, p, Integer(2))), Mul(Integer(2), c, g, Add(p, Integer(1)))), x)), x)), x)))))
    rubi.add(rule559)

    pattern560 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(m_, Mul(Integer(2), p_), Integer(3)))), (f, c, g, x, m, p, a, h, d)))
    rule560 = ReplacementRule(pattern560, lambda f, c, g, x, m, p, a, h, d : Add(Mul(f, Pow(Add(g, Mul(h, x)), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, h, Add(m, Mul(Integer(2), p), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Simp(Add(Mul(h, Add(Mul(a, f, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(Integer(2), p), Integer(3)))))), Mul(Integer(2), c, f, g, Add(p, Integer(1)), x)), x)), x)))))
    rubi.add(rule560)

    pattern561 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), IntegersQ(p_, q_), Greater(p_, Integer(0))), (e, f, q, c, g, x, b, p, a, h, d)))
    rule561 = ReplacementRule(pattern561, lambda e, f, q, c, g, x, b, p, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(g, Mul(h, x))), x), x))
    rubi.add(rule561)

    pattern562 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), IntegersQ(p_, q_), Or(Greater(p_, Integer(0)), Greater(q_, Integer(0)))), (e, f, q, c, g, x, p, a, h, d)))
    rule562 = ReplacementRule(pattern562, lambda e, f, q, c, g, x, p, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(g, Mul(h, x))), x), x))
    rubi.add(rule562)

    pattern563 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (e, f, q, c, g, x, b, p, a, h, d)))
    rule563 = ReplacementRule(pattern563, lambda e, f, q, c, g, x, b, p, a, h, d : Add(Mul(Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h)), Mul(Integer(-1), Mul(Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), x))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(e, q, Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h)))), Mul(Integer(-1), Mul(d, Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), Add(Mul(Integer(2), p), Integer(3)))), Mul(Add(Mul(Integer(2), f, q, Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h)))), Mul(Integer(-1), Mul(e, Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), Add(Mul(Integer(2), p), q, Integer(3))))), x), Mul(Integer(-1), Mul(f, Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)), Pow(x, Integer(2))))), x)), x)))))
    rubi.add(rule563)

    pattern564 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (e, f, q, c, g, x, p, a, h, d)))
    rule564 = ReplacementRule(pattern564, lambda e, f, q, c, g, x, p, a, h, d : Add(Mul(Add(Mul(a, h), Mul(Integer(-1), Mul(g, c, x))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(2), Pow(Mul(Integer(4), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(g, c, d, Add(Mul(Integer(2), p), Integer(3))), Mul(Integer(-1), Mul(a, Mul(h, e, q))), Mul(Add(Mul(g, c, e, Add(Mul(Integer(2), p), q, Integer(3))), Mul(Integer(-1), Mul(a, Mul(Integer(2), h, f, q)))), x), Mul(g, c, f, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)), Pow(x, Integer(2)))), x)), x))))
    rubi.add(rule564)

    pattern565 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (f, q, c, g, x, b, p, a, h, d)))
    rule565 = ReplacementRule(pattern565, lambda f, q, c, g, x, b, p, a, h, d : Add(Mul(Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h)), Mul(Integer(-1), Mul(Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), x))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(Mul(Integer(-1), d), Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), Add(Mul(Integer(2), p), Integer(3))), Mul(Mul(Integer(2), f, q, Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h)))), x), Mul(Integer(-1), Mul(f, Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)), Pow(x, Integer(2))))), x)), x)))))
    rubi.add(rule565)

    pattern566 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_))), Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_))))))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (e, f, q, c, g, x, b, p, a, h, d)))
    rule566 = ReplacementRule(pattern566, lambda e, f, q, c, g, x, b, p, a, h, d : Add(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Integer(-1))), Add(Mul(g, c, Add(Mul(Integer(2), a, c, e), Mul(Integer(-1), Mul(b, Add(Mul(c, d), Mul(a, f)))))), Mul(Add(Mul(g, b), Mul(Integer(-1), Mul(a, h))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f)))))), Mul(c, Add(Mul(g, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f)))))), Mul(Integer(-1), Mul(h, Add(Mul(b, c, d), Mul(Integer(-1), Mul(Integer(2), a, c, e)), Mul(a, b, f))))), x))), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Mul(Add(Mul(Pow(b, Integer(2)), Mul(g, f)), Mul(Integer(-1), Mul(b, Add(Mul(h, c, d), Mul(g, c, e), Mul(a, h, f)))), Mul(Integer(2), Add(Mul(g, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Mul(Mul(Integer(-1), h), c, e)))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2)))))), Mul(Integer(-1), Mul(e, Add(Mul(Mul(g, c), Add(Mul(Integer(2), a, c, e), Mul(Integer(-1), Mul(b, Add(Mul(c, d), Mul(a, f)))))), Mul(Add(Mul(g, b), Mul(Integer(-1), Mul(a, h))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))))), Add(p, q, Integer(2)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), f, Add(Mul(Mul(g, c), Add(Mul(Integer(2), a, c, e), Mul(Integer(-1), Mul(b, Add(Mul(c, d), Mul(a, f)))))), Mul(Add(Mul(g, b), Mul(Integer(-1), Mul(a, h))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Pow(b, Integer(2)), g, f), Mul(Integer(-1), Mul(b, Add(Mul(h, c, d), Mul(g, c, e), Mul(a, h, f)))), Mul(Integer(2), Add(Mul(g, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Mul(Mul(Integer(-1), h), c, e)))))), Add(Mul(b, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, e, Add(Mul(Integer(2), p), q, Integer(4)))))))), x)), Mul(Integer(-1), Mul(c, f, Add(Mul(Pow(b, Integer(2)), Mul(g, f)), Mul(Integer(-1), Mul(b, Add(Mul(h, c, d), Mul(g, c, e), Mul(a, h, f)))), Mul(Integer(2), Add(Mul(g, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(a, h, c, e)))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule566)

    pattern567 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(a_, c_, Pow(e_, Integer(2))), Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (e, f, q, c, g, x, p, a, h, d)))
    rule567 = ReplacementRule(pattern567, lambda e, f, q, c, g, x, p, a, h, d : Add(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Mul(Integer(-4), a, c), Add(Mul(a, c, Pow(e, Integer(2))), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Add(Mul(g, c, Mul(Integer(2), a, c, e)), Mul(Mul(Mul(Integer(-1), a), h), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(c, Add(Mul(g, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(Integer(-1), Mul(h, Mul(Integer(-2), a, c, e)))), x))), Mul(Mul(Integer(1), Pow(Mul(Mul(Integer(-4), a, c), Add(Mul(a, c, Pow(e, Integer(2))), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Mul(Integer(-2), g, c), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Mul(Mul(Integer(-1), a), e), Mul(c, e)))), Add(p, Integer(1))), Mul(Mul(Integer(2), Add(Mul(g, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Mul(Mul(Integer(-1), h), c, e))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2)))))), Mul(Integer(-1), Mul(e, Add(Mul(Mul(g, c), Mul(Integer(2), a, c, e)), Mul(Mul(Mul(Integer(-1), a), h), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Add(Integer(2)), a, f)))))), Add(p, q, Integer(2)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), f, Add(Mul(Mul(g, c), Mul(Integer(2), a, c, e)), Mul(Mul(Mul(Integer(-1), a), h), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Mul(Integer(-1), c), Mul(Add(Integer(2)), a, f))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Mul(Integer(2), Add(Mul(g, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Mul(Mul(Integer(-1), h), c, e))))), Mul(Mul(Integer(-1), c), e, Add(Mul(Integer(2), p), q, Integer(4)))))), x)), Mul(Integer(-1), Mul(c, f, Mul(Integer(2), Add(Mul(g, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Mul(Mul(Integer(-1), h), c, e))))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule567)

    pattern568 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(Pow(b_, Integer(2)), d_, f_), Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (f, q, c, g, x, b, p, a, h, d)))
    rule568 = ReplacementRule(pattern568, lambda f, q, c, g, x, b, p, a, h, d : Add(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(Pow(b, Integer(2)), d, f), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Add(Mul(Mul(g, c), Mul(Mul(Integer(-1), b), Add(Mul(c, d), Mul(a, f)))), Mul(Add(Mul(g, b), Mul(Integer(-1), Mul(a, h))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(c, Add(Mul(g, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(Integer(-1), Mul(h, Add(Mul(b, c, d), Mul(a, b, f))))), x))), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(Pow(b, Integer(2)), d, f), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Mul(b, d), Mul(Mul(Integer(-1), b), f)))), Add(p, Integer(1))), Mul(Add(Mul(Pow(b, Integer(2)), Mul(g, f)), Mul(Integer(-1), Mul(b, Add(Mul(h, c, d), Mul(a, h, f)))), Mul(Integer(2), Mul(g, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2)))))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), f, Add(Mul(Mul(g, c), Mul(Mul(Integer(-1), b), Add(Mul(c, d), Mul(a, f)))), Mul(Add(Mul(g, b), Mul(Integer(-1), Mul(a, h))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Pow(b, Integer(2)), Mul(g, f)), Mul(Integer(-1), Mul(b, Add(Mul(h, c, d), Mul(a, h, f)))), Mul(Integer(2), Mul(g, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))), Mul(b, f, Add(p, Integer(1)))))), x)), Mul(Integer(-1), Mul(c, f, Add(Mul(Pow(b, Integer(2)), Mul(g, f)), Mul(Integer(-1), Mul(b, Add(Mul(h, c, d), Mul(a, h, f)))), Mul(Integer(2), Mul(g, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule568)

    pattern569 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(p_, q_, Integer(1)))), (e, f, q, c, g, x, b, p, a, h, d)))
    rule569 = ReplacementRule(pattern569, lambda e, f, q, c, g, x, b, p, a, h, d : Add(Mul(h, Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), f, Add(p, q, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), f, Add(p, q, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(h, p, Add(Mul(b, d), Mul(Integer(-1), Mul(a, e)))), Mul(a, Add(Mul(h, e), Mul(Integer(-1), Mul(Integer(2), g, f))), Add(p, q, Integer(1))), Mul(Add(Mul(Integer(2), h, p, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(b, Add(Mul(h, e), Mul(Integer(-1), Mul(Integer(2), g, f))), Add(p, q, Integer(1)))), x), Mul(Add(Mul(h, p, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))), Mul(c, Add(Mul(h, e), Mul(Integer(-1), Mul(Integer(2), g, f))), Add(p, q, Integer(1)))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule569)

    pattern570 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(p_, q_, Integer(1)))), (e, f, q, c, g, x, p, a, h, d)))
    rule570 = ReplacementRule(pattern570, lambda e, f, q, c, g, x, p, a, h, d : Add(Mul(h, Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), f, Add(p, q, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), f, Add(p, q, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(a, h, e, p), Mul(Integer(-1), Mul(a, Add(Mul(h, e), Mul(Integer(-1), Mul(Integer(2), g, f))), Add(p, q, Integer(1)))), Mul(Integer(-1), Mul(Integer(2), h, p, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), x)), Mul(Integer(-1), Mul(Add(Mul(h, c, e, p), Mul(c, Add(Mul(h, e), Mul(Integer(-1), Mul(Integer(2), g, f))), Add(p, q, Integer(1)))), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule570)

    pattern571 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(p_, q_, Integer(1)))), (f, q, c, g, x, b, p, a, h, d)))
    rule571 = ReplacementRule(pattern571, lambda f, q, c, g, x, b, p, a, h, d : Add(Mul(h, Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), f, Add(p, q, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), f, Add(p, q, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(h, p, Mul(b, d)), Mul(a, Mul(Integer(-2), g, f), Add(p, q, Integer(1))), Mul(Add(Mul(Integer(2), h, p, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(b, Mul(Integer(-2), g, f), Add(p, q, Integer(1)))), x), Mul(Add(Mul(h, p, Mul(Mul(Integer(-1), b), f)), Mul(c, Mul(Integer(-2), g, f), Add(p, q, Integer(1)))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule571)

    pattern572 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, g, x, b, a, h, d)))
    rule572 = ReplacementRule(pattern572, lambda e, f, c, g, x, b, a, h, d : With(List(Set(Integer(q), Simplify(Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, c, d, e)), Mul(a, c, Pow(e, Integer(2))), Mul(Pow(b, Integer(2)), d, f), Mul(Integer(-1), Mul(Integer(2), a, c, d, f)), Mul(Integer(-1), Mul(a, b, e, f)), Mul(Pow(a, Integer(2)), Pow(f, Integer(2))))))), Condition(Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Simp(Add(Mul(g, Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(g, b, c, e)), Mul(a, h, c, e), Mul(g, Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(a, b, h, f)), Mul(Integer(-1), Mul(a, g, c, f)), Mul(c, Add(Mul(h, c, d), Mul(Integer(-1), Mul(g, c, e)), Mul(g, b, f), Mul(Integer(-1), Mul(a, h, f))), x)), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Simp(Add(Mul(Mul(Integer(-1), h), c, d, e), Mul(g, c, Pow(e, Integer(2))), Mul(b, h, d, f), Mul(Integer(-1), Mul(g, c, d, f)), Mul(Integer(-1), Mul(g, b, e, f)), Mul(a, g, Pow(f, Integer(2))), Mul(Integer(-1), Mul(f, Add(Mul(h, c, d), Mul(Integer(-1), Mul(g, c, e)), Mul(g, b, f), Mul(Integer(-1), Mul(a, h, f))), x))), x), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Integer(-1))), x))), NonzeroQ(Integer(q)))))
    rubi.add(rule572)

    pattern573 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, g, x, b, a, h, d)))
    rule573 = ReplacementRule(pattern573, lambda f, c, g, x, b, a, h, d : With(List(Set(Integer(q), Simplify(Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2))), Mul(Pow(b, Integer(2)), d, f), Mul(Integer(-1), Mul(Integer(2), a, c, d, f)), Mul(Pow(a, Integer(2)), Pow(f, Integer(2))))))), Condition(Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Simp(Add(Mul(g, Pow(c, Integer(2)), d), Mul(g, Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(a, b, h, f)), Mul(Integer(-1), Mul(a, g, c, f)), Mul(c, Add(Mul(h, c, d), Mul(g, b, f), Mul(Integer(-1), Mul(a, h, f))), x)), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Simp(Add(Mul(b, h, d, f), Mul(Integer(-1), Mul(g, c, d, f)), Mul(a, g, Pow(f, Integer(2))), Mul(Integer(-1), Mul(f, Add(Mul(h, c, d), Mul(g, b, f), Mul(Integer(-1), Mul(a, h, f))), x))), x), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Integer(-1))), x))), NonzeroQ(Integer(q)))))
    rubi.add(rule573)

    pattern574 = Pattern(Int(Mul(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(PositiveQ(Mul(a_, c_))), (f, c, x, g, a, h, d)))
    rule574 = ReplacementRule(pattern574, lambda f, c, x, g, a, h, d : Add(Mul(g, Int(Mul(Integer(1), Pow(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(h, Int(Mul(x, Pow(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule574)

    pattern575 = Pattern(Int(Mul(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(Not(PositiveQ(Mul(a_, c_)))), (f, c, x, g, a, h, d)))
    rule575 = ReplacementRule(pattern575, lambda f, c, x, g, a, h, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Add(Mul(Mul(Mul(Integer(-1), Add(Mul(c, g), Mul(h, Integer(q)))), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(Integer(q), Mul(Integer(-1), Mul(c, x))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(c, g), Mul(Integer(-1), Mul(h, Integer(q)))), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(Integer(q), Mul(c, x)), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule575)

    pattern576 = Pattern(Int(Mul(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), ZeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_)))), ZeroQ(Add(Mul(h_, e_), Mul(Integer(-1), Mul(Integer(2), g_, f_))))), (e, f, c, g, x, b, a, h, d)))
    rule576 = ReplacementRule(pattern576, lambda e, f, c, g, x, b, a, h, d : Mul(Integer(-2), g, Subst(Int(Mul(Integer(1), Pow(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e)), Mul(Integer(-1), Mul(b, Pow(x, Integer(2))))), Integer(-1))), x), x, Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))))))
    rubi.add(rule576)

    pattern577 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), ZeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_)))), NonzeroQ(Add(Mul(h_, e_), Mul(Integer(-1), Mul(Integer(2), g_, f_))))), (e, f, c, g, x, b, a, h, d)))
    rule577 = ReplacementRule(pattern577, lambda e, f, c, g, x, b, a, h, d : Add(Mul(Mul(Mul(Integer(-1), Add(Mul(h, e), Mul(Integer(-1), Mul(Integer(2), g, f)))), Pow(Mul(Integer(2), f), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(h, Pow(Mul(Integer(2), f), Integer(-1))), Int(Mul(Add(e, Mul(Integer(2), f, x)), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule577)

    pattern578 = Pattern(Int(Mul(x_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_))))), (e, f, c, x, b, a, d)))
    rule578 = ReplacementRule(pattern578, lambda e, f, c, x, b, a, d : Mul(Integer(-2), e, Subst(Int(Mul(Add(Integer(1), Mul(Integer(-1), Mul(d, Pow(x, Integer(2))))), Pow(Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)), Mul(Integer(-1), Mul(e, Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(2), a, f)), Pow(x, Integer(2)))), Mul(Pow(d, Integer(2)), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Pow(x, Integer(4)))), Integer(-1))), x), x, Mul(Add(Integer(1), Mul(Add(e, Sqrt(Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f))))), Mul(x, Pow(Mul(Integer(2), d), Integer(-1))))), Pow(Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule578)

    pattern579 = Pattern(Int(Mul(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), ZeroQ(Add(Mul(Integer(2), h_, d_), Mul(Integer(-1), Mul(g_, e_))))), (e, f, c, g, x, b, a, h, d)))
    rule579 = ReplacementRule(pattern579, lambda e, f, c, g, x, b, a, h, d : Mul(g, Subst(Int(Mul(Integer(1), Pow(Add(a, Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule579)

    pattern580 = Pattern(Int(Mul(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), NonzeroQ(Add(Mul(Integer(2), h_, d_), Mul(Integer(-1), Mul(g_, e_))))), (e, f, c, g, x, b, a, h, d)))
    rule580 = ReplacementRule(pattern580, lambda e, f, c, g, x, b, a, h, d : Add(Mul(Mul(Mul(Integer(-1), Add(Mul(Integer(2), h, d), Mul(Integer(-1), Mul(g, e)))), Pow(e, Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(h, Pow(e, Integer(-1))), Int(Mul(Add(Mul(Integer(2), d), Mul(e, x)), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule580)

    pattern581 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NonzeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), ZeroQ(Add(Mul(Pow(h_, Integer(2)), Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), Mul(Integer(-1), Mul(Integer(2), g_, h_, Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))))), Mul(Pow(g_, Integer(2)), Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_))))))), (e, f, c, g, x, b, a, h, d)))
    rule581 = ReplacementRule(pattern581, lambda e, f, c, g, x, b, a, h, d : Mul(Integer(-2), g, Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h))), Subst(Int(Mul(Integer(1), Pow(Simp(Add(Mul(g, Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h))), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Pow(x, Integer(2))))), x), Integer(-1))), x), x, Mul(Simp(Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h)), Mul(Integer(-1), Mul(Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), x))), x), Pow(Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule581)

    pattern582 = Pattern(Int(Mul(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(ZeroQ(Add(Mul(a_, Pow(h_, Integer(2)), e_), Mul(Integer(2), g_, h_, Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), Mul(Integer(-1), Mul(Pow(g_, Integer(2)), c_, e_))))), (f, e, c, g, x, a, h, d)))
    rule582 = ReplacementRule(pattern582, lambda f, e, c, g, x, a, h, d : Mul(Integer(-2), a, g, h, Subst(Int(Mul(Integer(1), Pow(Simp(Add(Mul(Integer(2), Pow(a, Integer(2)), g, h, c), Mul(a, e, Pow(x, Integer(2)))), x), Integer(-1))), x), x, Mul(Simp(Add(Mul(a, h), Mul(Integer(-1), Mul(g, c, x))), x), Pow(Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule582)

    pattern583 = Pattern(Int(Mul(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(b_, Pow(h_, Integer(2)), d_), Mul(Integer(-1), Mul(Integer(2), g_, h_, Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))))), Mul(Integer(-1), Mul(Pow(g_, Integer(2)), b_, f_))))), (f, c, g, x, b, a, h, d)))
    rule583 = ReplacementRule(pattern583, lambda f, c, g, x, b, a, h, d : Mul(Integer(-2), g, Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h))), Subst(Int(Mul(Integer(1), Pow(Simp(Add(Mul(g, Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h))), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(Integer(-1), Mul(b, d, Pow(x, Integer(2))))), x), Integer(-1))), x), x, Mul(Simp(Add(Mul(g, b), Mul(Integer(-1), Mul(Integer(2), a, h)), Mul(Integer(-1), Mul(Add(Mul(b, h), Mul(Integer(-1), Mul(Integer(2), g, c))), x))), x), Pow(Sqrt(Add(d, Mul(f, Pow(x, Integer(2))))), Integer(-1))))))
    rubi.add(rule583)

    pattern584 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), PosQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, f, c, g, x, b, a, h, d)))
    rule584 = ReplacementRule(pattern584, lambda e, f, c, g, x, b, a, h, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Mul(Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(h, Add(b, Mul(Integer(-1), Integer(q)))))), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, x)), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(h, Add(b, Integer(q))))), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(b, Integer(q), Mul(Integer(2), c, x)), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule584)

    pattern585 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), PosQ(Mul(Mul(Integer(-1), a_), c_))), (e, f, c, g, x, a, h, d)))
    rule585 = ReplacementRule(pattern585, lambda e, f, c, g, x, a, h, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Add(Mul(Add(Mul(h, Pow(Integer(2), Integer(-1))), Mul(c, Mul(g, Pow(Mul(Integer(2), Integer(q)), Integer(-1))))), Int(Mul(Integer(1), Pow(Mul(Add(Mul(Integer(-1), Integer(q)), Mul(c, x)), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Add(Mul(h, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(c, Mul(g, Pow(Mul(Integer(2), Integer(q)), Integer(-1)))))), Int(Mul(Integer(1), Pow(Mul(Add(Integer(q), Mul(c, x)), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)))))
    rubi.add(rule585)

    pattern586 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PosQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, g, x, b, a, h, d)))
    rule586 = ReplacementRule(pattern586, lambda f, c, g, x, b, a, h, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Mul(Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(h, Add(b, Mul(Integer(-1), Integer(q)))))), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, x)), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(h, Add(b, Integer(q))))), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(b, Integer(q), Mul(Integer(2), c, x)), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule586)

    pattern587 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NonzeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), NegQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, f, c, g, x, b, a, h, d)))
    rule587 = ReplacementRule(pattern587, lambda e, f, c, g, x, b, a, h, d : With(List(Set(Integer(q), Rt(Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Simp(Add(Mul(h, Add(Mul(b, d), Mul(Integer(-1), Mul(a, e)))), Mul(Integer(-1), Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Integer(q))))), Mul(Integer(-1), Mul(Add(Mul(g, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))), Mul(Integer(-1), Mul(h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Integer(q))))), x))), x), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Simp(Add(Mul(h, Add(Mul(b, d), Mul(Integer(-1), Mul(a, e)))), Mul(Integer(-1), Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Integer(q)))), Mul(Integer(-1), Mul(Add(Mul(g, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))), Mul(Integer(-1), Mul(h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Integer(q)))))), x))), x), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule587)

    pattern588 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), NegQ(Mul(Mul(Integer(-1), a_), c_))), (e, f, c, g, x, a, h, d)))
    rule588 = ReplacementRule(pattern588, lambda e, f, c, g, x, a, h, d : With(List(Set(Integer(q), Rt(Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(a, c, Pow(e, Integer(2)))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Simp(Add(Mul(Mul(Integer(-1), a), h, e), Mul(Integer(-1), Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Integer(q))))), Mul(Add(Mul(h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Integer(q))), Mul(Integer(-1), Mul(g, c, e))), x)), x), Pow(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Simp(Add(Mul(Mul(Integer(-1), a), h, e), Mul(Integer(-1), Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Integer(q)))), Mul(Add(Mul(h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Integer(q)))), Mul(Integer(-1), Mul(g, c, e))), x)), x), Pow(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule588)

    pattern589 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, g, x, b, a, h, d)))
    rule589 = ReplacementRule(pattern589, lambda f, c, g, x, b, a, h, d : With(List(Set(Integer(q), Rt(Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Pow(b, Integer(2)), d, f)), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Simp(Add(Mul(h, b, d), Mul(Integer(-1), Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Integer(q))))), Mul(Add(Mul(h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Integer(q))), Mul(g, b, f)), x)), x), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), Integer(q)), Integer(-1))), Int(Mul(Simp(Add(Mul(h, b, d), Mul(Integer(-1), Mul(g, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Integer(q)))), Mul(Add(Mul(h, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)), Mul(Integer(-1), Integer(q)))), Mul(g, b, f)), x)), x), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))))
    rubi.add(rule589)

    pattern590 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, g, x, b, a, h, d)))
    rule590 = ReplacementRule(pattern590, lambda e, f, c, g, x, b, a, h, d : With(List(Set(Integer(s), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))), Set(Integer(t), Rt(Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f))), Integer(2)))), Mul(Sqrt(Add(b, Integer(s), Mul(Integer(2), c, x))), Sqrt(Add(Mul(Integer(2), a), Mul(Add(b, Integer(s)), x))), Sqrt(Add(e, Integer(t), Mul(Integer(2), f, x))), Mul(Sqrt(Add(Mul(Integer(2), d), Mul(Add(e, Integer(t)), x))), Pow(Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), Int(Mul(Add(g, Mul(h, x)), Pow(Mul(Sqrt(Add(b, Integer(s), Mul(Integer(2), c, x))), Sqrt(Add(Mul(Integer(2), a), Mul(Add(b, Integer(s)), x))), Sqrt(Add(e, Integer(t), Mul(Integer(2), f, x))), Sqrt(Add(Mul(Integer(2), d), Mul(Add(e, Integer(t)), x)))), Integer(-1))), x))))
    rubi.add(rule590)

    pattern591 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, g, x, b, a, h, d)))
    rule591 = ReplacementRule(pattern591, lambda f, c, g, x, b, a, h, d : With(List(Set(Integer(s), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))), Set(Integer(t), Rt(Mul(Integer(-4), d, f), Integer(2)))), Mul(Sqrt(Add(b, Integer(s), Mul(Integer(2), c, x))), Sqrt(Add(Mul(Integer(2), a), Mul(Add(b, Integer(s)), x))), Sqrt(Add(Integer(t), Mul(Integer(2), f, x))), Mul(Sqrt(Add(Mul(Integer(2), d), Mul(Integer(t), x))), Pow(Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), Int(Mul(Add(g, Mul(h, x)), Pow(Mul(Sqrt(Add(b, Integer(s), Mul(Integer(2), c, x))), Sqrt(Add(Mul(Integer(2), a), Mul(Add(b, Integer(s)), x))), Sqrt(Add(Integer(t), Mul(Integer(2), f, x))), Sqrt(Add(Mul(Integer(2), d), Mul(Integer(t), x)))), Integer(-1))), x))))
    rubi.add(rule591)

    pattern592 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(3))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(ZeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_)))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), d_), Mul(Integer(-1), Mul(f_, Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), Pow(g_, Integer(2))), Mul(Integer(-1), Mul(b_, c_, g_, h_)), Mul(Integer(-1), Mul(Integer(2), Pow(b_, Integer(2)), Pow(h_, Integer(2)))), Mul(Integer(9), a_, c_, Pow(h_, Integer(2))))), PositiveQ(Mul(Integer(-9), c_, Mul(Pow(h_, Integer(2)), Pow(Pow(Add(Mul(Integer(2), c_, g_), Mul(Integer(-1), Mul(b_, h_))), Integer(2)), Integer(-1)))))), (e, f, c, g, x, b, a, h, d)))
    rule592 = ReplacementRule(pattern592, lambda e, f, c, g, x, b, a, h, d : With(List(Set(Integer(q), Pow(Mul(Integer(-9), c, Mul(Pow(h, Integer(2)), Pow(Pow(Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(b, h))), Integer(2)), Integer(-1)))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Add(Mul(Sqrt(Integer(3)), h, Integer(q), Mul(ArcTan(Add(Mul(Integer(1), Pow(Sqrt(Integer(3)), Integer(-1))), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Mul(Pow(Add(Integer(1), Mul(Integer(-1), Mul(Mul(Integer(3), h, Add(b, Mul(Integer(2), c, x))), Pow(Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(b, h))), Integer(-1))))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Pow(Mul(Sqrt(Integer(3)), Pow(Add(Integer(1), Mul(Mul(Integer(3), h, Add(b, Mul(Integer(2), c, x))), Pow(Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(b, h))), Integer(-1)))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1))))))), Pow(f, Integer(-1)))), Mul(h, Integer(q), Mul(Log(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Pow(Mul(Integer(2), f), Integer(-1)))), Mul(Integer(-1), Mul(Integer(3), h, Integer(q), Mul(Log(Add(Pow(Add(Integer(1), Mul(Integer(-1), Mul(Integer(3), h, Mul(Add(b, Mul(Integer(2), c, x)), Pow(Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(b, h))), Integer(-1)))))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Add(Integer(1), Mul(Integer(3), h, Mul(Add(b, Mul(Integer(2), c, x)), Pow(Add(Mul(Integer(2), c, g), Mul(Integer(-1), Mul(b, h))), Integer(-1))))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))))), Pow(Mul(Integer(2), f), Integer(-1))))))))
    rubi.add(rule592)

    pattern593 = Pattern(Int(Mul(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(3))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(3), a_, f_))), ZeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(9), a_, Pow(h_, Integer(2))))), PositiveQ(a_)), (f, c, x, g, a, h, d)))
    rule593 = ReplacementRule(pattern593, lambda f, c, x, g, a, h, d : Add(Mul(Sqrt(Integer(3)), h, Mul(ArcTan(Add(Mul(Integer(1), Pow(Sqrt(Integer(3)), Integer(-1))), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Mul(Pow(Add(Integer(1), Mul(Integer(-1), Mul(Integer(3), h, Mul(x, Pow(g, Integer(-1)))))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Pow(Mul(Sqrt(Integer(3)), Pow(Add(Integer(1), Mul(Integer(3), h, Mul(x, Pow(g, Integer(-1))))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Integer(-1))))))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Pow(a, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), f), Integer(-1)))), Mul(h, Mul(Log(Add(d, Mul(f, Pow(x, Integer(2))))), Pow(Mul(Pow(Integer(2), Mul(Integer(5), Pow(Integer(3), Integer(-1)))), Pow(a, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), f), Integer(-1)))), Mul(Integer(-1), Mul(Integer(3), h, Mul(Log(Add(Pow(Add(Integer(1), Mul(Integer(-1), Mul(Integer(3), h, Mul(x, Pow(g, Integer(-1)))))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Add(Integer(1), Mul(Integer(3), h, Mul(x, Pow(g, Integer(-1))))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))))), Pow(Mul(Pow(Integer(2), Mul(Integer(5), Pow(Integer(3), Integer(-1)))), Pow(a, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), f), Integer(-1)))))))
    rubi.add(rule593)

    pattern594 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(3))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(ZeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_)))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), d_), Mul(Integer(-1), Mul(f_, Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))))), ZeroQ(Add(Mul(Pow(c_, Integer(2)), Pow(g_, Integer(2))), Mul(Integer(-1), Mul(b_, c_, g_, h_)), Mul(Integer(-1), Mul(Integer(2), Pow(b_, Integer(2)), Pow(h_, Integer(2)))), Mul(Integer(9), a_, c_, Pow(h_, Integer(2))))), Not(PositiveQ(Add(Mul(Integer(4), a_), Mul(Integer(-1), Mul(Pow(b_, Integer(2)), Pow(c_, Integer(-1)))))))), (e, f, c, g, x, b, a, h, d)))
    rule594 = ReplacementRule(pattern594, lambda e, f, c, g, x, b, a, h, d : With(List(Set(Integer(q), Mul(Mul(Integer(-1), c), Pow(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(-1))))), Mul(Mul(Pow(Mul(Integer(q), Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))), Int(Mul(Add(g, Mul(h, x)), Pow(Mul(Pow(Add(Mul(Integer(q), a), Mul(b, Integer(q), x), Mul(c, Integer(q), Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))), x))))
    rubi.add(rule594)

    pattern595 = Pattern(Int(Mul(Add(g_, Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(3))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(3), a_, f_))), ZeroQ(Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(9), a_, Pow(h_, Integer(2))))), Not(PositiveQ(a_))), (f, c, x, g, a, h, d)))
    rule595 = ReplacementRule(pattern595, lambda f, c, x, g, a, h, d : Mul(Mul(Pow(Add(Integer(1), Mul(c, Mul(Pow(x, Integer(2)), Pow(a, Integer(-1))))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))), Int(Mul(Add(g, Mul(h, x)), Pow(Mul(Pow(Add(Integer(1), Mul(c, Mul(Pow(x, Integer(2)), Pow(a, Integer(-1))))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(d, Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)))
    rubi.add(rule595)

    pattern596 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), cons((Mul(Pow(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2)))), q_), Add(g_, Mul(h_, x_))), x_), (e, f, q, c, g, x, b, p, a, h, d)))
    rule596 = ReplacementRule(pattern596, lambda e, f, q, c, g, x, b, p, a, h, d : Defer(Integer(Int)))
    rubi.add(rule596)

    pattern597 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), cons((Mul(Pow(Add(a_, Mul(c_, Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2)))), q_), Add(g_, Mul(h_, x_))), x_), (e, f, q, c, g, x, p, a, h, d)))
    rule597 = ReplacementRule(pattern597, lambda e, f, q, c, g, x, p, a, h, d : Defer(Integer(Int)))
    rubi.add(rule597)

    pattern598 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), u_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, f, q, c, g, x, m, u, b, p, a, h, d)))
    rule598 = ReplacementRule(pattern598, lambda e, f, q, c, g, x, m, u, b, p, a, h, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q)), x), x, u)))
    rubi.add(rule598)

    pattern599 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), u_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, f, q, c, g, x, m, u, p, a, h, d)))
    rule599 = ReplacementRule(pattern599, lambda e, f, q, c, g, x, m, u, p, a, h, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q)), x), x, u)))
    rubi.add(rule599)

    pattern600 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(v_, Wildcard.optional('q', Integer(1))), Pow(z_, Wildcard.optional('m', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(z_, x_), QuadraticQ(List(u_, v_), x_), Not(And(LinearMatchQ(z_, x_), QuadraticMatchQ(List(u_, v_), x_)))), (q, x, z, m, u, p, v)))
    rule600 = ReplacementRule(pattern600, lambda q, x, z, m, u, p, v : Int(Mul(Pow(ExpandToSum(z, x), m), Pow(ExpandToSum(u, x), p), Pow(ExpandToSum(v, x), q)), x))
    rubi.add(rule600)

    pattern601 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('h', Integer(0)), Mul(Wildcard.optional('i', Integer(1)), x_)), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(i, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(e_, f_), Mul(d_, g_))), ZeroQ(Add(m_, Mul(Integer(-1), n_))), Or(IntegerQ(m_), And(PositiveQ(d_), PositiveQ(f_)))), (e, n, q, c, g, x, f, m, i, b, p, a, h, d)))
    rule601 = ReplacementRule(pattern601, lambda e, n, q, c, g, x, f, m, i, b, p, a, h, d : Int(Mul(Pow(Add(h, Mul(i, x)), q), Pow(Add(Mul(d, f), Mul(e, g, Pow(x, Integer(2)))), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))
    rubi.add(rule601)

    pattern602 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), x_)), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('h', Integer(0)), Mul(Wildcard.optional('i', Integer(1)), x_)), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(i, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(PositiveIntegerQ(p_), NegativeIntegerQ(m_)), (e, f, n, q, g, c, x, m, i, b, p, a, h, d)))
    rule602 = ReplacementRule(pattern602, lambda e, f, n, q, g, c, x, m, i, b, p, a, h, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, x)), m), Pow(Add(f, Mul(g, x)), n), Pow(Add(h, Mul(i, x)), q), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x))
    rubi.add(rule602)

    pattern603 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), m_), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), x_)), n_), Pow(Add(Wildcard.optional('h', Integer(0)), Mul(Wildcard.optional('i', Integer(1)), x_)), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(i, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(e_, f_), Mul(d_, g_))), ZeroQ(Add(m_, Mul(Integer(-1), n_)))), (e, f, q, c, g, x, n, m, i, b, p, a, h, d)))
    rule603 = ReplacementRule(pattern603, lambda e, f, q, c, g, x, n, m, i, b, p, a, h, d : Mul(Pow(Add(d, Mul(e, x)), FracPart(m)), Mul(Pow(Add(f, Mul(g, x)), FracPart(m)), Pow(Pow(Add(Mul(d, f), Mul(e, g, Pow(x, Integer(2)))), FracPart(m)), Integer(-1))), Int(Mul(Pow(Add(h, Mul(i, x)), q), Pow(Add(Mul(d, f), Mul(e, g, Pow(x, Integer(2)))), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))
    rubi.add(rule603)

    pattern604 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), Or(IntegerQ(p_), PositiveQ(Mul(c_, Pow(f_, Integer(-1))))), Or(Not(IntegerQ(q_)), LessEqual(LeafCount(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2))))), LeafCount(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2)))))))), (e, f, q, c, x, A, b, p, B, C, d, a)))
    rule604 = ReplacementRule(pattern604, lambda e, f, q, c, x, A, b, p, B, C, d, a : Mul(Pow(Mul(c, Pow(f, Integer(-1))), p), Int(Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q)), Add(A, Mul(B, x), Mul(C, Pow(x, Integer(2))))), x)))
    rubi.add(rule604)

    pattern605 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), Or(IntegerQ(p_), PositiveQ(Mul(c_, Pow(f_, Integer(-1))))), Or(Not(IntegerQ(q_)), LessEqual(LeafCount(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2))))), LeafCount(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2)))))))), (e, f, q, c, x, A, b, p, a, C, d)))
    rule605 = ReplacementRule(pattern605, lambda e, f, q, c, x, A, b, p, a, C, d : Mul(Pow(Mul(c, Pow(f, Integer(-1))), p), Int(Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q)), Add(A, Mul(C, Pow(x, Integer(2))))), x)))
    rubi.add(rule605)

    pattern606 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), Not(IntegerQ(p_)), Not(IntegerQ(q_)), Not(PositiveQ(Mul(c_, Pow(f_, Integer(-1)))))), (e, f, q, c, x, A, b, p, B, C, d, a)))
    rule606 = ReplacementRule(pattern606, lambda e, f, q, c, x, A, b, p, B, C, d, a : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(d, IntPart(p)), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q)), Add(A, Mul(B, x), Mul(C, Pow(x, Integer(2))))), x)))
    rubi.add(rule606)

    pattern607 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), Not(IntegerQ(p_)), Not(IntegerQ(q_)), Not(PositiveQ(Mul(c_, Pow(f_, Integer(-1)))))), (e, f, q, c, x, A, b, p, a, C, d)))
    rule607 = ReplacementRule(pattern607, lambda e, f, q, c, x, A, b, p, a, C, d : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(d, IntPart(p)), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(p, q)), Add(A, Mul(C, Pow(x, Integer(2))))), x)))
    rubi.add(rule607)

    pattern608 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, f, q, c, x, A, b, p, B, C, d, a)))
    rule608 = ReplacementRule(pattern608, lambda e, f, q, c, x, A, b, p, B, C, d, a : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), p)), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(B, x), Mul(C, Pow(x, Integer(2))))), x)))
    rubi.add(rule608)

    pattern609 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, f, q, c, x, A, b, p, a, C, d)))
    rule609 = ReplacementRule(pattern609, lambda e, f, q, c, x, A, b, p, a, C, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), p)), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(C, Pow(x, Integer(2))))), x)))
    rubi.add(rule609)

    pattern610 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, q, c, x, A, b, p, B, C, d, a)))
    rule610 = ReplacementRule(pattern610, lambda f, q, c, x, A, b, p, B, C, d, a : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), p)), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(B, x), Mul(C, Pow(x, Integer(2))))), x)))
    rubi.add(rule610)

    pattern611 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, q, c, x, A, b, p, a, C, d)))
    rule611 = ReplacementRule(pattern611, lambda f, q, c, x, A, b, p, a, C, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(b, Mul(Integer(2), c, x)), Mul(Integer(2), p)), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(C, Pow(x, Integer(2))))), x)))
    rubi.add(rule611)

    pattern612 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), IntegersQ(p_, q_), Greater(p_, Integer(0))), (e, f, q, c, x, A, b, p, B, C, d, a)))
    rule612 = ReplacementRule(pattern612, lambda e, f, q, c, x, A, b, p, B, C, d, a : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(B, x), Mul(C, Pow(x, Integer(2))))), x), x))
    rubi.add(rule612)

    pattern613 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), IntegersQ(p_, q_), Greater(p_, Integer(0))), (e, f, q, c, x, A, b, p, a, C, d)))
    rule613 = ReplacementRule(pattern613, lambda e, f, q, c, x, A, b, p, a, C, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(C, Pow(x, Integer(2))))), x), x))
    rubi.add(rule613)

    pattern614 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), IntegersQ(p_, q_), Or(Greater(p_, Integer(0)), Greater(q_, Integer(0)))), (e, f, q, c, x, A, p, B, C, d, a)))
    rule614 = ReplacementRule(pattern614, lambda e, f, q, c, x, A, p, B, C, d, a : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(B, x), Mul(C, Pow(x, Integer(2))))), x), x))
    rubi.add(rule614)

    pattern615 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), IntegersQ(p_, q_), Or(Greater(p_, Integer(0)), Greater(q_, Integer(0)))), (e, f, q, c, x, A, p, a, C, d)))
    rule615 = ReplacementRule(pattern615, lambda e, f, q, c, x, A, p, a, C, d : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(C, Pow(x, Integer(2))))), x), x))
    rubi.add(rule615)

    pattern616 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (e, f, q, c, x, A, b, p, B, C, d, a)))
    rule616 = ReplacementRule(pattern616, lambda e, f, q, c, x, A, b, p, B, C, d, a : Add(Mul(Add(Mul(A, b, c), Mul(Integer(-1), Mul(Integer(2), a, B, c)), Mul(a, b, C), Mul(Integer(-1), Mul(Add(Mul(c, Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c)))), Mul(Integer(-1), Mul(C, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)))))), x))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(e, q, Add(Mul(A, b, c), Mul(Integer(-1), Mul(Integer(2), a, B, c)), Mul(a, b, C))), Mul(Integer(-1), Mul(d, Add(Mul(c, Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c))), Add(Mul(Integer(2), p), Integer(3))), Mul(C, Add(Mul(Integer(2), a, c), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, Integer(2))))))))), Mul(Add(Mul(Integer(2), f, q, Add(Mul(A, b, c), Mul(Integer(-1), Mul(Integer(2), a, B, c)), Mul(a, b, C))), Mul(Integer(-1), Mul(e, Add(Mul(c, Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c))), Add(Mul(Integer(2), p), q, Integer(3))), Mul(C, Add(Mul(Integer(2), a, c, Add(q, Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, q, Integer(2)))))))))), x), Mul(Integer(-1), Mul(f, Add(Mul(c, Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Mul(C, Add(Mul(Integer(2), a, c, Add(Mul(Integer(2), q), Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, Mul(Integer(2), q), Integer(2))))))), Pow(x, Integer(2))))), x)), x)))))
    rubi.add(rule616)

    pattern617 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (e, f, q, c, x, A, b, p, a, C, d)))
    rule617 = ReplacementRule(pattern617, lambda e, f, q, c, x, A, b, p, a, C, d : Add(Mul(Add(Mul(A, b, c), Mul(a, b, C), Mul(Add(Mul(Integer(2), A, Pow(c, Integer(2))), Mul(C, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c))))), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(A, c, Add(Mul(Integer(2), c, d, Add(Mul(Integer(2), p), Integer(3))), Mul(b, e, q))), Mul(Integer(-1), Mul(C, Add(Mul(Integer(2), a, c, d), Mul(Integer(-1), Mul(Pow(b, Integer(2)), d, Add(p, Integer(2)))), Mul(Integer(-1), Mul(a, b, e, q))))), Mul(Add(Mul(C, Add(Mul(Integer(2), a, b, f, q), Mul(Integer(-1), Mul(Integer(2), a, c, e, Add(q, Integer(1)))), Mul(Pow(b, Integer(2)), e, Add(p, q, Integer(2))))), Mul(Integer(2), A, c, Add(Mul(b, f, q), Mul(c, e, Add(Mul(Integer(2), p), q, Integer(3)))))), x), Mul(Integer(-1), Mul(f, Add(Mul(Integer(-2), A, Pow(c, Integer(2)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Mul(C, Add(Mul(Integer(2), a, c, Add(Mul(Integer(2), q), Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, Mul(Integer(2), q), Integer(2))))))), Pow(x, Integer(2))))), x)), x)))))
    rubi.add(rule617)

    pattern618 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (e, f, q, c, x, A, p, B, C, d, a)))
    rule618 = ReplacementRule(pattern618, lambda e, f, q, c, x, A, p, B, C, d, a : Add(Mul(Add(Mul(a, B), Mul(Integer(-1), Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), x))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(2), Pow(Mul(Mul(Integer(-4), a, c), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(A, c, d, Add(Mul(Integer(2), p), Integer(3))), Mul(Integer(-1), Mul(a, Add(Mul(C, d), Mul(B, e, q)))), Mul(Add(Mul(A, c, e, Add(Mul(Integer(2), p), q, Integer(3))), Mul(Integer(-1), Mul(a, Add(Mul(Integer(2), B, f, q), Mul(C, e, Add(q, Integer(1))))))), x), Mul(Integer(-1), Mul(f, Add(Mul(a, C, Add(Mul(Integer(2), q), Integer(1))), Mul(Integer(-1), Mul(A, c, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))), Pow(x, Integer(2))))), x)), x)))))
    rubi.add(rule618)

    pattern619 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (e, f, q, c, x, A, p, a, C, d)))
    rule619 = ReplacementRule(pattern619, lambda e, f, q, c, x, A, p, a, C, d : Add(Mul(Mul(Integer(-1), Add(Mul(A, c), Mul(Integer(-1), Mul(a, C)))), x, Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(Integer(2), a, c, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(2), Pow(Mul(Integer(4), a, c, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(A, c, d, Add(Mul(Integer(2), p), Integer(3))), Mul(Integer(-1), Mul(a, C, d)), Mul(Add(Mul(A, c, e, Add(Mul(Integer(2), p), q, Integer(3))), Mul(Integer(-1), Mul(a, C, e, Add(q, Integer(1))))), x), Mul(Integer(-1), Mul(f, Add(Mul(a, C, Add(Mul(Integer(2), q), Integer(1))), Mul(Integer(-1), Mul(A, c, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule619)

    pattern620 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (f, q, c, x, A, b, p, B, C, d, a)))
    rule620 = ReplacementRule(pattern620, lambda f, q, c, x, A, b, p, B, C, d, a : Add(Mul(Add(Mul(A, b, c), Mul(Integer(-1), Mul(Integer(2), a, B, c)), Mul(a, b, C), Mul(Integer(-1), Mul(Add(Mul(c, Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c)))), Mul(Integer(-1), Mul(C, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)))))), x))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(Mul(Integer(-1), d), Add(Mul(c, Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c))), Add(Mul(Integer(2), p), Integer(3))), Mul(C, Add(Mul(Integer(2), a, c), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, Integer(2)))))))), Mul(Mul(Integer(2), f, q, Add(Mul(A, b, c), Mul(Integer(-1), Mul(Integer(2), a, B, c)), Mul(a, b, C))), x), Mul(Integer(-1), Mul(f, Add(Mul(c, Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Mul(C, Add(Mul(Integer(2), a, c, Add(Mul(Integer(2), q), Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, Mul(Integer(2), q), Integer(2))))))), Pow(x, Integer(2))))), x)), x)))))
    rubi.add(rule620)

    pattern621 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_, q_), Less(p_, Integer(-1)), Greater(q_, Integer(0))), (f, q, c, x, A, b, p, a, C, d)))
    rule621 = ReplacementRule(pattern621, lambda f, q, c, x, A, b, p, a, C, d : Add(Mul(Add(Mul(A, b, c), Mul(a, b, C), Mul(Add(Mul(Integer(2), A, Pow(c, Integer(2))), Mul(C, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c))))), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(-1))), Simp(Add(Mul(A, c, Mul(Integer(2), c, d, Add(Mul(Integer(2), p), Integer(3)))), Mul(Integer(-1), Mul(C, Add(Mul(Integer(2), a, c, d), Mul(Integer(-1), Mul(Pow(b, Integer(2)), d, Add(p, Integer(2))))))), Mul(Add(Mul(C, Mul(Integer(2), a, b, f, q)), Mul(Integer(2), A, c, Mul(b, f, q))), x), Mul(Integer(-1), Mul(f, Add(Mul(Integer(-2), A, Pow(c, Integer(2)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Mul(C, Add(Mul(Integer(2), a, c, Add(Mul(Integer(2), q), Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, Mul(Integer(2), q), Integer(2))))))), Pow(x, Integer(2))))), x)), x)))))
    rubi.add(rule621)

    pattern622 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_))), Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_))))))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (e, f, q, c, x, A, b, p, B, C, d, a)))
    rule622 = ReplacementRule(pattern622, lambda e, f, q, c, x, A, b, p, B, C, d, a : Add(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Integer(-1))), Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Add(Mul(Integer(2), a, c, e), Mul(Integer(-1), Mul(b, Add(Mul(c, d), Mul(a, f)))))), Mul(Add(Mul(A, b), Mul(Integer(-1), Mul(a, B))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f)))))), Mul(c, Add(Mul(A, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f)))))), Mul(Integer(-1), Mul(B, Add(Mul(b, c, d), Mul(Integer(-1), Mul(Integer(2), a, c, e)), Mul(a, b, f)))), Mul(C, Add(Mul(Pow(b, Integer(2)), d), Mul(Integer(-1), Mul(a, b, e)), Mul(Integer(-1), Mul(Integer(2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))))), x))), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c)), Mul(Integer(-1), Mul(Integer(2), a, C))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(-1), Mul(b, Add(Mul(B, c, d), Mul(A, c, e), Mul(a, C, e), Mul(a, B, f)))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(B, c, e)), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2)))))), Mul(Integer(-1), Mul(e, Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Add(Mul(Integer(2), a, c, e), Mul(Integer(-1), Mul(b, Add(Mul(c, d), Mul(a, f)))))), Mul(Add(Mul(A, b), Mul(Integer(-1), Mul(a, B))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))))), Add(p, q, Integer(2)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), f, Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Add(Mul(Integer(2), a, c, e), Mul(Integer(-1), Mul(b, Add(Mul(c, d), Mul(a, f)))))), Mul(Add(Mul(A, b), Mul(Integer(-1), Mul(a, B))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(-1), Mul(b, Add(Mul(B, c, d), Mul(A, c, e), Mul(a, C, e), Mul(a, B, f)))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(B, c, e)), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(b, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, e, Add(Mul(Integer(2), p), q, Integer(4)))))))), x)), Mul(Integer(-1), Mul(c, f, Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(-1), Mul(b, Add(Mul(B, c, d), Mul(A, c, e), Mul(a, C, e), Mul(a, B, f)))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(B, c, e)), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule622)

    pattern623 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_))), Add(Mul(c_, e_), Mul(Integer(-1), Mul(b_, f_))))))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (e, f, q, c, x, A, b, p, a, C, d)))
    rule623 = ReplacementRule(pattern623, lambda e, f, q, c, x, A, b, p, a, C, d : Add(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Integer(-1))), Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Add(Mul(Integer(2), a, c, e), Mul(Integer(-1), Mul(b, Add(Mul(c, d), Mul(a, f)))))), Mul(Mul(A, b), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f)))))), Mul(c, Add(Mul(A, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f)))))), Mul(C, Add(Mul(Pow(b, Integer(2)), d), Mul(Integer(-1), Mul(a, b, e)), Mul(Integer(-1), Mul(Integer(2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))))), x))), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Add(Mul(Integer(-2), A, c), Mul(Integer(-1), Mul(Integer(2), a, C))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(c, e), Mul(Integer(-1), Mul(b, f)))))), Add(p, Integer(1))), Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(-1), Mul(b, Add(Mul(Add(A), c, e), Mul(a, C, e)))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2)))))), Mul(Integer(-1), Mul(e, Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Add(Mul(Integer(2), a, c, e), Mul(Integer(-1), Mul(b, Add(Mul(c, d), Mul(a, f)))))), Mul(Mul(A, b), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))))), Add(p, q, Integer(2)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), f, Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Add(Mul(Integer(2), a, c, e), Mul(Integer(-1), Mul(b, Add(Mul(c, d), Mul(a, f)))))), Mul(Mul(A, b), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Add(Mul(b, e), Mul(Integer(2), a, f))))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(-1), Mul(b, Add(Mul(A, c, e), Mul(a, C, e)))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(b, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, e, Add(Mul(Integer(2), p), q, Integer(4)))))))), x)), Mul(Integer(-1), Mul(c, f, Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(-1), Mul(b, Add(Mul(A, c, e), Mul(a, C, e)))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule623)

    pattern624 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(a_, c_, Pow(e_, Integer(2))), Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (e, f, q, c, x, A, p, B, C, d, a)))
    rule624 = ReplacementRule(pattern624, lambda e, f, q, c, x, A, p, B, C, d, a : Add(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Mul(Integer(-4), a, c), Add(Mul(a, c, Pow(e, Integer(2))), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Integer(2), a, c, e)), Mul(Mul(Mul(Integer(-1), a), B), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(c, Add(Mul(A, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(Integer(-1), Mul(B, Mul(Integer(-2), a, c, e))), Mul(C, Mul(Integer(-2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))), x))), Mul(Mul(Integer(1), Pow(Mul(Mul(Integer(-4), a, c), Add(Mul(a, c, Pow(e, Integer(2))), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Add(Mul(Integer(-2), A, c), Mul(Integer(-1), Mul(Integer(2), a, C))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Mul(Mul(Integer(-1), a), e), Mul(c, e)))), Add(p, Integer(1))), Mul(Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(B, c, e)), Mul(Integer(-1), Mul(a, C, f))))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2)))))), Mul(Integer(-1), Mul(e, Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Integer(2), a, c, e)), Mul(Mul(Mul(Integer(-1), a), B), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Add(Integer(2)), a, f)))))), Add(p, q, Integer(2)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), f, Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Integer(2), a, c, e)), Mul(Mul(Mul(Integer(-1), a), B), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Mul(Integer(-1), c), Mul(Add(Integer(2)), a, f))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(B, c, e)), Mul(Integer(-1), Mul(a, C, f))))))), Mul(Mul(Integer(-1), c), e, Add(Mul(Integer(2), p), q, Integer(4)))))), x)), Mul(Integer(-1), Mul(c, f, Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(B, c, e)), Mul(Integer(-1), Mul(a, C, f))))))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule624)

    pattern625 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(a_, c_, Pow(e_, Integer(2))), Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (e, f, q, c, x, A, p, a, C, d)))
    rule625 = ReplacementRule(pattern625, lambda e, f, q, c, x, A, p, a, C, d : Add(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Mul(Integer(-4), a, c), Add(Mul(a, c, Pow(e, Integer(2))), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Integer(2), a, c, e)), Mul(c, Add(Mul(A, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(C, Mul(Integer(-2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))), x))), Mul(Mul(Integer(1), Pow(Mul(Mul(Integer(-4), a, c), Add(Mul(a, c, Pow(e, Integer(2))), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Add(Mul(Integer(-2), A, c), Mul(Integer(-1), Mul(Integer(2), a, C))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Mul(Mul(Integer(-1), a), e), Mul(c, e)))), Add(p, Integer(1))), Mul(Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f))))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2)))))), Mul(Integer(-1), Mul(e, Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Integer(2), a, c, e)), Add(p, q, Integer(2)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), f, Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Integer(2), a, c, e)), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f))))))), Mul(Mul(Integer(-1), c), e, Add(Mul(Integer(2), p), q, Integer(4)))))), x)), Mul(Integer(-1), Mul(c, f, Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f))))))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule625)

    pattern626 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(Pow(b_, Integer(2)), d_, f_), Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (f, q, c, x, A, b, p, B, C, d, a)))
    rule626 = ReplacementRule(pattern626, lambda f, q, c, x, A, b, p, B, C, d, a : Add(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(Pow(b, Integer(2)), d, f), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Mul(Integer(-1), b), Add(Mul(c, d), Mul(a, f)))), Mul(Add(Mul(A, b), Mul(Integer(-1), Mul(a, B))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(c, Add(Mul(A, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(Integer(-1), Mul(B, Add(Mul(b, c, d), Mul(a, b, f)))), Mul(C, Add(Mul(Pow(b, Integer(2)), d), Mul(Integer(-1), Mul(Integer(2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))))), x))), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(Pow(b, Integer(2)), d, f), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c)), Mul(Integer(-1), Mul(Integer(2), a, C))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Mul(b, d), Mul(Mul(Integer(-1), b), f)))), Add(p, Integer(1))), Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(-1), Mul(b, Add(Mul(B, c, d), Mul(a, B, f)))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2)))))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), f, Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Mul(Integer(-1), b), Add(Mul(c, d), Mul(a, f)))), Mul(Add(Mul(A, b), Mul(Integer(-1), Mul(a, B))), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(-1), Mul(b, Add(Mul(B, c, d), Mul(a, B, f)))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f)))))))), Mul(b, f, Add(p, Integer(1)))))), x)), Mul(Integer(-1), Mul(c, f, Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(-1), Mul(b, Add(Mul(B, c, d), Mul(a, B, f)))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule626)

    pattern627 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1)), NonzeroQ(Add(Mul(Pow(b_, Integer(2)), d_, f_), Pow(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_))), Integer(2)))), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, Integer(-1))))), (f, q, c, x, A, b, p, a, C, d)))
    rule627 = ReplacementRule(pattern627, lambda f, q, c, x, A, b, p, a, C, d : Add(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(Pow(b, Integer(2)), d, f), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Mul(Integer(-1), b), Add(Mul(c, d), Mul(a, f)))), Mul(Mul(A, b), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(c, Add(Mul(A, Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f))))), Mul(C, Add(Mul(Pow(b, Integer(2)), d), Mul(Integer(-1), Mul(Integer(2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))))))), x))), Mul(Mul(Integer(1), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(Pow(b, Integer(2)), d, f), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2))), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(Add(Mul(Integer(-2), A, c), Mul(Integer(-1), Mul(Integer(2), a, C))), Add(Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Integer(2)), Mul(Integer(-1), Mul(Mul(b, d), Mul(Mul(Integer(-1), b), f)))), Add(p, Integer(1))), Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(a, f, Add(p, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(p, Integer(2)))))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), f, Add(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Mul(Mul(Integer(-1), b), Add(Mul(c, d), Mul(a, f)))), Mul(Mul(A, b), Add(Mul(Integer(2), Pow(c, Integer(2)), d), Mul(Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(c, Mul(Integer(2), a, f)))))), Add(p, q, Integer(2))), Mul(Integer(-1), Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f)))))))), Mul(b, f, Add(p, Integer(1)))))), x)), Mul(Integer(-1), Mul(c, f, Add(Mul(Pow(b, Integer(2)), Add(Mul(C, d), Mul(A, f))), Mul(Integer(2), Add(Mul(A, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Integer(-1), Mul(a, Add(Mul(c, C, d), Mul(Integer(-1), Mul(a, C, f)))))))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(5)), Pow(x, Integer(2))))), x)), x))))
    rubi.add(rule627)

    pattern628 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(p_, q_, Integer(1))), NonzeroQ(Add(Mul(Integer(2), p_), Mul(Integer(2), q_), Integer(3)))), (e, f, q, c, x, A, b, p, B, C, d, a)))
    rule628 = ReplacementRule(pattern628, lambda e, f, q, c, x, A, b, p, B, C, d, a : Add(Mul(Add(Mul(B, c, f, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Mul(C, Add(Mul(b, f, p), Mul(Integer(-1), Mul(c, e, Add(Mul(Integer(2), p), q, Integer(2)))))), Mul(Integer(2), c, C, f, Add(p, q, Integer(1)), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(p, Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(C, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(C, e), Mul(Integer(-1), Mul(B, f))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(Pow(b, Integer(2)), C, d, f, p), Mul(a, c, Add(Mul(C, Add(Mul(Integer(2), d, f), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Add(Mul(Integer(2), p), q, Integer(2)))))), Mul(f, Add(Mul(B, e), Mul(Integer(-1), Mul(Integer(2), A, f))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))), Mul(Add(Mul(Integer(2), p, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(C, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(C, e), Mul(Integer(-1), Mul(B, f))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(C, e, f, p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(Integer(-1), Mul(b, c, Add(Mul(C, Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f))), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(-1), Mul(B, e)), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))))), x), Mul(Add(Mul(p, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(Mul(C, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(C, e), Mul(Integer(-1), Mul(B, f))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(C, Pow(f, Integer(2)), p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Add(Mul(C, Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f))), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(-1), Mul(B, e)), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule628)

    pattern629 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(p_, q_, Integer(1))), NonzeroQ(Add(Mul(Integer(2), p_), Mul(Integer(2), q_), Integer(3)))), (e, f, q, c, x, A, b, p, a, C, d)))
    rule629 = ReplacementRule(pattern629, lambda e, f, q, c, x, A, b, p, a, C, d : Add(Mul(Add(Mul(C, Add(Mul(b, f, p), Mul(Integer(-1), Mul(c, e, Add(Mul(Integer(2), p), q, Integer(2)))))), Mul(Integer(2), c, C, f, Add(p, q, Integer(1)), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(p, Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Add(Mul(C, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Mul(C, e), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(Pow(b, Integer(2)), C, d, f, p), Mul(a, c, Add(Mul(C, Add(Mul(Integer(2), d, f), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Add(Mul(Integer(2), p), q, Integer(2)))))), Mul(f, Mul(Integer(-2), A, f), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))), Mul(Add(Mul(Integer(2), p, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(C, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Mul(C, e), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(C, e, f, p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(Integer(-1), Mul(b, c, Add(Mul(C, Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f))), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))))), x), Mul(Add(Mul(p, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(Mul(C, Add(Mul(c, e), Mul(Integer(-1), Mul(b, f))), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Mul(C, e), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(C, Pow(f, Integer(2)), p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Add(Mul(C, Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f))), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule629)

    pattern630 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(p_, q_, Integer(1))), NonzeroQ(Add(Mul(Integer(2), p_), Mul(Integer(2), q_), Integer(3)))), (e, f, q, c, x, A, p, B, C, d, a)))
    rule630 = ReplacementRule(pattern630, lambda e, f, q, c, x, A, p, B, C, d, a : Add(Mul(Add(Mul(B, c, f, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Mul(C, Mul(Mul(Integer(-1), c), e, Add(Mul(Integer(2), p), q, Integer(2)))), Mul(Integer(2), c, C, f, Add(p, q, Integer(1)), x)), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(p, Mul(Mul(Integer(-1), a), e), Add(Mul(C, Mul(c, e), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(C, e), Mul(Integer(-1), Mul(B, f))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Mul(a, c, Add(Mul(C, Add(Mul(Integer(2), d, f), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Add(Mul(Integer(2), p), q, Integer(2)))))), Mul(f, Add(Mul(B, e), Mul(Integer(-1), Mul(Integer(2), A, f))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(Mul(Integer(2), p, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(C, Mul(c, e), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(C, e), Mul(Integer(-1), Mul(B, f))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Mul(C, e, f, p, Mul(Integer(-4), a, c)))), x), Mul(Add(Mul(p, Mul(c, e), Add(Mul(C, Mul(c, e), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Add(Mul(C, e), Mul(Integer(-1), Mul(B, f))), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(C, Pow(f, Integer(2)), p, Mul(Integer(-4), a, c)), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Add(Mul(C, Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f))), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(-1), Mul(B, e)), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule630)

    pattern631 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(p_, q_, Integer(1))), NonzeroQ(Add(Mul(Integer(2), p_), Mul(Integer(2), q_), Integer(3)))), (e, f, q, c, x, A, p, a, C, d)))
    rule631 = ReplacementRule(pattern631, lambda e, f, q, c, x, A, p, a, C, d : Add(Mul(Add(Mul(C, Mul(Mul(Integer(-1), c), e, Add(Mul(Integer(2), p), q, Integer(2)))), Mul(Integer(2), c, C, f, Add(p, q, Integer(1)), x)), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Mul(Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(p, Mul(Mul(Integer(-1), a), e), Add(Mul(C, Mul(c, e), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Mul(C, e), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Mul(a, c, Add(Mul(C, Add(Mul(Integer(2), d, f), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Add(Mul(Integer(2), p), q, Integer(2)))))), Mul(f, Mul(Integer(-2), A, f), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(Mul(Integer(2), p, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(C, Mul(c, e), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Mul(C, e), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Mul(C, e, f, p, Mul(Integer(-4), a, c)))), x), Mul(Add(Mul(p, Mul(c, e), Add(Mul(C, Mul(c, e), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Mul(C, e), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(C, Pow(f, Integer(2)), p, Mul(Integer(-4), a, c)), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Add(Mul(C, Add(Pow(e, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d, f))), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule631)

    pattern632 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(p_, q_, Integer(1))), NonzeroQ(Add(Mul(Integer(2), p_), Mul(Integer(2), q_), Integer(3)))), (f, q, c, x, A, b, p, B, C, d, a)))
    rule632 = ReplacementRule(pattern632, lambda f, q, c, x, A, b, p, B, C, d, a : Add(Mul(Add(Mul(B, c, f, Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Mul(C, Mul(b, f, p)), Mul(Integer(2), c, C, f, Add(p, q, Integer(1)), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(p, Mul(b, d), Add(Mul(C, Mul(Mul(Integer(-1), b), f), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Mul(Mul(Integer(-1), B), f), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(Pow(b, Integer(2)), C, d, f, p), Mul(a, c, Add(Mul(C, Mul(Integer(2), d, f)), Mul(f, Mul(Integer(-2), A, f), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))), Mul(Add(Mul(Integer(2), p, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Add(Mul(C, Mul(Mul(Integer(-1), b), f), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Mul(Mul(Integer(-1), B), f), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Mul(Mul(Integer(-1), b), c, Add(Mul(C, Mul(Integer(-4), d, f), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))), x), Mul(Add(Mul(p, Mul(Mul(Integer(-1), b), f), Add(Mul(C, Mul(Mul(Integer(-1), b), f), Add(q, Integer(1))), Mul(Integer(-1), Mul(c, Mul(Mul(Integer(-1), B), f), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3)))))), Mul(Add(p, q, Integer(1)), Add(Mul(C, Pow(f, Integer(2)), p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Add(Mul(C, Mul(Integer(-4), d, f), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule632)

    pattern633 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(p_, q_, Integer(1))), NonzeroQ(Add(Mul(Integer(2), p_), Mul(Integer(2), q_), Integer(3)))), (f, q, c, x, A, b, p, a, C, d)))
    rule633 = ReplacementRule(pattern633, lambda f, q, c, x, A, b, p, a, C, d : Add(Mul(Add(Mul(C, Mul(b, f, p)), Mul(Integer(2), c, C, f, Add(p, q, Integer(1)), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Mul(Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Add(q, Integer(1))), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Pow(f, Integer(2)), Add(p, q, Integer(1)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(-1))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), q), Simp(Add(Mul(p, Mul(b, d), Mul(C, Mul(Mul(Integer(-1), b), f), Add(q, Integer(1)))), Mul(Add(p, q, Integer(1)), Add(Mul(Pow(b, Integer(2)), C, d, f, p), Mul(a, c, Add(Mul(C, Mul(Integer(2), d, f)), Mul(f, Mul(Integer(-2), A, f), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))), Mul(Add(Mul(Integer(2), p, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))), Mul(C, Mul(Mul(Integer(-1), b), f), Add(q, Integer(1)))), Mul(Add(p, q, Integer(1)), Mul(Mul(Integer(-1), b), c, Add(Mul(C, Mul(Integer(-4), d, f), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))), x), Mul(Add(Mul(p, Mul(Mul(Integer(-1), b), f), Mul(C, Mul(Mul(Integer(-1), b), f), Add(q, Integer(1)))), Mul(Add(p, q, Integer(1)), Add(Mul(C, Pow(f, Integer(2)), p, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Add(Mul(C, Mul(Integer(-4), d, f), Add(Mul(Integer(2), p), q, Integer(2))), Mul(f, Add(Mul(Integer(2), C, d), Mul(Integer(2), A, f)), Add(Mul(Integer(2), p), Mul(Integer(2), q), Integer(3))))))))), Pow(x, Integer(2)))), x)), x)))))
    rubi.add(rule633)

    pattern634 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, x, A, b, B, C, d, a)))
    rule634 = ReplacementRule(pattern634, lambda e, f, c, x, A, b, B, C, d, a : With(List(Set(Integer(q), Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, c, d, e)), Mul(a, c, Pow(e, Integer(2))), Mul(Pow(b, Integer(2)), d, f), Mul(Integer(-1), Mul(Integer(2), a, c, d, f)), Mul(Integer(-1), Mul(a, b, e, f)), Mul(Pow(a, Integer(2)), Pow(f, Integer(2)))))), Condition(Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(A, Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(a, c, C, d)), Mul(Integer(-1), Mul(A, b, c, e)), Mul(a, B, c, e), Mul(A, Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(a, b, B, f)), Mul(Integer(-1), Mul(a, A, c, f)), Mul(Pow(a, Integer(2)), C, f), Mul(c, Add(Mul(B, c, d), Mul(Integer(-1), Mul(b, C, d)), Mul(Integer(-1), Mul(A, c, e)), Mul(a, C, e), Mul(A, b, f), Mul(Integer(-1), Mul(a, B, f))), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(c, C, Pow(d, Integer(2))), Mul(Integer(-1), Mul(B, c, d, e)), Mul(A, c, Pow(e, Integer(2))), Mul(b, B, d, f), Mul(Integer(-1), Mul(A, c, d, f)), Mul(Integer(-1), Mul(a, C, d, f)), Mul(Integer(-1), Mul(A, b, e, f)), Mul(a, A, Pow(f, Integer(2))), Mul(Integer(-1), Mul(f, Add(Mul(B, c, d), Mul(Integer(-1), Mul(b, C, d)), Mul(Integer(-1), Mul(A, c, e)), Mul(a, C, e), Mul(A, b, f), Mul(Integer(-1), Mul(a, B, f))), x))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Integer(-1))), x))), NonzeroQ(Integer(q)))))
    rubi.add(rule634)

    pattern635 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, x, A, b, a, C, d)))
    rule635 = ReplacementRule(pattern635, lambda e, f, c, x, A, b, a, C, d : With(List(Set(Integer(q), Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, c, d, e)), Mul(a, c, Pow(e, Integer(2))), Mul(Pow(b, Integer(2)), d, f), Mul(Integer(-1), Mul(Integer(2), a, c, d, f)), Mul(Integer(-1), Mul(a, b, e, f)), Mul(Pow(a, Integer(2)), Pow(f, Integer(2)))))), Condition(Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(A, Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(a, c, C, d)), Mul(Integer(-1), Mul(A, b, c, e)), Mul(A, Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(a, A, c, f)), Mul(Pow(a, Integer(2)), C, f), Mul(c, Add(Mul(Mul(Integer(-1), b), C, d), Mul(Integer(-1), Mul(A, c, e)), Mul(a, C, e), Mul(A, b, f)), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(c, C, Pow(d, Integer(2))), Mul(A, c, Pow(e, Integer(2))), Mul(Integer(-1), Mul(A, c, d, f)), Mul(Integer(-1), Mul(a, C, d, f)), Mul(Integer(-1), Mul(A, b, e, f)), Mul(a, A, Pow(f, Integer(2))), Mul(Integer(-1), Mul(f, Add(Mul(Mul(Integer(-1), b), C, d), Mul(Integer(-1), Mul(A, c, e)), Mul(a, C, e), Mul(A, b, f)), x))), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), Integer(-1))), x))), NonzeroQ(Integer(q)))))
    rubi.add(rule635)

    pattern636 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, A, b, B, C, d, a)))
    rule636 = ReplacementRule(pattern636, lambda f, c, x, A, b, B, C, d, a : With(List(Set(Integer(q), Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2))), Mul(Pow(b, Integer(2)), d, f), Mul(Integer(-1), Mul(Integer(2), a, c, d, f)), Mul(Pow(a, Integer(2)), Pow(f, Integer(2)))))), Condition(Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(A, Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(a, c, C, d)), Mul(A, Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(a, b, B, f)), Mul(Integer(-1), Mul(a, A, c, f)), Mul(Pow(a, Integer(2)), C, f), Mul(c, Add(Mul(B, c, d), Mul(Integer(-1), Mul(b, C, d)), Mul(A, b, f), Mul(Integer(-1), Mul(a, B, f))), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(c, C, Pow(d, Integer(2))), Mul(b, B, d, f), Mul(Integer(-1), Mul(A, c, d, f)), Mul(Integer(-1), Mul(a, C, d, f)), Mul(a, A, Pow(f, Integer(2))), Mul(Integer(-1), Mul(f, Add(Mul(B, c, d), Mul(Integer(-1), Mul(b, C, d)), Mul(A, b, f), Mul(Integer(-1), Mul(a, B, f))), x))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Integer(-1))), x))), NonzeroQ(Integer(q)))))
    rubi.add(rule636)

    pattern637 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, A, b, a, C, d)))
    rule637 = ReplacementRule(pattern637, lambda f, c, x, A, b, a, C, d : With(List(Set(Integer(q), Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2))), Mul(Pow(b, Integer(2)), d, f), Mul(Integer(-1), Mul(Integer(2), a, c, d, f)), Mul(Pow(a, Integer(2)), Pow(f, Integer(2)))))), Condition(Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(A, Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(a, c, C, d)), Mul(A, Pow(b, Integer(2)), f), Mul(Integer(-1), Mul(a, A, c, f)), Mul(Pow(a, Integer(2)), C, f), Mul(c, Add(Mul(Mul(Integer(-1), b), C, d), Mul(A, b, f)), x)), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(c, C, Pow(d, Integer(2))), Mul(Integer(-1), Mul(A, c, d, f)), Mul(Integer(-1), Mul(a, C, d, f)), Mul(a, A, Pow(f, Integer(2))), Mul(Integer(-1), Mul(f, Add(Mul(Mul(Integer(-1), b), C, d), Mul(A, b, f)), x))), Pow(Add(d, Mul(f, Pow(x, Integer(2)))), Integer(-1))), x))), NonzeroQ(Integer(q)))))
    rubi.add(rule637)

    pattern638 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, x, A, b, B, C, d, a)))
    rule638 = ReplacementRule(pattern638, lambda e, f, c, x, A, b, B, C, d, a : Add(Mul(Mul(C, Pow(c, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C)), Mul(Add(Mul(B, c), Mul(Integer(-1), Mul(b, C))), x)), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule638)

    pattern639 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, x, A, b, a, C, d)))
    rule639 = ReplacementRule(pattern639, lambda e, f, c, x, A, b, a, C, d : Add(Mul(Mul(C, Pow(c, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C)), Mul(Integer(-1), Mul(b, C, x))), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule639)

    pattern640 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, x, A, B, C, d, a)))
    rule640 = ReplacementRule(pattern640, lambda e, f, c, x, A, B, C, d, a : Add(Mul(Mul(C, Pow(c, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C)), Mul(B, c, x)), Pow(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule640)

    pattern641 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), d_, f_))))), (e, f, c, x, A, a, C, d)))
    rule641 = ReplacementRule(pattern641, lambda e, f, c, x, A, a, C, d : Add(Mul(Mul(C, Pow(c, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)), Mul(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C))), Pow(c, Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(a, Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule641)

    pattern642 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, A, b, B, C, d, a)))
    rule642 = ReplacementRule(pattern642, lambda f, c, x, A, b, B, C, d, a : Add(Mul(Mul(C, Pow(c, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(d, Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C)), Mul(Add(Mul(B, c), Mul(Integer(-1), Mul(b, C))), x)), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule642)

    pattern643 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, c, x, A, b, a, C, d)))
    rule643 = ReplacementRule(pattern643, lambda f, c, x, A, b, a, C, d : Add(Mul(Mul(C, Pow(c, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(d, Mul(f, Pow(x, Integer(2))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(c, Integer(-1))), Int(Mul(Add(Mul(A, c), Mul(Integer(-1), Mul(a, C)), Mul(Integer(-1), Mul(b, C, x))), Pow(Mul(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x))))
    rubi.add(rule643)

    pattern644 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), cons((Mul(Pow(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2)))), q_), Add(A_, Mul(B_, x_), Mul(C_, Pow(x_, Integer(2))))), x_), (e, f, q, c, x, A, b, p, B, C, d, a)))
    rule644 = ReplacementRule(pattern644, lambda e, f, q, c, x, A, b, p, B, C, d, a : Defer(Integer(Int)))
    rubi.add(rule644)

    pattern645 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), cons((Mul(Pow(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2)))), q_), Add(A_, Mul(C_, Pow(x_, Integer(2))))), x_), (e, f, q, c, x, A, b, p, a, C, d)))
    rule645 = ReplacementRule(pattern645, lambda e, f, q, c, x, A, b, p, a, C, d : Defer(Integer(Int)))
    rubi.add(rule645)

    pattern646 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), cons((Mul(Pow(Add(a_, Mul(c_, Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2)))), q_), Add(A_, Mul(B_, x_), Mul(C_, Pow(x_, Integer(2))))), x_), (e, f, q, c, x, A, p, B, C, d, a)))
    rule646 = ReplacementRule(pattern646, lambda e, f, q, c, x, A, p, B, C, d, a : Defer(Integer(Int)))
    rubi.add(rule646)

    pattern647 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), q_)), x_), cons((Mul(Pow(Add(a_, Mul(c_, Pow(x_, Integer(2)))), p_), Pow(Add(d_, Mul(e_, x_), Mul(f_, Pow(x_, Integer(2)))), q_), Add(A_, Mul(C_, Pow(x_, Integer(2))))), x_), (e, f, q, c, x, A, p, a, C, d)))
    rule647 = ReplacementRule(pattern647, lambda e, f, q, c, x, A, p, a, C, d : Defer(Integer(Int)))
    rubi.add(rule647)

    pattern648 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), u_), Mul(Wildcard.optional('C', Integer(1)), Pow(u_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (B, e, f, q, c, x, A, u, b, p, a, C, d)))
    rule648 = ReplacementRule(pattern648, lambda B, e, f, q, c, x, A, u, b, p, a, C, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(B, x), Mul(C, Pow(x, Integer(2))))), x), x, u)))
    rubi.add(rule648)

    pattern649 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), u_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (B, e, f, q, c, x, A, u, b, p, a, d)))
    rule649 = ReplacementRule(pattern649, lambda B, e, f, q, c, x, A, u, b, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(B, x))), x), x, u)))
    rubi.add(rule649)

    pattern650 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), u_), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(u_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, f, q, c, x, A, u, b, p, a, C, d)))
    rule650 = ReplacementRule(pattern650, lambda e, f, q, c, x, A, u, b, p, a, C, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(C, Pow(x, Integer(2))))), x), x, u)))
    rubi.add(rule650)

    pattern651 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), u_), Mul(Wildcard.optional('C', Integer(1)), Pow(u_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, f, q, c, x, A, u, p, B, C, d, a)))
    rule651 = ReplacementRule(pattern651, lambda e, f, q, c, x, A, u, p, B, C, d, a : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(B, x), Mul(C, Pow(x, Integer(2))))), x), x, u)))
    rubi.add(rule651)

    pattern652 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), u_)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (B, e, f, q, c, x, A, u, p, a, d)))
    rule652 = ReplacementRule(pattern652, lambda B, e, f, q, c, x, A, u, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(B, x))), x), x, u)))
    rubi.add(rule652)

    pattern653 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('p', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(u_, Integer(2)))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), u_), Mul(Wildcard.optional('f', Integer(1)), Pow(u_, Integer(2)))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(C, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, f, q, c, x, A, u, p, a, C, d)))
    rule653 = ReplacementRule(pattern653, lambda e, f, q, c, x, A, u, p, a, C, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p), Pow(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))), q), Add(A, Mul(C, Pow(x, Integer(2))))), x), x, u)))
    rubi.add(rule653)

    pattern654 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), RationalQ(n_), Less(n_, Integer(0)), IntegerQ(p_)), (n, c, x, n2, b, p, a)))
    rule654 = ReplacementRule(pattern654, lambda n, c, x, n2, b, p, a : Int(Mul(Pow(x, Mul(Integer(2), n, p)), Pow(Add(c, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(a, Pow(x, Mul(Integer(-2), n)))), p)), x))
    rubi.add(rule654)

    pattern655 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), FractionQ(n_)), (n, c, x, n2, b, p, a)))
    rule655 = ReplacementRule(pattern655, lambda n, c, x, n2, b, p, a : With(List(Set(Integer(k), Denominator(n))), Mul(Integer(k), Subst(Int(Mul(Pow(x, Add(Integer(k), Integer(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(k), n))), Mul(c, Pow(x, Mul(Integer(2), Integer(k), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(k), Integer(-1))))))))
    rubi.add(rule655)

    pattern656 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_)), ZeroQ(Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1)))), (n, c, x, n2, b, p, a)))
    rule656 = ReplacementRule(pattern656, lambda n, c, x, n2, b, p, a : Mul(x, Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Integer(2), a), Integer(-1)))))
    rubi.add(rule656)

    pattern657 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_)), ZeroQ(Add(Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1))), NonzeroQ(Add(n_, Integer(1)))), (n, c, x, n2, b, p, a)))
    rule657 = ReplacementRule(pattern657, lambda n, c, x, n2, b, p, a : Add(Mul(Mul(Integer(-1), x), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(x, Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Integer(2), a, Add(n, Integer(1))), Integer(-1))))))
    rubi.add(rule657)

    pattern658 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Or(ZeroQ(Add(Mul(Integer(2), n_, p_), Integer(1))), ZeroQ(Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(-1))), Integer(1)))), RationalQ(p_), Greater(p_, Integer(0)), IntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (n, c, x, n2, b, p, a)))
    rule658 = ReplacementRule(pattern658, lambda n, c, x, n2, b, p, a : Mul(Mul(Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Integer(-1))), Int(Mul(Add(b, Mul(Integer(2), c, Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1))))))), x)))
    rubi.add(rule658)

    pattern659 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Or(ZeroQ(Add(Mul(Integer(2), n_, p_), Integer(1))), ZeroQ(Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(-1))), Integer(1)))), RationalQ(p_), Greater(p_, Integer(0)), Not(IntegerQ(Mul(Integer(2), p_)))), (n, c, x, n2, b, p, a)))
    rule659 = ReplacementRule(pattern659, lambda n, c, x, n2, b, p, a : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), p)), x)))
    rubi.add(rule659)

    pattern660 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Rational(Integer(1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(n_, Integer(1))), NonzeroQ(Add(Mul(Integer(2), n_), Integer(1))), NonzeroQ(Add(Mul(Integer(3), n_), Integer(1)))), (n, c, x, n2, b, a)))
    rule660 = ReplacementRule(pattern660, lambda n, c, x, n2, b, a : Add(Mul(x, Mul(Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), Pow(Add(n, Integer(1)), Integer(-1)))), Mul(b, n, x, Mul(Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), Pow(Mul(Add(n, Integer(1)), Add(b, Mul(Integer(2), c, Pow(x, n)))), Integer(-1))))))
    rubi.add(rule660)

    pattern661 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_)), NegativeIntegerQ(n_)), (n, c, x, n2, b, p, a)))
    rule661 = ReplacementRule(pattern661, lambda n, c, x, n2, b, p, a : Mul(Integer(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Integer(2)), Integer(-1))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule661)

    pattern662 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(2), n_, p_), Integer(1))), NonzeroQ(Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(-1))), Integer(1))), RationalQ(p_), Greater(p_, Integer(1))), (n, c, x, n2, b, p, a)))
    rule662 = ReplacementRule(pattern662, lambda n, c, x, n2, b, p, a : Add(Mul(x, Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Add(Mul(Integer(2), n, p), Integer(1)), Integer(-1)))), Mul(n, p, x, Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(Mul(Add(Mul(Integer(2), n, p), Integer(1)), Add(Mul(n, Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Integer(-1)))), Mul(Integer(2), a, Pow(n, Integer(2)), p, Mul(Add(Mul(Integer(2), p), Integer(-1)), Pow(Mul(Add(Mul(Integer(2), n, p), Integer(1)), Add(Mul(n, Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Integer(-1))), Int(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), x))))
    rubi.add(rule662)

    pattern663 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1))), NonzeroQ(Add(Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1))), RationalQ(n_, p_), Less(p_, Integer(-1))), (n, c, x, n2, b, p, a)))
    rule663 = ReplacementRule(pattern663, lambda n, c, x, n2, b, p, a : Add(Mul(Mul(Integer(-1), Add(Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), x, Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, Pow(n, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(x, Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Integer(2), a, n, Add(Mul(Integer(2), p), Integer(1))), Integer(-1))))), Mul(Add(Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Mul(Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)), Pow(Mul(Integer(2), a, Pow(n, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), x))))
    rubi.add(rule663)

    pattern664 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_))), (n, c, x, n2, b, p, a)))
    rule664 = ReplacementRule(pattern664, lambda n, c, x, n2, b, p, a : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(c, IntPart(p)), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Mul(Integer(2), p)), x)))
    rubi.add(rule664)

    pattern665 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(n_)), (n, c, x, n2, b, p, a)))
    rule665 = ReplacementRule(pattern665, lambda n, c, x, n2, b, p, a : Mul(Integer(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Integer(2)), Integer(-1))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule665)

    pattern666 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(p_)), (n, c, x, n2, b, p, a)))
    rule666 = ReplacementRule(pattern666, lambda n, c, x, n2, b, p, a : Int(ExpandIntegrand(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), x), x))
    rubi.add(rule666)

    pattern667 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(Mul(Integer(2), n_, p_), Integer(1))), IntegerQ(Mul(Integer(2), p_)), Or(IntegerQ(p_), ZeroQ(Add(n_, Integer(-2))))), (n, c, x, n2, b, p, a)))
    rule667 = ReplacementRule(pattern667, lambda n, c, x, n2, b, p, a : Add(Mul(x, Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Add(Mul(Integer(2), n, p), Integer(1)), Integer(-1)))), Mul(n, Mul(p, Pow(Add(Mul(Integer(2), n, p), Integer(1)), Integer(-1))), Int(Mul(Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule667)

    pattern668 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1)), IntegerQ(Mul(Integer(2), p_)), Or(IntegerQ(p_), ZeroQ(Add(n_, Integer(-2))))), (n, c, x, n2, b, p, a)))
    rule668 = ReplacementRule(pattern668, lambda n, c, x, n2, b, p, a : Add(Mul(Mul(Integer(-1), x), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)), Mul(b, c, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)), Mul(n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(b, c, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), x))))
    rubi.add(rule668)

    pattern669 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), NegQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, c, x, n2, b, a)))
    rule669 = ReplacementRule(pattern669, lambda n, c, x, n2, b, a : With(List(Set(Integer(q), Rt(Mul(a, Pow(c, Integer(-1))), Integer(2)))), With(List(Set(Integer(r), Rt(Add(Mul(Integer(2), Integer(q)), Mul(Integer(-1), Mul(b, Pow(c, Integer(-1))))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(q), Integer(r)), Integer(-1))), Int(Mul(Add(Integer(r), Mul(Integer(-1), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(x, n)), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(q), Integer(r)), Integer(-1))), Int(Mul(Add(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Pow(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Pow(x, n)), Integer(-1))), x))))))
    rubi.add(rule669)

    pattern670 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, c, x, n2, b, a)))
    rule670 = ReplacementRule(pattern670, lambda n, c, x, n2, b, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))), Mul(c, Pow(x, n))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Integer(-1))), x))))))
    rubi.add(rule670)

    pattern671 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeQ(c_)), (b, c, x, a)))
    rule671 = ReplacementRule(pattern671, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Integer(2), Sqrt(Mul(Integer(-1), c)), Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2))))), Sqrt(Add(Mul(Integer(-1), b), Integer(q), Mul(Integer(-1), Mul(Integer(2), c, Pow(x, Integer(2))))))), Integer(-1))), x))))
    rubi.add(rule671)

    pattern672 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveQ(Mul(c_, Pow(a_, Integer(-1)))), NegativeQ(Mul(b_, Pow(a_, Integer(-1))))), (b, c, x, a)))
    rule672 = ReplacementRule(pattern672, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(4)))), Mul(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Pow(Mul(a, Pow(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(2))), Integer(-1)))), Pow(Mul(Integer(2), Integer(q), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticF(Mul(Integer(2), ArcTan(Mul(Integer(q), x))), Add(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(b, Mul(Pow(Integer(q), Integer(2)), Pow(Mul(Integer(4), c), Integer(-1))))))))))
    rubi.add(rule672)

    pattern673 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeQ(a_), PositiveQ(c_)), (b, c, x, a)))
    rule673 = ReplacementRule(pattern673, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Mul(Sqrt(Add(Mul(Integer(-2), a), Mul(Integer(-1), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(x, Integer(2)))))), Mul(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Pow(Integer(q), Integer(-1)))), Pow(Mul(Integer(2), Sqrt(Mul(Integer(-1), a)), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticF(ArcSin(Mul(x, Pow(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))), Integer(-1)))), Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), Integer(q)), Integer(-1))))), IntegerQ(Integer(q)))))
    rubi.add(rule673)

    pattern674 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeQ(a_), PositiveQ(c_)), (b, c, x, a)))
    rule674 = ReplacementRule(pattern674, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(x, Integer(2)))), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Integer(-1)))), Mul(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Pow(Integer(q), Integer(-1)))), Pow(Mul(Integer(2), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Sqrt(Mul(a, Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Integer(-1))))), Integer(-1))), EllipticF(ArcSin(Mul(x, Pow(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))), Integer(-1)))), Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))))))
    rubi.add(rule674)

    pattern675 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule675 = ReplacementRule(pattern675, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(x, Integer(2)))), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Integer(-1)))), Pow(Mul(Integer(2), a, Rt(Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticF(ArcTan(Mul(Rt(Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), x)), Mul(Integer(2), Mul(Integer(q), Pow(Add(b, Integer(q)), Integer(-1)))))), And(PosQ(Mul(Add(b, Integer(q)), Pow(a, Integer(-1)))), Not(And(PosQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))), SimplerSqrtQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), a), Integer(-1))))))))))
    rubi.add(rule675)

    pattern676 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule676 = ReplacementRule(pattern676, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(x, Integer(2)))), Integer(-1)))), Pow(Mul(Integer(2), a, Rt(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticF(ArcTan(Mul(Rt(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), x)), Mul(Integer(-2), Mul(Integer(q), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))), PosQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))))))
    rubi.add(rule676)

    pattern677 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule677 = ReplacementRule(pattern677, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Mul(Sqrt(Add(Integer(1), Mul(Add(b, Integer(q)), Mul(Pow(x, Integer(2)), Pow(Mul(Integer(2), a), Integer(-1)))))), Mul(Sqrt(Add(Integer(1), Mul(Add(b, Mul(Integer(-1), Integer(q))), Mul(Pow(x, Integer(2)), Pow(Mul(Integer(2), a), Integer(-1)))))), Pow(Mul(Rt(Mul(Mul(Integer(-1), Add(b, Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticF(ArcSin(Mul(Rt(Mul(Mul(Integer(-1), Add(b, Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), x)), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Add(b, Integer(q)), Integer(-1))))), And(NegQ(Mul(Add(b, Integer(q)), Pow(a, Integer(-1)))), Not(And(NegQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))), SimplerSqrtQ(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), a), Integer(-1))), Mul(Mul(Integer(-1), Add(b, Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))))))))))
    rubi.add(rule677)

    pattern678 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule678 = ReplacementRule(pattern678, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Mul(Sqrt(Add(Integer(1), Mul(Add(b, Mul(Integer(-1), Integer(q))), Mul(Pow(x, Integer(2)), Pow(Mul(Integer(2), a), Integer(-1)))))), Mul(Sqrt(Add(Integer(1), Mul(Add(b, Integer(q)), Mul(Pow(x, Integer(2)), Pow(Mul(Integer(2), a), Integer(-1)))))), Pow(Mul(Rt(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticF(ArcSin(Mul(Rt(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), x)), Mul(Add(b, Integer(q)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1))))), NegQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))))))
    rubi.add(rule678)

    pattern679 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PosQ(Mul(c_, Pow(a_, Integer(-1))))), (b, c, x, a)))
    rule679 = ReplacementRule(pattern679, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(4)))), Mul(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Pow(Mul(a, Pow(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(2))), Integer(-1)))), Pow(Mul(Integer(2), Integer(q), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticF(Mul(Integer(2), ArcTan(Mul(Integer(q), x))), Add(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(b, Mul(Pow(Integer(q), Integer(2)), Pow(Mul(Integer(4), c), Integer(-1))))))))))
    rubi.add(rule679)

    pattern680 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegQ(Mul(c_, Pow(a_, Integer(-1))))), (b, c, x, a)))
    rule680 = ReplacementRule(pattern680, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))), Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(q)), Integer(-1)))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))), Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(q)), Integer(-1))))))), Integer(-1))), x))))
    rubi.add(rule680)

    pattern681 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_))), (n, c, x, n2, b, p, a)))
    rule681 = ReplacementRule(pattern681, lambda n, c, x, n2, b, p, a : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, n), Pow(Add(b, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))), Integer(-1))))), FracPart(p)), Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, n), Pow(Add(b, Mul(Integer(-1), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Integer(-1))))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, n), Pow(Add(b, Sqrt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))))), Integer(-1))))), p), Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, n), Pow(Add(b, Mul(Integer(-1), Sqrt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))))), Integer(-1))))), p)), x)))
    rubi.add(rule681)

    pattern682 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), Wildcard.optional('p', Integer(1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_)), IntegerQ(p_), PosQ(n_)), (n, c, x, b, p, a, mn)))
    rule682 = ReplacementRule(pattern682, lambda n, c, x, b, p, a, mn : Int(Mul(Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Pow(x, Mul(n, p)), Integer(-1))), x))
    rubi.add(rule682)

    pattern683 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_)), Not(IntegerQ(p_)), PosQ(n_)), (n, c, x, b, p, a, mn)))
    rule683 = ReplacementRule(pattern683, lambda n, c, x, b, p, a, mn : Mul(Pow(x, Mul(n, FracPart(p))), Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, n))), FracPart(p)), Pow(Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Integer(-1))), Int(Mul(Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Pow(x, Mul(n, p)), Integer(-1))), x)))
    rubi.add(rule683)

    pattern684 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(u_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (n, c, x, n2, u, b, p, a)))
    rule684 = ReplacementRule(pattern684, lambda n, c, x, n2, u, b, p, a : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), x), x, u)))
    rubi.add(rule684)

    pattern685 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Simplify(Add(m_, Mul(Integer(-1), n_), Integer(1))))), (n, c, x, m, n2, b, p, a)))
    rule685 = ReplacementRule(pattern685, lambda n, c, x, m, n2, b, p, a : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p), x), x, Pow(x, n))))
    rubi.add(rule685)

    pattern686 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), PositiveIntegerQ(p_), Not(IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))))), (n, c, x, m, n2, b, p, a, d)))
    rule686 = ReplacementRule(pattern686, lambda n, c, x, m, n2, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(d, x), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule686)

    pattern687 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NegativeIntegerQ(p_), NegQ(n_)), (n, c, x, m, n2, b, p, a)))
    rule687 = ReplacementRule(pattern687, lambda n, c, x, m, n2, b, p, a : Int(Mul(Pow(x, Add(m, Mul(Integer(2), n, p))), Pow(Add(c, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(a, Pow(x, Mul(Integer(-2), n)))), p)), x))
    rubi.add(rule687)

    pattern688 = Pattern(Int(Mul(Pow(x_, Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, c, x, n2, b, a)))
    rule688 = ReplacementRule(pattern688, lambda n, c, x, n2, b, a : Add(Mul(Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), Pow(n, Integer(-1))), Mul(b, Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), Mul(Log(x), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Integer(-1))))))
    rubi.add(rule688)

    pattern689 = Pattern(Int(Mul(Pow(x_, Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Greater(p_, Integer(1))), (n, c, x, n2, b, p, a)))
    rule689 = ReplacementRule(pattern689, lambda n, c, x, n2, b, p, a : Add(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Integer(2), n, p), Integer(-1))), Mul(Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(Mul(Integer(2), n, Add(Mul(Integer(2), p), Integer(-1))), Integer(-1)))), Mul(a, Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(x, Integer(-1))), x))))
    rubi.add(rule689)

    pattern690 = Pattern(Int(Mul(Pow(x_, Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1))), (n, c, x, n2, b, p, a)))
    rule690 = ReplacementRule(pattern690, lambda n, c, x, n2, b, p, a : Add(Mul(Mul(Integer(-1), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), Pow(Mul(Integer(2), a, n, Add(p, Integer(1))), Integer(-1))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Integer(2), a, n, Add(Mul(Integer(2), p), Integer(1))), Integer(-1))))), Mul(Mul(Integer(1), Pow(a, Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(x, Integer(-1))), x))))
    rubi.add(rule690)

    pattern691 = Pattern(Int(Mul(Pow(x_, Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_))), (n, c, x, n2, b, p, a)))
    rule691 = ReplacementRule(pattern691, lambda n, c, x, n2, b, p, a : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(c, IntPart(p)), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Mul(Integer(2), p)), Pow(x, Integer(-1))), x)))
    rubi.add(rule691)

    pattern692 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(m_, Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1)))), (n, c, x, m, n2, b, p, a, d)))
    rule692 = ReplacementRule(pattern692, lambda n, c, x, m, n2, b, p, a, d : Mul(Pow(Mul(d, x), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(b, d, Add(m, Integer(1))), Integer(-1)))))
    rubi.add(rule692)

    pattern693 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(m_, n_, Integer(1)))), (n, c, x, m, n2, b, a, d)))
    rule693 = ReplacementRule(pattern693, lambda n, c, x, m, n2, b, a, d : Mul(Mul(Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Add(b, Mul(Integer(2), c, Pow(x, n)))), x)))
    rubi.add(rule693)

    pattern694 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(m_, n_, Integer(1)))), (n, c, x, m, n2, b, a, d)))
    rule694 = ReplacementRule(pattern694, lambda n, c, x, m, n2, b, a, d : Add(Mul(Pow(Mul(d, x), Add(m, Integer(1))), Mul(Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), Pow(Mul(d, Add(m, n, Integer(1))), Integer(-1)))), Mul(b, n, Pow(Mul(d, x), Add(m, Integer(1))), Mul(Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), Pow(Mul(d, Add(m, Integer(1)), Add(m, n, Integer(1)), Add(b, Mul(Integer(2), c, Pow(x, n)))), Integer(-1))))))
    rubi.add(rule694)

    pattern695 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(m_, n_, Integer(1)))), (n, c, x, m, n2, b, a)))
    rule695 = ReplacementRule(pattern695, lambda n, c, x, m, n2, b, a : Add(Mul(Mul(Integer(-1), Pow(x, Add(m, Integer(1)))), Mul(Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), Pow(Mul(a, n), Integer(-1)))), Mul(Integer(-1), Mul(Mul(b, Pow(Mul(Integer(2), a), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(x, Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))))), Integer(-1))), x)))))
    rubi.add(rule695)

    pattern696 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(m_, Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1))), NonzeroQ(Add(Mul(Integer(2), p_), Integer(1)))), (n, c, x, m, n2, b, p, a, d)))
    rule696 = ReplacementRule(pattern696, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(Mul(d, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, d, n, Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(Mul(d, x), Add(m, Integer(1))), Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Integer(2), a, d, n, Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))))))
    rubi.add(rule696)

    pattern697 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(m_, Mul(Integer(-1), Mul(Integer(2), n_)), Integer(1))), NonzeroQ(Add(p_, Mul(Integer(3), Pow(Integer(2), Integer(-1)))))), (n, c, x, m, n2, b, p, a)))
    rule697 = ReplacementRule(pattern697, lambda n, c, x, m, n2, b, p, a : Add(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, n, Add(p, Integer(1))), Integer(-1))), Mul(Integer(-1), Mul(Mul(b, Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Pow(x, Add(n, Integer(-1))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))))
    rubi.add(rule697)

    pattern698 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(1)), Inequality(Integer(-1), Integer(LessEqual), Add(m_, n_), Integer(Less), Integer(0)), IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_)), (n, c, x, m, n2, b, p, a, d)))
    rule698 = ReplacementRule(pattern698, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(Mul(d, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(d, Add(m, Mul(Integer(2), n, p), Integer(1))), Integer(-1)))), Mul(n, p, Pow(Mul(d, x), Add(m, Integer(1))), Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(Mul(d, Add(m, Integer(1)), Add(m, Mul(Integer(2), n, p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(b, p, Pow(n, Integer(2)), Mul(Add(Mul(Integer(2), p), Integer(-1)), Pow(Mul(Pow(d, n), Add(m, Integer(1)), Add(m, Mul(Integer(2), n, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule698)

    pattern699 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(1)), Less(Add(m_, n_), Integer(-1)), Not(And(NegativeIntegerQ(Mul(Add(m_, Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1)), Pow(n_, Integer(-1)))), Greater(Add(Mul(Add(m_, Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1)), Pow(n_, Integer(-1))), p_), Integer(0)))), IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_)), (n, c, x, m, n2, b, p, a, d)))
    rule699 = ReplacementRule(pattern699, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Add(m, Mul(Integer(-1), Mul(n, Add(Mul(Integer(2), p), Integer(-1)))), Integer(1)), Pow(Mul(d, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(d, Add(m, Integer(1)), Add(m, n, Integer(1))), Integer(-1)))), Mul(n, p, Pow(Mul(d, x), Add(m, Integer(1))), Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(Mul(d, Add(m, Integer(1)), Add(m, n, Integer(1))), Integer(-1)))), Mul(Integer(2), c, p, Pow(n, Integer(2)), Mul(Add(Mul(Integer(2), p), Integer(-1)), Pow(Mul(Pow(d, Mul(Integer(2), n)), Add(m, Integer(1)), Add(m, n, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(2), n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule699)

    pattern700 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(p_), Greater(p_, Integer(1)), NonzeroQ(Add(m_, Mul(Integer(2), n_, p_), Integer(1))), NonzeroQ(Add(m_, Mul(n_, Add(Mul(Integer(2), p_), Integer(-1))), Integer(1))), Not(And(NegativeIntegerQ(Mul(Add(m_, Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1)), Pow(n_, Integer(-1)))), Greater(Add(Mul(Add(m_, Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1)), Pow(n_, Integer(-1))), p_), Integer(0)))), Not(And(PositiveIntegerQ(m_), IntegerQ(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))), Less(Add(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))), Integer(-1)), Mul(Integer(2), p_)))), IntegerQ(Mul(Integer(2), p_))), (n, c, x, m, n2, b, p, a, d)))
    rule700 = ReplacementRule(pattern700, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(Mul(d, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(d, Add(m, Mul(Integer(2), n, p), Integer(1))), Integer(-1)))), Mul(n, p, Pow(Mul(d, x), Add(m, Integer(1))), Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(Mul(d, Add(m, Mul(Integer(2), n, p), Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Integer(-1)))), Mul(Integer(2), a, Pow(n, Integer(2)), p, Mul(Add(Mul(Integer(2), p), Integer(-1)), Pow(Mul(Add(m, Mul(Integer(2), n, p), Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule700)

    pattern701 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Inequality(Add(n_, Integer(-1)), Integer(Less), m_, Integer(LessEqual), Add(Mul(Integer(2), n_), Integer(-1))), IntegerQ(Mul(Integer(2), p_))), (n, c, x, m, n2, b, p, a, d)))
    rule701 = ReplacementRule(pattern701, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(d, Add(n, Integer(-1))), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Pow(Mul(d, x), Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(b, Pow(n, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(Mul(d, x), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(b, d, n, Add(Mul(Integer(2), p), Integer(1))), Integer(-1))))), Mul(Integer(-1), Mul(Pow(d, n), Add(m, Mul(Integer(-1), n), Integer(1)), Mul(Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Pow(Mul(b, Pow(n, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule701)

    pattern702 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Add(Mul(Integer(2), n_), Integer(-1))), IntegerQ(Mul(Integer(2), p_))), (n, c, x, m, n2, b, p, a, d)))
    rule702 = ReplacementRule(pattern702, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(d, Add(Mul(Integer(2), n), Integer(-1)))), Add(m, Mul(Integer(-1), Mul(Integer(3), n)), Mul(Integer(-1), Mul(Integer(2), n, p)), Integer(1)), Pow(Mul(d, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Pow(n, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(d, Add(Mul(Integer(2), n), Integer(-1))), Pow(Mul(d, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Integer(2), c, n, Add(Mul(Integer(2), p), Integer(1))), Integer(-1))))), Mul(Pow(d, Mul(Integer(2), n)), Add(m, Mul(Integer(-1), n), Integer(1)), Mul(Add(m, Mul(Integer(-1), Mul(Integer(2), n)), Integer(1)), Pow(Mul(Integer(2), c, Pow(n, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), x))))
    rubi.add(rule702)

    pattern703 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), IntegerQ(Mul(Integer(2), p_))), (n, c, x, m, n2, b, p, a, d)))
    rule703 = ReplacementRule(pattern703, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Pow(Mul(d, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, d, Pow(n, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(Mul(d, x), Add(m, Integer(1))), Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Integer(2), a, d, n, Add(Mul(Integer(2), p), Integer(1))), Integer(-1))))), Mul(Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Mul(Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)), Pow(Mul(Integer(2), a, Pow(n, Integer(2)), Add(p, Integer(1)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), x))))
    rubi.add(rule703)

    pattern704 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_), Greater(m_, Add(n_, Integer(-1))), NonzeroQ(Add(m_, Mul(Integer(2), n_, p_), Integer(1))), Or(IntegerQ(Mul(Integer(2), p_)), PositiveIntegerQ(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, c, x, m, n2, b, p, a, d)))
    rule704 = ReplacementRule(pattern704, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(d, Add(n, Integer(-1))), Pow(Mul(d, x), Add(m, Mul(Integer(-1), n), Integer(1))), Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Integer(2), c, Add(m, Mul(Integer(2), n, p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(b, Pow(d, n), Mul(Add(m, Mul(Integer(-1), n), Integer(1)), Pow(Mul(Integer(2), c, Add(m, Mul(Integer(2), n, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))))
    rubi.add(rule704)

    pattern705 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_), Less(m_, Integer(-1)), Or(IntegerQ(Mul(Integer(2), p_)), PositiveIntegerQ(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, c, x, m, n2, b, p, a, d)))
    rule705 = ReplacementRule(pattern705, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(Mul(d, x), Add(m, Integer(1))), Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(b, d, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Integer(2), c, Mul(Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Pow(Mul(b, Pow(d, n), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))))
    rubi.add(rule705)

    pattern706 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), IntegerQ(m_)), (n, c, x, m, n2, b, p, a)))
    rule706 = ReplacementRule(pattern706, lambda n, c, x, m, n2, b, p, a : Mul(Integer(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule706)

    pattern707 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), FractionQ(m_)), (n, c, x, m, n2, b, p, a, d)))
    rule707 = ReplacementRule(pattern707, lambda n, c, x, m, n2, b, p, a, d : With(List(Set(Integer(k), Denominator(m))), Mul(Mul(Mul(Integer(-1), Integer(k)), Pow(d, Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(d, Mul(Integer(-1), n)), Pow(x, Mul(Mul(Integer(-1), Integer(k)), n))), Mul(c, Pow(d, Mul(Integer(-2), n)), Pow(x, Mul(Integer(-2), Integer(k), n)))), p), Pow(Pow(x, Add(Mul(Integer(k), Add(m, Integer(1))), Integer(1))), Integer(-1))), x), x, Mul(Integer(1), Pow(Pow(Mul(d, x), Mul(Integer(1), Pow(Integer(k), Integer(-1)))), Integer(-1)))))))
    rubi.add(rule707)

    pattern708 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), Not(RationalQ(m_))), (n, c, x, n2, m, b, p, a, d)))
    rule708 = ReplacementRule(pattern708, lambda n, c, x, n2, m, b, p, a, d : Mul(Mul(Integer(-1), Pow(d, IntPart(m))), Pow(Mul(d, x), FracPart(m)), Pow(Pow(x, Integer(-1)), FracPart(m)), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule708)

    pattern709 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_))), (n, c, x, m, n2, b, p, a, d)))
    rule709 = ReplacementRule(pattern709, lambda n, c, x, m, n2, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(c, IntPart(p)), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Mul(Integer(2), p))), x)))
    rubi.add(rule709)

    pattern710 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, c, x, m, n2, b, p, a)))
    rule710 = ReplacementRule(pattern710, lambda n, c, x, m, n2, b, p, a : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule710)

    pattern711 = Pattern(Int(Mul(Pow(Mul(d_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, c, x, m, n2, b, p, a, d)))
    rule711 = ReplacementRule(pattern711, lambda n, c, x, m, n2, b, p, a, d : Mul(Pow(d, IntPart(m)), Mul(Pow(Mul(d, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule711)

    pattern712 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), IntegerQ(m_)), (n, c, x, m, n2, b, p, a)))
    rule712 = ReplacementRule(pattern712, lambda n, c, x, m, n2, b, p, a : With(List(Set(Integer(k), GCD(Add(m, Integer(1)), n))), Condition(Mul(Mul(Integer(1), Pow(Integer(k), Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, Integer(1)), Pow(Integer(k), Integer(-1))), Integer(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(n, Pow(Integer(k), Integer(-1))))), Mul(c, Pow(x, Mul(Integer(2), Mul(n, Pow(Integer(k), Integer(-1))))))), p)), x), x, Pow(x, Integer(k)))), Unequal(Integer(k), Integer(1)))))
    rubi.add(rule712)

    pattern713 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), FractionQ(m_), IntegerQ(p_)), (n, c, x, n2, m, b, p, a, d)))
    rule713 = ReplacementRule(pattern713, lambda n, c, x, n2, m, b, p, a, d : With(List(Set(Integer(k), Denominator(m))), Mul(Mul(Integer(k), Pow(d, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(k), Add(m, Integer(1))), Integer(-1))), Pow(Add(a, Mul(b, Mul(Pow(x, Mul(Integer(k), n)), Pow(Pow(d, n), Integer(-1)))), Mul(c, Mul(Pow(x, Mul(Integer(2), Integer(k), n)), Pow(Pow(d, Mul(Integer(2), n)), Integer(-1))))), p)), x), x, Pow(Mul(d, x), Mul(Integer(1), Pow(Integer(k), Integer(-1))))))))
    rubi.add(rule713)

    pattern714 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(0)), Greater(m_, Add(n_, Integer(-1))), Unequal(Add(m_, Mul(Integer(2), n_, p_), Integer(1)), Integer(0)), Unequal(Add(m_, Mul(n_, Add(Mul(Integer(2), p_), Integer(-1))), Integer(1)), Integer(0)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (n, c, x, m, n2, b, p, a, d)))
    rule714 = ReplacementRule(pattern714, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(d, Add(n, Integer(-1))), Pow(Mul(d, x), Add(m, Mul(Integer(-1), n), Integer(1))), Add(Mul(b, n, p), Mul(c, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(-1))), Integer(1)), Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(c, Add(m, Mul(Integer(2), n, p), Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(n, p, Mul(Pow(d, n), Pow(Mul(c, Add(m, Mul(Integer(2), n, p), Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Simp(Add(Mul(a, b, Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), a, c, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(m, Mul(n, Add(p, Integer(-1))), Integer(1))))), Pow(x, n)))), x)), x)))))
    rubi.add(rule714)

    pattern715 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Integer(-1)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (n, c, x, m, n2, b, p, a, d)))
    rule715 = ReplacementRule(pattern715, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(Mul(d, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(d, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(n, Mul(p, Pow(Mul(Pow(d, n), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, n)), Add(b, Mul(Integer(2), c, Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule715)

    pattern716 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(m_, Mul(Integer(2), n_, p_), Integer(1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (n, c, x, m, n2, b, p, a, d)))
    rule716 = ReplacementRule(pattern716, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(Mul(d, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(d, Add(m, Mul(Integer(2), n, p), Integer(1))), Integer(-1)))), Mul(n, Mul(p, Pow(Add(m, Mul(Integer(2), n, p), Integer(1)), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule716)

    pattern717 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Inequality(Add(n_, Integer(-1)), Integer(Less), m_, Integer(LessEqual), Add(Mul(Integer(2), n_), Integer(-1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (n, c, x, m, n2, b, p, a, d)))
    rule717 = ReplacementRule(pattern717, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(d, Add(n, Integer(-1))), Pow(Mul(d, x), Add(m, Mul(Integer(-1), n), Integer(1))), Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Pow(d, n), Pow(Mul(n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), n))), Add(Mul(b, Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Integer(2), c, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)), Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule717)

    pattern718 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Add(Mul(Integer(2), n_), Integer(-1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (n, c, x, m, n2, b, p, a, d)))
    rule718 = ReplacementRule(pattern718, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(d, Add(Mul(Integer(2), n), Integer(-1)))), Pow(Mul(d, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Add(Mul(Integer(2), a), Mul(b, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Pow(d, Mul(Integer(2), n)), Pow(Mul(n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Add(Mul(Integer(2), a, Add(m, Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Mul(b, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), x))))
    rubi.add(rule718)

    pattern719 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (n, c, x, m, n2, b, p, a, d)))
    rule719 = ReplacementRule(pattern719, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Mul(d, x), Add(m, Integer(1)))), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)), Mul(b, c, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, d, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(Pow(b, Integer(2)), Add(Mul(n, Add(p, Integer(1))), m, Integer(1))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)))), Mul(b, c, Add(Mul(Integer(2), n, p), Mul(Integer(3), n), m, Integer(1)), Pow(x, n))), x)), x))))
    rubi.add(rule719)

    pattern720 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_), Greater(m_, Add(Mul(Integer(2), n_), Integer(-1))), NonzeroQ(Add(m_, Mul(Integer(2), n_, p_), Integer(1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (n, c, x, m, n2, b, p, a, d)))
    rule720 = ReplacementRule(pattern720, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(d, Add(Mul(Integer(2), n), Integer(-1))), Pow(Mul(d, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(2), n, p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Pow(d, Mul(Integer(2), n)), Pow(Mul(c, Add(m, Mul(Integer(2), n, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Simp(Add(Mul(a, Add(m, Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Mul(b, Add(m, Mul(n, Add(p, Integer(-1))), Integer(1)), Pow(x, n))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))))
    rubi.add(rule720)

    pattern721 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_), Less(m_, Integer(-1)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (n, c, x, n2, m, b, p, a, d)))
    rule721 = ReplacementRule(pattern721, lambda n, c, x, n2, m, b, p, a, d : Add(Mul(Pow(Mul(d, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, d, Add(m, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, Pow(d, n), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, n)), Add(Mul(b, Add(m, Mul(n, Add(p, Integer(1))), Integer(1))), Mul(c, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)), Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))))
    rubi.add(rule721)

    pattern722 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_), Less(m_, Integer(-1))), (n, c, x, n2, m, b, a, d)))
    rule722 = ReplacementRule(pattern722, lambda n, c, x, n2, m, b, a, d : Add(Mul(Pow(Mul(d, x), Add(m, Integer(1))), Pow(Mul(a, d, Add(m, Integer(1))), Integer(-1))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, Pow(d, n)), Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, n)), Mul(Add(b, Mul(c, Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x)))))
    rubi.add(rule722)

    pattern723 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), IntegerQ(m_), Greater(m_, Add(Mul(Integer(3), n_), Integer(-1)))), (n, c, x, n2, m, b, a)))
    rule723 = ReplacementRule(pattern723, lambda n, c, x, n2, m, b, a : Int(PolynomialDivide(Pow(x, m), Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), x), x))
    rubi.add(rule723)

    pattern724 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_), Greater(m_, Add(Mul(Integer(2), n_), Integer(-1)))), (n, c, x, n2, m, b, a, d)))
    rule724 = ReplacementRule(pattern724, lambda n, c, x, n2, m, b, a, d : Add(Mul(Pow(d, Add(Mul(Integer(2), n), Integer(-1))), Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Pow(Mul(c, Add(m, Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Pow(d, Mul(Integer(2), n)), Pow(c, Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Mul(Add(a, Mul(b, Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x)))))
    rubi.add(rule724)

    pattern725 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NegativeQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PosQ(Mul(a_, c_))), (b, c, x, a)))
    rule725 = ReplacementRule(pattern725, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Mul(a, Pow(c, Integer(-1))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Int(Mul(Add(Integer(q), Pow(x, Integer(2))), Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Int(Mul(Add(Integer(q), Mul(Integer(-1), Pow(x, Integer(2)))), Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Integer(-1))), x))))))
    rubi.add(rule725)

    pattern726 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1))), m_), Inequality(Mul(Integer(3), Mul(n_, Pow(Integer(2), Integer(-1)))), Integer(LessEqual), m_, Integer(Less), Mul(Integer(2), n_)), NegQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, c, x, m, n2, b, a)))
    rule726 = ReplacementRule(pattern726, lambda n, c, x, m, n2, b, a : With(List(Set(Integer(q), Rt(Mul(a, Pow(c, Integer(-1))), Integer(2)))), With(List(Set(Integer(r), Rt(Add(Mul(Integer(2), Integer(q)), Mul(Integer(-1), Mul(b, Pow(c, Integer(-1))))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(r)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(Integer(3), Mul(n, Pow(Integer(2), Integer(-1))))))), Mul(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Pow(x, n)), Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(r)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(Integer(3), Mul(n, Pow(Integer(2), Integer(-1))))))), Mul(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))))), Pow(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(x, n)), Integer(-1)))), x)))))))
    rubi.add(rule726)

    pattern727 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1))), m_), Inequality(Mul(n_, Pow(Integer(2), Integer(-1))), Integer(LessEqual), m_, Integer(Less), Mul(Integer(3), Mul(n_, Pow(Integer(2), Integer(-1))))), NegQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, c, x, m, n2, b, a)))
    rule727 = ReplacementRule(pattern727, lambda n, c, x, m, n2, b, a : With(List(Set(Integer(q), Rt(Mul(a, Pow(c, Integer(-1))), Integer(2)))), With(List(Set(Integer(r), Rt(Add(Mul(Integer(2), Integer(q)), Mul(Integer(-1), Mul(b, Pow(c, Integer(-1))))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(r)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(x, n)), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(r)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Pow(x, n)), Integer(-1))), x)))))))
    rubi.add(rule727)

    pattern728 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_), GreaterEqual(m_, n_)), (n, c, x, n2, m, b, a, d)))
    rule728 = ReplacementRule(pattern728, lambda n, c, x, n2, m, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Mul(Pow(d, n), Pow(Integer(2), Integer(-1))), Add(Mul(b, Pow(Integer(q), Integer(-1))), Integer(1)), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), n))), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Pow(d, n), Pow(Integer(2), Integer(-1))), Add(Mul(b, Pow(Integer(q), Integer(-1))), Integer(-1)), Int(Mul(Pow(Mul(d, x), Add(m, Mul(Integer(-1), n))), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))), Mul(c, Pow(x, n))), Integer(-1))), x))))))
    rubi.add(rule728)

    pattern729 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_)), (n, c, x, m, n2, b, a, d)))
    rule729 = ReplacementRule(pattern729, lambda n, c, x, m, n2, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))), Mul(c, Pow(x, n))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Integer(-1))), x))))))
    rubi.add(rule729)

    pattern730 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeQ(c_)), (b, c, x, a)))
    rule730 = ReplacementRule(pattern730, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Integer(2), Sqrt(Mul(Integer(-1), c)), Int(Mul(Pow(x, Integer(2)), Pow(Mul(Sqrt(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2))))), Sqrt(Add(Mul(Integer(-1), b), Integer(q), Mul(Integer(-1), Mul(Integer(2), c, Pow(x, Integer(2))))))), Integer(-1))), x))))
    rubi.add(rule730)

    pattern731 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveQ(Mul(c_, Pow(a_, Integer(-1)))), NegativeQ(Mul(b_, Pow(a_, Integer(-1))))), (b, c, x, a)))
    rule731 = ReplacementRule(pattern731, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))))))
    rubi.add(rule731)

    pattern732 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeQ(a_), PositiveQ(c_)), (b, c, x, a)))
    rule732 = ReplacementRule(pattern732, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)))))
    rubi.add(rule732)

    pattern733 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule733 = ReplacementRule(pattern733, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(x, Mul(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Mul(Integer(2), c, Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1)))), Mul(Integer(-1), Mul(Rt(Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(x, Integer(2)))), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Integer(-1)))), Pow(Mul(Integer(2), c, Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticE(ArcTan(Mul(Rt(Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), x)), Mul(Integer(2), Mul(Integer(q), Pow(Add(b, Integer(q)), Integer(-1)))))))), And(PosQ(Mul(Add(b, Integer(q)), Pow(a, Integer(-1)))), Not(And(PosQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))), SimplerSqrtQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), a), Integer(-1))))))))))
    rubi.add(rule733)

    pattern734 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule734 = ReplacementRule(pattern734, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(x, Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Mul(Integer(2), c, Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1)))), Mul(Integer(-1), Mul(Rt(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(x, Integer(2)))), Integer(-1)))), Pow(Mul(Integer(2), c, Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticE(ArcTan(Mul(Rt(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), x)), Mul(Integer(-2), Mul(Integer(q), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))))), PosQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))))))
    rubi.add(rule734)

    pattern735 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule735 = ReplacementRule(pattern735, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(Mul(Mul(Integer(-1), Add(b, Integer(q))), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), And(NegQ(Mul(Add(b, Integer(q)), Pow(a, Integer(-1)))), Not(And(NegQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))), SimplerSqrtQ(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), a), Integer(-1))), Mul(Mul(Integer(-1), Add(b, Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))))))))))
    rubi.add(rule735)

    pattern736 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (b, c, x, a)))
    rule736 = ReplacementRule(pattern736, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), NegQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))))))
    rubi.add(rule736)

    pattern737 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PosQ(Mul(c_, Pow(a_, Integer(-1))))), (b, c, x, a)))
    rule737 = ReplacementRule(pattern737, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))))))
    rubi.add(rule737)

    pattern738 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegQ(Mul(c_, Pow(a_, Integer(-1))))), (b, c, x, a)))
    rule738 = ReplacementRule(pattern738, lambda b, c, x, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))), Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(q)), Integer(-1)))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), Int(Mul(Pow(x, Integer(2)), Pow(Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))), Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(q)), Integer(-1))))))), Integer(-1))), x))))
    rubi.add(rule738)

    pattern739 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), IntegerQ(m_)), (n, c, x, m, n2, b, p, a)))
    rule739 = ReplacementRule(pattern739, lambda n, c, x, m, n2, b, p, a : Mul(Integer(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule739)

    pattern740 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), FractionQ(m_)), (n, c, x, m, n2, b, p, a, d)))
    rule740 = ReplacementRule(pattern740, lambda n, c, x, m, n2, b, p, a, d : With(List(Set(Integer(k), Denominator(m))), Mul(Mul(Mul(Integer(-1), Integer(k)), Pow(d, Integer(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(d, Mul(Integer(-1), n)), Pow(x, Mul(Mul(Integer(-1), Integer(k)), n))), Mul(c, Pow(d, Mul(Integer(-2), n)), Pow(x, Mul(Integer(-2), Integer(k), n)))), p), Pow(Pow(x, Add(Mul(Integer(k), Add(m, Integer(1))), Integer(1))), Integer(-1))), x), x, Mul(Integer(1), Pow(Pow(Mul(d, x), Mul(Integer(1), Pow(Integer(k), Integer(-1)))), Integer(-1)))))))
    rubi.add(rule740)

    pattern741 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), Not(RationalQ(m_))), (n, c, x, n2, m, b, p, a, d)))
    rule741 = ReplacementRule(pattern741, lambda n, c, x, n2, m, b, p, a, d : Mul(Mul(Integer(-1), Pow(d, IntPart(m))), Pow(Mul(d, x), FracPart(m)), Pow(Pow(x, Integer(-1)), FracPart(m)), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule741)

    pattern742 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(n_)), (n, c, x, m, n2, b, p, a)))
    rule742 = ReplacementRule(pattern742, lambda n, c, x, m, n2, b, p, a : With(List(Set(Integer(k), Denominator(n))), Mul(Integer(k), Subst(Int(Mul(Pow(x, Add(Mul(Integer(k), Add(m, Integer(1))), Integer(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(k), n))), Mul(c, Pow(x, Mul(Integer(2), Integer(k), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(k), Integer(-1))))))))
    rubi.add(rule742)

    pattern743 = Pattern(Int(Mul(Pow(Mul(d_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(n_)), (n, c, x, n2, m, b, p, a, d)))
    rule743 = ReplacementRule(pattern743, lambda n, c, x, n2, m, b, p, a, d : Mul(Pow(d, IntPart(m)), Mul(Pow(Mul(d, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule743)

    pattern744 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, c, x, m, n2, b, p, a)))
    rule744 = ReplacementRule(pattern744, lambda n, c, x, m, n2, b, p, a : Mul(Mul(Integer(1), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Pow(Add(a, Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1)))))), Mul(c, Pow(x, Simplify(Mul(Integer(2), Mul(n, Pow(Add(m, Integer(1)), Integer(-1)))))))), p), x), x, Pow(x, Add(m, Integer(1))))))
    rubi.add(rule744)

    pattern745 = Pattern(Int(Mul(Pow(Mul(d_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, c, x, n2, m, b, p, a, d)))
    rule745 = ReplacementRule(pattern745, lambda n, c, x, n2, m, b, p, a, d : Mul(Pow(d, IntPart(m)), Mul(Pow(Mul(d, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule745)

    pattern746 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, c, x, m, n2, b, a, d)))
    rule746 = ReplacementRule(pattern746, lambda n, c, x, m, n2, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, n))), Integer(-1))), x)), Mul(Integer(-1), Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, n))), Integer(-1))), x))))))
    rubi.add(rule746)

    pattern747 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (n, c, x, m, n2, b, p, a, d)))
    rule747 = ReplacementRule(pattern747, lambda n, c, x, m, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Mul(d, x), Add(m, Integer(1)))), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)), Mul(b, c, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, d, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(Pow(b, Integer(2)), Add(Mul(n, Add(p, Integer(1))), m, Integer(1))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)))), Mul(b, c, Add(Mul(Integer(2), n, p), Mul(Integer(3), n), m, Integer(1)), Pow(x, n))), x)), x))))
    rubi.add(rule747)

    pattern748 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_))), (n, c, x, m, n2, b, p, a, d)))
    rule748 = ReplacementRule(pattern748, lambda n, c, x, m, n2, b, p, a, d : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, n), Pow(Add(b, Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2))), Integer(-1))))), FracPart(p)), Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, n), Pow(Add(b, Mul(Integer(-1), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Integer(-1))))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, n), Pow(Add(b, Sqrt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))))), Integer(-1))))), p), Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, n), Pow(Add(b, Mul(Integer(-1), Sqrt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))))), Integer(-1))))), p)), x)))
    rubi.add(rule748)

    pattern749 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_)), IntegerQ(p_), PosQ(n_)), (n, c, x, m, b, p, a, mn)))
    rule749 = ReplacementRule(pattern749, lambda n, c, x, m, b, p, a, mn : Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(n, p)))), Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule749)

    pattern750 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_)), Not(IntegerQ(p_)), PosQ(n_)), (n, c, x, m, b, p, a, mn)))
    rule750 = ReplacementRule(pattern750, lambda n, c, x, m, b, p, a, mn : Mul(Pow(x, Mul(n, FracPart(p))), Mul(Pow(Add(a, Mul(b, Pow(Pow(x, n), Integer(-1))), Mul(c, Pow(x, n))), FracPart(p)), Pow(Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(n, p)))), Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule750)

    pattern751 = Pattern(Int(Mul(Pow(Mul(d_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_))), (n, c, x, m, b, p, a, d, mn)))
    rule751 = ReplacementRule(pattern751, lambda n, c, x, m, b, p, a, d, mn : Mul(Pow(d, IntPart(m)), Mul(Pow(Mul(d, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, n))), p)), x)))
    rubi.add(rule751)

    pattern752 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(v_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(v_, n_))), Wildcard.optional('p', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), LinearQ(v_, x_), IntegerQ(m_), NonzeroQ(Add(v_, Mul(Integer(-1), x_)))), (n, c, x, n2, m, b, p, a, v)))
    rule752 = ReplacementRule(pattern752, lambda n, c, x, n2, m, b, p, a, v : Mul(Mul(Integer(1), Pow(Pow(Coefficient(v, x, Integer(1)), Add(m, Integer(1))), Integer(-1))), Subst(Int(SimplifyIntegrand(Mul(Pow(Add(x, Mul(Integer(-1), Coefficient(v, x, Integer(0)))), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x), x, v)))
    rubi.add(rule752)

    pattern753 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(v_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(v_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), LinearPairQ(u_, v_, x_)), (n, c, x, m, n2, u, b, p, a, v)))
    rule753 = ReplacementRule(pattern753, lambda n, c, x, m, n2, u, b, p, a, v : Mul(Mul(Pow(u, m), Pow(Mul(Coefficient(v, x, Integer(1)), Pow(v, m)), Integer(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x, v)))
    rubi.add(rule753)

    pattern754 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegersQ(p_, q_), NegQ(n_)), (e, n, q, c, x, n2, b, p, a, d)))
    rule754 = ReplacementRule(pattern754, lambda e, n, q, c, x, n2, b, p, a, d : Int(Mul(Pow(x, Mul(n, Add(Mul(Integer(2), p), q))), Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), n)))), q), Pow(Add(c, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(a, Pow(x, Mul(Integer(-2), n)))), p)), x))
    rubi.add(rule754)

    pattern755 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegersQ(p_, q_), NegQ(n_)), (e, n, q, c, x, n2, p, a, d)))
    rule755 = ReplacementRule(pattern755, lambda e, n, q, c, x, n2, p, a, d : Int(Mul(Pow(x, Mul(n, Add(Mul(Integer(2), p), q))), Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), n)))), q), Pow(Add(c, Mul(a, Pow(x, Mul(Integer(-2), n)))), p)), x))
    rubi.add(rule755)

    pattern756 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(n_)), (e, n, q, c, x, n2, b, p, a, d)))
    rule756 = ReplacementRule(pattern756, lambda e, n, q, c, x, n2, b, p, a, d : Mul(Integer(-1), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), q), Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Integer(2)), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule756)

    pattern757 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(n_)), (e, n, q, c, x, n2, p, a, d)))
    rule757 = ReplacementRule(pattern757, lambda e, n, q, c, x, n2, p, a, d : Mul(Integer(-1), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), q), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Integer(2)), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule757)

    pattern758 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), FractionQ(n_)), (e, n, q, c, x, n2, b, p, a, d)))
    rule758 = ReplacementRule(pattern758, lambda e, n, q, c, x, n2, b, p, a, d : With(List(Set(Integer(g), Denominator(n))), Mul(Integer(g), Subst(Int(Mul(Pow(x, Add(Integer(g), Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Mul(Integer(g), n)))), q), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(g), n))), Mul(c, Pow(x, Mul(Integer(2), Integer(g), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1))))))))
    rubi.add(rule758)

    pattern759 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), FractionQ(n_)), (e, n, q, c, x, n2, p, a, d)))
    rule759 = ReplacementRule(pattern759, lambda e, n, q, c, x, n2, p, a, d : With(List(Set(Integer(g), Denominator(n))), Mul(Integer(g), Subst(Int(Mul(Pow(x, Add(Integer(g), Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Mul(Integer(g), n)))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), Integer(g), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1))))))))
    rubi.add(rule759)

    pattern760 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Not(IntegerQ(p_)), ZeroQ(Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1)))), (e, n, c, x, n2, b, p, d)))
    rule760 = ReplacementRule(pattern760, lambda e, n, c, x, n2, b, p, d : Add(Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(d, c))), Mul(Pow(Add(Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(b, c, n, Add(p, Integer(1)), Pow(x, Mul(Integer(2), n, Add(p, Integer(1))))), Integer(-1)))), Mul(Mul(e, Pow(c, Integer(-1))), Int(Mul(Pow(x, Mul(Integer(-1), n)), Pow(Add(Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), x))))
    rubi.add(rule760)

    pattern761 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1))), ZeroQ(Add(Mul(b_, e_, Add(Mul(n_, p_), Integer(1))), Mul(Integer(-1), Mul(c_, d_, Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1))))))), (e, n, c, x, n2, b, p, d)))
    rule761 = ReplacementRule(pattern761, lambda e, n, c, x, n2, b, p, d : Mul(e, Pow(x, Add(Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(c, Add(Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))))
    rubi.add(rule761)

    pattern762 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1))), NonzeroQ(Add(Mul(b_, e_, Add(Mul(n_, p_), Integer(1))), Mul(Integer(-1), Mul(c_, d_, Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1))))))), (e, n, c, x, n2, b, p, d)))
    rule762 = ReplacementRule(pattern762, lambda e, n, c, x, n2, b, p, d : Add(Mul(e, Pow(x, Add(Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(c, Add(Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(b, e, Add(Mul(n, p), Integer(1))), Mul(Integer(-1), Mul(c, d, Add(Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))))), Pow(Mul(c, Add(Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Pow(Add(Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), x)))))
    rubi.add(rule762)

    pattern763 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Not(IntegerQ(p_))), (e, n, q, c, x, n2, b, p, d)))
    rule763 = ReplacementRule(pattern763, lambda e, n, q, c, x, n2, b, p, d : Mul(Mul(Pow(Add(Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(x, Mul(n, FracPart(p))), Pow(Add(b, Mul(c, Pow(x, n))), FracPart(p))), Integer(-1))), Int(Mul(Pow(x, Mul(n, p)), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Mul(c, Pow(x, n))), p)), x)))
    rubi.add(rule763)

    pattern764 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_))), (e, n, q, c, x, n2, b, p, a, d)))
    rule764 = ReplacementRule(pattern764, lambda e, n, q, c, x, n2, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), p))), x)))
    rubi.add(rule764)

    pattern765 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(p_)), (e, n, q, c, x, n2, b, p, a, d)))
    rule765 = ReplacementRule(pattern765, lambda e, n, q, c, x, n2, b, p, a, d : Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(p, q)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x))
    rubi.add(rule765)

    pattern766 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(p_)), (e, n, q, c, x, n2, p, a, d)))
    rule766 = ReplacementRule(pattern766, lambda e, n, q, c, x, n2, p, a, d : Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(p, q)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x))
    rubi.add(rule766)

    pattern767 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (e, n, q, c, x, n2, b, p, a, d)))
    rule767 = ReplacementRule(pattern767, lambda e, n, q, c, x, n2, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, Pow(x, n))), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(x, n)), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(p, q)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x)))
    rubi.add(rule767)

    pattern768 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (e, n, q, c, x, n2, p, a, d)))
    rule768 = ReplacementRule(pattern768, lambda e, n, q, c, x, n2, p, a, d : Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, Pow(x, n))), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(x, n)), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(p, q)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x)))
    rubi.add(rule768)

    pattern769 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(q_)), (e, n, q, c, x, n2, b, a, d)))
    rule769 = ReplacementRule(pattern769, lambda e, n, q, c, x, n2, b, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n))))), x), x))
    rubi.add(rule769)

    pattern770 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(q_)), (e, n, q, c, x, n2, a, d)))
    rule770 = ReplacementRule(pattern770, lambda e, n, q, c, x, n2, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Add(a, Mul(c, Pow(x, Mul(Integer(2), n))))), x), x))
    rubi.add(rule770)

    pattern771 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), RationalQ(q_), Less(q_, Integer(-1))), (e, n, q, c, x, n2, b, a, d)))
    rule771 = ReplacementRule(pattern771, lambda e, n, q, c, x, n2, b, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), x, Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(d, Pow(e, Integer(2)), n, Add(q, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(n, Add(q, Integer(1)), d, Pow(e, Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Simp(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)), Add(Mul(n, Add(q, Integer(1))), Integer(1))), Mul(c, d, e, n, Add(q, Integer(1)), Pow(x, n))), x)), x))))
    rubi.add(rule771)

    pattern772 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), RationalQ(q_), Less(q_, Integer(-1))), (e, n, q, c, x, n2, a, d)))
    rule772 = ReplacementRule(pattern772, lambda e, n, q, c, x, n2, a, d : Add(Mul(Mul(Integer(-1), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), x, Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(d, Pow(e, Integer(2)), n, Add(q, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(n, Add(q, Integer(1)), d, Pow(e, Integer(2))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Simp(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)), Add(Mul(n, Add(q, Integer(1))), Integer(1))), Mul(c, d, e, n, Add(q, Integer(1)), Pow(x, n))), x)), x))))
    rubi.add(rule772)

    pattern773 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (e, n, q, c, x, n2, b, a, d)))
    rule773 = ReplacementRule(pattern773, lambda e, n, q, c, x, n2, b, a, d : Add(Mul(c, Pow(x, Add(n, Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(e, Add(Mul(n, Add(q, Integer(2))), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(e, Add(Mul(n, Add(q, Integer(2))), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Add(Mul(a, e, Add(Mul(n, Add(q, Integer(2))), Integer(1))), Mul(Integer(-1), Mul(Add(Mul(c, d, Add(n, Integer(1))), Mul(Integer(-1), Mul(b, e, Add(Mul(n, Add(q, Integer(2))), Integer(1))))), Pow(x, n))))), x))))
    rubi.add(rule773)

    pattern774 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, n, q, c, x, n2, a, d)))
    rule774 = ReplacementRule(pattern774, lambda e, n, q, c, x, n2, a, d : Add(Mul(c, Pow(x, Add(n, Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(e, Add(Mul(n, Add(q, Integer(2))), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(e, Add(Mul(n, Add(q, Integer(2))), Integer(1))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Add(Mul(a, e, Add(Mul(n, Add(q, Integer(2))), Integer(1))), Mul(Integer(-1), Mul(c, d, Add(n, Integer(1)), Pow(x, n))))), x))))
    rubi.add(rule774)

    pattern775 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2)))))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), PosQ(Mul(d_, e_))), (e, n, c, x, n2, a, d)))
    rule775 = ReplacementRule(pattern775, lambda e, n, c, x, n2, a, d : With(List(Set(Integer(q), Rt(Mul(Integer(2), d, e), Integer(2)))), Add(Mul(Mul(Pow(e, Integer(2)), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Add(d, Mul(Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Mul(e, Pow(x, n))), Integer(-1))), x)), Mul(Mul(Pow(e, Integer(2)), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Add(d, Mul(Integer(-1), Mul(Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Mul(e, Pow(x, n))), Integer(-1))), x)))))
    rubi.add(rule775)

    pattern776 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2)))))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), NegQ(Mul(d_, e_))), (e, n, c, x, n2, a, d)))
    rule776 = ReplacementRule(pattern776, lambda e, n, c, x, n2, a, d : With(List(Set(Integer(q), Rt(Mul(Integer(-2), d, e), Integer(2)))), Add(Mul(Mul(d, Pow(Mul(Integer(2), a), Integer(-1))), Int(Mul(Add(d, Mul(Integer(-1), Mul(Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))))), Pow(Add(d, Mul(Integer(-1), Mul(Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Mul(Integer(-1), Mul(e, Pow(x, n)))), Integer(-1))), x)), Mul(Mul(d, Pow(Mul(Integer(2), a), Integer(-1))), Int(Mul(Add(d, Mul(Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(d, Mul(Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Mul(Integer(-1), Mul(e, Pow(x, n)))), Integer(-1))), x)))))
    rubi.add(rule776)

    pattern777 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2)))))), PosQ(Mul(a_, c_))), (e, c, x, a, d)))
    rule777 = ReplacementRule(pattern777, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(a, c), Integer(2)))), Add(Mul(Mul(Add(Mul(d, Integer(q)), Mul(a, e)), Pow(Mul(Integer(2), a, c), Integer(-1))), Int(Mul(Add(Integer(q), Mul(c, Pow(x, Integer(2)))), Pow(Add(a, Mul(c, Pow(x, Integer(4)))), Integer(-1))), x)), Mul(Mul(Add(Mul(d, Integer(q)), Mul(Integer(-1), Mul(a, e))), Pow(Mul(Integer(2), a, c), Integer(-1))), Int(Mul(Add(Integer(q), Mul(Integer(-1), Mul(c, Pow(x, Integer(2))))), Pow(Add(a, Mul(c, Pow(x, Integer(4)))), Integer(-1))), x)))))
    rubi.add(rule777)

    pattern778 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2)))))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), PosQ(Mul(a_, c_))), (e, n, c, x, n2, a, d)))
    rule778 = ReplacementRule(pattern778, lambda e, n, c, x, n2, a, d : With(List(Set(Integer(q), Rt(Mul(a, Pow(c, Integer(-1))), Integer(4)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), Sqrt(Integer(2)), c, Pow(Integer(q), Integer(3))), Integer(-1))), Int(Mul(Add(Mul(Sqrt(Integer(2)), d, Integer(q)), Mul(Integer(-1), Mul(Add(d, Mul(Integer(-1), Mul(e, Pow(Integer(q), Integer(2))))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))))), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Sqrt(Integer(2)), Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(x, n)), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Mul(Integer(2), Sqrt(Integer(2)), c, Pow(Integer(q), Integer(3))), Integer(-1))), Int(Mul(Add(Mul(Sqrt(Integer(2)), d, Integer(q)), Mul(Add(d, Mul(Integer(-1), Mul(e, Pow(Integer(q), Integer(2))))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Sqrt(Integer(2)), Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Pow(x, n)), Integer(-1))), x)))))
    rubi.add(rule778)

    pattern779 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(3)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(6)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PosQ(Mul(c_, Pow(a_, Integer(-1))))), (e, c, x, a, d)))
    rule779 = ReplacementRule(pattern779, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(6)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(3), a, Pow(Integer(q), Integer(2))), Integer(-1))), Int(Mul(Add(Mul(Pow(Integer(q), Integer(2)), d), Mul(Integer(-1), Mul(e, x))), Pow(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Mul(Integer(6), a, Pow(Integer(q), Integer(2))), Integer(-1))), Int(Mul(Add(Mul(Integer(2), Pow(Integer(q), Integer(2)), d), Mul(Integer(-1), Mul(Add(Mul(Sqrt(Integer(3)), Pow(Integer(q), Integer(3)), d), Mul(Integer(-1), e)), x))), Pow(Add(Integer(1), Mul(Integer(-1), Mul(Sqrt(Integer(3)), Integer(q), x)), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Mul(Integer(6), a, Pow(Integer(q), Integer(2))), Integer(-1))), Int(Mul(Add(Mul(Integer(2), Pow(Integer(q), Integer(2)), d), Mul(Add(Mul(Sqrt(Integer(3)), Pow(Integer(q), Integer(3)), d), e), x)), Pow(Add(Integer(1), Mul(Sqrt(Integer(3)), Integer(q), x), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x)))))
    rubi.add(rule779)

    pattern780 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), NegQ(Mul(a_, c_)), IntegerQ(n_)), (e, n, c, x, n2, a, d)))
    rule780 = ReplacementRule(pattern780, lambda e, n, c, x, n2, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), Pow(c, Integer(-1))), Integer(2)))), Add(Mul(Mul(Add(d, Mul(e, Integer(q))), Pow(Integer(2), Integer(-1))), Int(Mul(Integer(1), Pow(Add(a, Mul(c, Integer(q), Pow(x, n))), Integer(-1))), x)), Mul(Mul(Add(d, Mul(Integer(-1), Mul(e, Integer(q)))), Pow(Integer(2), Integer(-1))), Int(Mul(Integer(1), Pow(Add(a, Mul(Integer(-1), Mul(c, Integer(q), Pow(x, n)))), Integer(-1))), x)))))
    rubi.add(rule780)

    pattern781 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Or(PosQ(Mul(a_, c_)), Not(IntegerQ(n_)))), (e, n, c, x, n2, a, d)))
    rule781 = ReplacementRule(pattern781, lambda e, n, c, x, n2, a, d : Add(Mul(d, Int(Mul(Integer(1), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x)), Mul(e, Int(Mul(Pow(x, n), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x))))
    rubi.add(rule781)

    pattern782 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2)))))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), Or(PositiveQ(Add(Mul(Integer(2), Mul(d_, Pow(e_, Integer(-1)))), Mul(Integer(-1), Mul(b_, Pow(c_, Integer(-1)))))), And(Not(NegativeQ(Add(Mul(Integer(2), Mul(d_, Pow(e_, Integer(-1)))), Mul(Integer(-1), Mul(b_, Pow(c_, Integer(-1))))))), ZeroQ(Add(d_, Mul(Integer(-1), Mul(e_, Rt(Mul(a_, Pow(c_, Integer(-1))), Integer(2))))))))), (e, n, c, x, n2, b, a, d)))
    rule782 = ReplacementRule(pattern782, lambda e, n, c, x, n2, b, a, d : With(List(Set(Integer(q), Rt(Add(Mul(Integer(2), Mul(d, Pow(e, Integer(-1)))), Mul(Integer(-1), Mul(b, Pow(c, Integer(-1))))), Integer(2)))), Add(Mul(Mul(Pow(e, Integer(2)), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Add(d, Mul(e, Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Mul(e, Pow(x, n))), Integer(-1))), x)), Mul(Mul(Pow(e, Integer(2)), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Add(d, Mul(Integer(-1), Mul(e, Integer(q), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Mul(e, Pow(x, n))), Integer(-1))), x)))))
    rubi.add(rule782)

    pattern783 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2)))))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, n, c, x, n2, b, a, d)))
    rule783 = ReplacementRule(pattern783, lambda e, n, c, x, n2, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))), Int(Mul(Integer(1), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))), Mul(c, Pow(x, n))), Integer(-1))), x)), Mul(Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), Integer(q)), Integer(-1))))), Int(Mul(Integer(1), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Integer(-1))), x)))))
    rubi.add(rule783)

    pattern784 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2)))))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), Not(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))))), (e, n, c, x, n2, b, a, d)))
    rule784 = ReplacementRule(pattern784, lambda e, n, c, x, n2, b, a, d : With(List(Set(Integer(q), Rt(Mul(a, Pow(c, Integer(-1))), Integer(2)))), With(List(Set(Integer(r), Rt(Add(Mul(Integer(2), Integer(q)), Mul(Integer(-1), Mul(b, Pow(c, Integer(-1))))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(q), Integer(r)), Integer(-1))), Int(Mul(Add(Mul(d, Integer(r)), Mul(Integer(-1), Mul(Add(d, Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))))), Pow(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(x, n)), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(q), Integer(r)), Integer(-1))), Int(Mul(Add(Mul(d, Integer(r)), Mul(Add(d, Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Pow(x, n)), Integer(-1))), x))))))
    rubi.add(rule784)

    pattern785 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Or(PosQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1))))))), (e, n, c, x, n2, b, a, d)))
    rule785 = ReplacementRule(pattern785, lambda e, n, c, x, n2, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))), Int(Mul(Integer(1), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))), Mul(c, Pow(x, n))), Integer(-1))), x)), Mul(Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), Integer(q)), Integer(-1))))), Int(Mul(Integer(1), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Integer(-1))), x)))))
    rubi.add(rule785)

    pattern786 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), NegQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, n, c, x, n2, b, a, d)))
    rule786 = ReplacementRule(pattern786, lambda e, n, c, x, n2, b, a, d : With(List(Set(Integer(q), Rt(Mul(a, Pow(c, Integer(-1))), Integer(2)))), With(List(Set(Integer(r), Rt(Add(Mul(Integer(2), Integer(q)), Mul(Integer(-1), Mul(b, Pow(c, Integer(-1))))), Integer(2)))), Add(Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(q), Integer(r)), Integer(-1))), Int(Mul(Add(Mul(d, Integer(r)), Mul(Integer(-1), Mul(Add(d, Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))))), Pow(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(x, n)), Integer(-1))), x)), Mul(Mul(Integer(1), Pow(Mul(Integer(2), c, Integer(q), Integer(r)), Integer(-1))), Int(Mul(Add(Mul(d, Integer(r)), Mul(Add(d, Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Pow(x, n)), Integer(-1))), x))))))
    rubi.add(rule786)

    pattern787 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(q_)), (e, n, q, c, x, n2, b, a, d)))
    rule787 = ReplacementRule(pattern787, lambda e, n, q, c, x, n2, b, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule787)

    pattern788 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(q_)), (e, n, q, c, x, n2, a, d)))
    rule788 = ReplacementRule(pattern788, lambda e, n, q, c, x, n2, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule788)

    pattern789 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(q_)), RationalQ(q_), Less(q_, Integer(-1))), (e, n, q, c, x, n2, b, a, d)))
    rule789 = ReplacementRule(pattern789, lambda e, n, q, c, x, n2, b, a, d : Add(Mul(Mul(Pow(e, Integer(2)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Pow(Add(d, Mul(e, Pow(x, n))), q), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(c, e, Pow(x, n)))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x))))
    rubi.add(rule789)

    pattern790 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(q_)), RationalQ(q_), Less(q_, Integer(-1))), (e, n, q, c, x, n2, a, d)))
    rule790 = ReplacementRule(pattern790, lambda e, n, q, c, x, n2, a, d : Add(Mul(Mul(Pow(e, Integer(2)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Pow(Add(d, Mul(e, Pow(x, n))), q), x)), Mul(Mul(c, Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Mul(Add(d, Mul(Integer(-1), Mul(e, Pow(x, n)))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x))))
    rubi.add(rule790)

    pattern791 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(q_))), (e, n, q, c, x, n2, b, a, d)))
    rule791 = ReplacementRule(pattern791, lambda e, n, q, c, x, n2, b, a, d : With(List(Set(Integer(r), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Integer(2), Mul(c, Pow(Integer(r), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Mul(Integer(-1), Integer(r)), Mul(Integer(2), c, Pow(x, n))), Integer(-1))), x)), Mul(Integer(-1), Mul(Integer(2), Mul(c, Pow(Integer(r), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Integer(r), Mul(Integer(2), c, Pow(x, n))), Integer(-1))), x))))))
    rubi.add(rule791)

    pattern792 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(q_))), (e, n, q, c, x, n2, a, d)))
    rule792 = ReplacementRule(pattern792, lambda e, n, q, c, x, n2, a, d : With(List(Set(Integer(r), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Add(Mul(Mul(Mul(Integer(-1), c), Pow(Mul(Integer(2), Integer(r)), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(Integer(r), Mul(Integer(-1), Mul(c, Pow(x, n)))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(c, Pow(Mul(Integer(2), Integer(r)), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(Integer(r), Mul(c, Pow(x, n))), Integer(-1))), x))))))
    rubi.add(rule792)

    pattern793 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(Mul(Integer(2), n_, p_), Integer(1))), NonzeroQ(Add(Mul(Integer(2), n_, p_), n_, Integer(1))), IntegerQ(Mul(Integer(2), p_)), Or(IntegerQ(p_), ZeroQ(Add(n_, Integer(-2))))), (e, n, c, x, n2, b, p, a, d)))
    rule793 = ReplacementRule(pattern793, lambda e, n, c, x, n2, b, p, a, d : Add(Mul(x, Add(Mul(b, e, n, p), Mul(c, d, Add(Mul(Integer(2), n, p), n, Integer(1))), Mul(c, e, Add(Mul(Integer(2), n, p), Integer(1)), Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(c, Add(Mul(Integer(2), n, p), Integer(1)), Add(Mul(Integer(2), n, p), n, Integer(1))), Integer(-1)))), Mul(n, Mul(p, Pow(Mul(c, Add(Mul(Integer(2), n, p), Integer(1)), Add(Mul(Integer(2), n, p), n, Integer(1))), Integer(-1))), Int(Mul(Simp(Add(Mul(Integer(2), a, c, d, Add(Mul(Integer(2), n, p), n, Integer(1))), Mul(Integer(-1), Mul(a, b, e)), Mul(Add(Mul(Integer(2), a, c, e, Add(Mul(Integer(2), n, p), Integer(1))), Mul(b, d, c, Add(Mul(Integer(2), n, p), n, Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), e, Add(Mul(n, p), Integer(1))))), Pow(x, n))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule793)

    pattern794 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), FractionQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(Mul(Integer(2), n_, p_), Integer(1))), NonzeroQ(Add(Mul(Integer(2), n_, p_), n_, Integer(1))), IntegerQ(Mul(Integer(2), p_)), Or(IntegerQ(p_), ZeroQ(Add(n_, Integer(-2))))), (e, n, c, x, n2, p, a, d)))
    rule794 = ReplacementRule(pattern794, lambda e, n, c, x, n2, p, a, d : Add(Mul(x, Add(Mul(d, Add(Mul(Integer(2), n, p), n, Integer(1))), Mul(e, Add(Mul(Integer(2), n, p), Integer(1)), Pow(x, n))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Mul(Add(Mul(Integer(2), n, p), Integer(1)), Add(Mul(Integer(2), n, p), n, Integer(1))), Integer(-1)))), Mul(Integer(2), a, n, Mul(p, Pow(Mul(Add(Mul(Integer(2), n, p), Integer(1)), Add(Mul(Integer(2), n, p), n, Integer(1))), Integer(-1))), Int(Mul(Add(Mul(d, Add(Mul(Integer(2), n, p), n, Integer(1))), Mul(e, Add(Mul(Integer(2), n, p), Integer(1)), Pow(x, n))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x))))
    rubi.add(rule794)

    pattern795 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1)), IntegerQ(Mul(Integer(2), p_)), Or(IntegerQ(p_), ZeroQ(Add(n_, Integer(-2))))), (e, n, c, x, n2, b, p, a, d)))
    rule795 = ReplacementRule(pattern795, lambda e, n, c, x, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(d, Pow(b, Integer(2))), Mul(Integer(-1), Mul(a, b, e)), Mul(Integer(-1), Mul(Integer(2), a, c, d)), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e))), c, Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Simp(Add(Mul(Add(Mul(n, p), n, Integer(1)), d, Pow(b, Integer(2))), Mul(Integer(-1), Mul(a, b, e)), Mul(Integer(-1), Mul(Integer(2), a, c, d, Add(Mul(Integer(2), n, p), Mul(Integer(2), n), Integer(1)))), Mul(Add(Mul(Integer(2), n, p), Mul(Integer(3), n), Integer(1)), Add(Mul(d, b), Mul(Integer(-1), Mul(Integer(2), a, e))), c, Pow(x, n))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), x))))
    rubi.add(rule795)

    pattern796 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), RationalQ(p_), Less(p_, Integer(-1)), IntegerQ(Mul(Integer(2), p_)), Or(IntegerQ(p_), ZeroQ(Add(n_, Integer(-2))))), (e, n, c, x, n2, p, a, d)))
    rule796 = ReplacementRule(pattern796, lambda e, n, c, x, n2, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(d, Mul(e, Pow(x, n))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, n, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, n, Add(p, Integer(1))), Integer(-1))), Int(Mul(Add(Mul(d, Add(Mul(Integer(2), n, p), Mul(Integer(2), n), Integer(1))), Mul(e, Add(Mul(Integer(2), n, p), Mul(Integer(3), n), Integer(1)), Pow(x, n))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1)))), x))))
    rubi.add(rule796)

    pattern797 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeQ(c_)), (e, c, x, b, a, d)))
    rule797 = ReplacementRule(pattern797, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Integer(2), Sqrt(Mul(Integer(-1), c)), Int(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Pow(Mul(Sqrt(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2))))), Sqrt(Add(Mul(Integer(-1), b), Integer(q), Mul(Integer(-1), Mul(Integer(2), c, Pow(x, Integer(2))))))), Integer(-1))), x))))
    rubi.add(rule797)

    pattern798 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(a_), NegativeQ(c_)), (e, c, x, a, d)))
    rule798 = ReplacementRule(pattern798, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Mul(Sqrt(Mul(Integer(-1), c)), Int(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Pow(Mul(Sqrt(Add(Integer(q), Mul(c, Pow(x, Integer(2))))), Sqrt(Add(Integer(q), Mul(Integer(-1), Mul(c, Pow(x, Integer(2))))))), Integer(-1))), x))))
    rubi.add(rule798)

    pattern799 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveQ(Mul(c_, Pow(a_, Integer(-1)))), NegativeQ(Mul(b_, Pow(a_, Integer(-1))))), (e, c, x, b, a, d)))
    rule799 = ReplacementRule(pattern799, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(4)))), Condition(Add(Mul(Mul(Integer(-1), d), x, Mul(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Pow(Mul(a, Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2))))), Integer(-1)))), Mul(d, Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Pow(Mul(a, Pow(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(2))), Integer(-1)))), Pow(Mul(Integer(q), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticE(Mul(Integer(2), ArcTan(Mul(Integer(q), x))), Add(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(b, Mul(Pow(Integer(q), Integer(2)), Pow(Mul(Integer(4), c), Integer(-1))))))))), ZeroQ(Add(e, Mul(d, Pow(Integer(q), Integer(2))))))))
    rubi.add(rule799)

    pattern800 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveQ(Mul(c_, Pow(a_, Integer(-1)))), NegativeQ(Mul(b_, Pow(a_, Integer(-1))))), (e, c, x, b, a, d)))
    rule800 = ReplacementRule(pattern800, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(2)))), Condition(Add(Mul(Mul(Add(e, Mul(d, Integer(q))), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(e, Pow(Integer(q), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)))), NonzeroQ(Add(e, Mul(d, Integer(q)))))))
    rubi.add(rule800)

    pattern801 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeQ(a_), PositiveQ(c_)), (e, c, x, b, a, d)))
    rule801 = ReplacementRule(pattern801, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(e, x, Mul(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Mul(Integer(2), c, Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1)))), Mul(Integer(-1), Mul(e, Integer(q), Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(x, Integer(2)))), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Integer(-1)))), Mul(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Pow(Integer(q), Integer(-1)))), Pow(Mul(Integer(2), c, Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Sqrt(Mul(a, Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Integer(-1))))), Integer(-1))), EllipticE(ArcSin(Mul(x, Pow(Sqrt(Mul(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), Pow(x, Integer(2)))), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))), Integer(-1)))), Mul(Add(b, Integer(q)), Pow(Mul(Integer(2), Integer(q)), Integer(-1))))))), ZeroQ(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q))))))))))
    rubi.add(rule801)

    pattern802 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NegativeQ(a_), PositiveQ(c_)), (e, c, x, a, d)))
    rule802 = ReplacementRule(pattern802, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Condition(Add(Mul(e, x, Mul(Add(Integer(q), Mul(c, Pow(x, Integer(2)))), Pow(Mul(c, Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1)))), Mul(Integer(-1), Mul(Sqrt(Integer(2)), e, Integer(q), Sqrt(Add(Mul(Integer(-1), a), Mul(Integer(q), Pow(x, Integer(2))))), Mul(Sqrt(Mul(Add(a, Mul(Integer(q), Pow(x, Integer(2)))), Pow(Integer(q), Integer(-1)))), Pow(Mul(Sqrt(Mul(Integer(-1), a)), c, Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticE(ArcSin(Mul(x, Pow(Sqrt(Mul(Add(a, Mul(Integer(q), Pow(x, Integer(2)))), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))), Integer(-1)))), Mul(Integer(1), Pow(Integer(2), Integer(-1))))))), And(ZeroQ(Add(Mul(c, d), Mul(e, Integer(q)))), IntegerQ(Integer(q))))))
    rubi.add(rule802)

    pattern803 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NegativeQ(a_), PositiveQ(c_)), (e, c, x, a, d)))
    rule803 = ReplacementRule(pattern803, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Condition(Add(Mul(e, x, Mul(Add(Integer(q), Mul(c, Pow(x, Integer(2)))), Pow(Mul(c, Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1)))), Mul(Integer(-1), Mul(Sqrt(Integer(2)), e, Integer(q), Sqrt(Mul(Add(a, Mul(Integer(-1), Mul(Integer(q), Pow(x, Integer(2))))), Pow(Add(a, Mul(Integer(q), Pow(x, Integer(2)))), Integer(-1)))), Mul(Sqrt(Mul(Add(a, Mul(Integer(q), Pow(x, Integer(2)))), Pow(Integer(q), Integer(-1)))), Pow(Mul(c, Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Sqrt(Mul(a, Pow(Add(a, Mul(Integer(q), Pow(x, Integer(2)))), Integer(-1))))), Integer(-1))), EllipticE(ArcSin(Mul(x, Pow(Sqrt(Mul(Add(a, Mul(Integer(q), Pow(x, Integer(2)))), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))), Integer(-1)))), Mul(Integer(1), Pow(Integer(2), Integer(-1))))))), ZeroQ(Add(Mul(c, d), Mul(e, Integer(q)))))))
    rubi.add(rule803)

    pattern804 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeQ(a_), PositiveQ(c_)), (e, c, x, b, a, d)))
    rule804 = ReplacementRule(pattern804, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q)))))), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(e, Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), NonzeroQ(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q))))))))))
    rubi.add(rule804)

    pattern805 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NegativeQ(a_), PositiveQ(c_)), (e, c, x, a, d)))
    rule805 = ReplacementRule(pattern805, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Condition(Add(Mul(Mul(Add(Mul(c, d), Mul(e, Integer(q))), Pow(c, Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(e, Pow(c, Integer(-1))), Int(Mul(Add(Integer(q), Mul(Integer(-1), Mul(c, Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)))), NonzeroQ(Add(Mul(c, d), Mul(e, Integer(q)))))))
    rubi.add(rule805)

    pattern806 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, c, x, b, a, d)))
    rule806 = ReplacementRule(pattern806, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(d, Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(e, Int(Mul(Pow(x, Integer(2)), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), Or(PosQ(Mul(Add(b, Integer(q)), Pow(a, Integer(-1)))), PosQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1))))))))
    rubi.add(rule806)

    pattern807 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Mul(Mul(Integer(-1), a_), c_))), (e, c, x, a, d)))
    rule807 = ReplacementRule(pattern807, lambda e, c, x, a, d : Add(Mul(d, Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(e, Int(Mul(Pow(x, Integer(2)), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))))
    rubi.add(rule807)

    pattern808 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, c, x, b, a, d)))
    rule808 = ReplacementRule(pattern808, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Mul(Mul(Integer(-1), a), e, Rt(Mul(Mul(Integer(-1), Add(b, Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), Sqrt(Add(Integer(1), Mul(Add(b, Integer(q)), Mul(Pow(x, Integer(2)), Pow(Mul(Integer(2), a), Integer(-1)))))), Mul(Sqrt(Add(Integer(1), Mul(Add(b, Mul(Integer(-1), Integer(q))), Mul(Pow(x, Integer(2)), Pow(Mul(Integer(2), a), Integer(-1)))))), Pow(Mul(c, Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticE(ArcSin(Mul(Rt(Mul(Mul(Integer(-1), Add(b, Integer(q))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), x)), Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(Add(b, Integer(q)), Integer(-1))))), And(NegQ(Mul(Add(b, Integer(q)), Pow(a, Integer(-1)))), ZeroQ(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Integer(q)))))), Not(SimplerSqrtQ(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), a), Integer(-1))), Mul(Mul(Integer(-1), Add(b, Integer(q))), Pow(Mul(Integer(2), a), Integer(-1)))))))))
    rubi.add(rule808)

    pattern809 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, c, x, b, a, d)))
    rule809 = ReplacementRule(pattern809, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Integer(q))))), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(e, Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), And(NegQ(Mul(Add(b, Integer(q)), Pow(a, Integer(-1)))), NonzeroQ(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Integer(q)))))), Not(SimplerSqrtQ(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), a), Integer(-1))), Mul(Mul(Integer(-1), Add(b, Integer(q))), Pow(Mul(Integer(2), a), Integer(-1)))))))))
    rubi.add(rule809)

    pattern810 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, c, x, b, a, d)))
    rule810 = ReplacementRule(pattern810, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Mul(Mul(Integer(-1), a), e, Rt(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), Sqrt(Add(Integer(1), Mul(Add(b, Mul(Integer(-1), Integer(q))), Mul(Pow(x, Integer(2)), Pow(Mul(Integer(2), a), Integer(-1)))))), Mul(Sqrt(Add(Integer(1), Mul(Add(b, Integer(q)), Mul(Pow(x, Integer(2)), Pow(Mul(Integer(2), a), Integer(-1)))))), Pow(Mul(c, Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticE(ArcSin(Mul(Rt(Mul(Mul(Integer(-1), Add(b, Mul(Integer(-1), Integer(q)))), Pow(Mul(Integer(2), a), Integer(-1))), Integer(2)), x)), Mul(Add(b, Integer(q)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1))))), And(NegQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))), ZeroQ(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q)))))))))))
    rubi.add(rule810)

    pattern811 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, c, x, b, a, d)))
    rule811 = ReplacementRule(pattern811, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q)))))), Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(e, Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), And(NegQ(Mul(Add(b, Mul(Integer(-1), Integer(q))), Pow(a, Integer(-1)))), NonzeroQ(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q)))))))))))
    rubi.add(rule811)

    pattern812 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PosQ(Mul(c_, Pow(a_, Integer(-1))))), (e, c, x, b, a, d)))
    rule812 = ReplacementRule(pattern812, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(4)))), Condition(Add(Mul(Mul(Integer(-1), d), x, Mul(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Pow(Mul(a, Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2))))), Integer(-1)))), Mul(d, Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Pow(Mul(a, Pow(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(2))), Integer(-1)))), Pow(Mul(Integer(q), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticE(Mul(Integer(2), ArcTan(Mul(Integer(q), x))), Add(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(b, Mul(Pow(Integer(q), Integer(2)), Pow(Mul(Integer(4), c), Integer(-1))))))))), ZeroQ(Add(e, Mul(d, Pow(Integer(q), Integer(2))))))))
    rubi.add(rule812)

    pattern813 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PosQ(Mul(c_, Pow(a_, Integer(-1))))), (e, c, x, a, d)))
    rule813 = ReplacementRule(pattern813, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(4)))), Condition(Add(Mul(Mul(Integer(-1), d), x, Mul(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Pow(Mul(a, Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2))))), Integer(-1)))), Mul(d, Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(a, Mul(c, Pow(x, Integer(4)))), Pow(Mul(a, Pow(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(2))), Integer(-1)))), Pow(Mul(Integer(q), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticE(Mul(Integer(2), ArcTan(Mul(Integer(q), x))), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(e, Mul(d, Pow(Integer(q), Integer(2))))))))
    rubi.add(rule813)

    pattern814 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PosQ(Mul(c_, Pow(a_, Integer(-1))))), (e, c, x, b, a, d)))
    rule814 = ReplacementRule(pattern814, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(2)))), Condition(Add(Mul(Mul(Add(e, Mul(d, Integer(q))), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(e, Pow(Integer(q), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)))), NonzeroQ(Add(e, Mul(d, Integer(q)))))))
    rubi.add(rule814)

    pattern815 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PosQ(Mul(c_, Pow(a_, Integer(-1))))), (e, c, x, a, d)))
    rule815 = ReplacementRule(pattern815, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(2)))), Condition(Add(Mul(Mul(Add(e, Mul(d, Integer(q))), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(e, Pow(Integer(q), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)))), NonzeroQ(Add(e, Mul(d, Integer(q)))))))
    rubi.add(rule815)

    pattern816 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NegQ(Mul(c_, Pow(a_, Integer(-1)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PositiveQ(a_)), (e, c, x, a, d)))
    rule816 = ReplacementRule(pattern816, lambda e, c, x, a, d : Mul(Mul(d, Pow(Sqrt(a), Integer(-1))), Int(Mul(Sqrt(Add(Integer(1), Mul(e, Mul(Pow(x, Integer(2)), Pow(d, Integer(-1)))))), Pow(Sqrt(Add(Integer(1), Mul(Integer(-1), Mul(e, Mul(Pow(x, Integer(2)), Pow(d, Integer(-1))))))), Integer(-1))), x)))
    rubi.add(rule816)

    pattern817 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NegQ(Mul(c_, Pow(a_, Integer(-1)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(PositiveQ(a_))), (e, c, x, a, d)))
    rule817 = ReplacementRule(pattern817, lambda e, c, x, a, d : Mul(Mul(Sqrt(Add(Integer(1), Mul(c, Mul(Pow(x, Integer(4)), Pow(a, Integer(-1)))))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), Int(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Pow(Sqrt(Add(Integer(1), Mul(c, Mul(Pow(x, Integer(4)), Pow(a, Integer(-1)))))), Integer(-1))), x)))
    rubi.add(rule817)

    pattern818 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NegQ(Mul(c_, Pow(a_, Integer(-1)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule818 = ReplacementRule(pattern818, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), c), Pow(a, Integer(-1))), Integer(2)))), Add(Mul(Mul(Add(Mul(d, Integer(q)), Mul(Integer(-1), e)), Pow(Integer(q), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(e, Pow(Integer(q), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(q), Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)))))
    rubi.add(rule818)

    pattern819 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegQ(Mul(c_, Pow(a_, Integer(-1))))), (e, c, x, b, a, d)))
    rule819 = ReplacementRule(pattern819, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))), Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(q)), Integer(-1)))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), Int(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Pow(Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))), Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(q)), Integer(-1))))))), Integer(-1))), x))))
    rubi.add(rule819)

    pattern820 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, n, c, x, n2, b, p, a, d)))
    rule820 = ReplacementRule(pattern820, lambda e, n, c, x, n2, b, p, a, d : Int(ExpandIntegrand(Mul(Add(d, Mul(e, Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule820)

    pattern821 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_))))), (e, n, c, x, n2, p, a, d)))
    rule821 = ReplacementRule(pattern821, lambda e, n, c, x, n2, p, a, d : Int(ExpandIntegrand(Mul(Add(d, Mul(e, Pow(x, n))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule821)

    pattern822 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(p_), NonzeroQ(Add(Mul(Integer(2), n_, p_), Mul(n_, q_), Integer(1))), PositiveIntegerQ(n_), Not(PositiveIntegerQ(q_))), (e, n, q, c, x, n2, b, p, a, d)))
    rule822 = ReplacementRule(pattern822, lambda e, n, q, c, x, n2, b, p, a, d : Add(Mul(Pow(c, p), Pow(x, Add(Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(e, Add(Mul(Integer(2), n, p), Mul(n, q), Integer(1))), Integer(-1)))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), ExpandToSum(Add(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Integer(-1), Mul(Pow(c, p), Pow(x, Mul(Integer(2), n, p)))), Mul(Integer(-1), Mul(d, Pow(c, p), Add(Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1)), Mul(Pow(x, Add(Mul(Integer(2), n, p), Mul(Integer(-1), n))), Pow(Mul(e, Add(Mul(Integer(2), n, p), Mul(n, q), Integer(1))), Integer(-1)))))), x)), x)))
    rubi.add(rule822)

    pattern823 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(p_), NonzeroQ(Add(Mul(Integer(2), n_, p_), Mul(n_, q_), Integer(1))), PositiveIntegerQ(n_), Not(PositiveIntegerQ(q_))), (e, n, q, c, x, n2, p, a, d)))
    rule823 = ReplacementRule(pattern823, lambda e, n, q, c, x, n2, p, a, d : Add(Mul(Pow(c, p), Pow(x, Add(Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(e, Add(Mul(Integer(2), n, p), Mul(n, q), Integer(1))), Integer(-1)))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), ExpandToSum(Add(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Integer(-1), Mul(Pow(c, p), Pow(x, Mul(Integer(2), n, p)))), Mul(Integer(-1), Mul(d, Pow(c, p), Add(Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1)), Mul(Pow(x, Add(Mul(Integer(2), n, p), Mul(Integer(-1), n))), Pow(Mul(e, Add(Mul(Integer(2), n, p), Mul(n, q), Integer(1))), Integer(-1)))))), x)), x)))
    rubi.add(rule823)

    pattern824 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, b, a, d)))
    rule824 = ReplacementRule(pattern824, lambda e, c, x, b, a, d : Add(Mul(Mul(Integer(-1), Pow(Pow(e, Integer(2)), Integer(-1))), Int(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(c, e, Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Pow(e, Integer(2)), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x))))
    rubi.add(rule824)

    pattern825 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule825 = ReplacementRule(pattern825, lambda e, c, x, a, d : Add(Mul(Mul(Mul(Integer(-1), c), Pow(Pow(e, Integer(2)), Integer(-1))), Int(Mul(Add(d, Mul(Integer(-1), Mul(e, Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Pow(e, Integer(2)), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x))))
    rubi.add(rule825)

    pattern826 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(3), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (e, c, x, b, a, d)))
    rule826 = ReplacementRule(pattern826, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Mul(Mul(Integer(-1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(2))), Pow(Mul(Pow(e, Integer(3)), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Integer(q)))))), Integer(-1))), Int(Mul(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Pow(e, Integer(4)), Integer(-1))), Int(Mul(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), Simp(Add(Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e))), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(Integer(2), a, Pow(e, Integer(2))))), Mul(Integer(-1), Mul(Integer(2), c, Mul(Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(2)), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Integer(q))))), Integer(-1))))), Mul(Integer(-1), Mul(e, Add(Mul(Pow(c, Integer(2)), Pow(d, Integer(2))), Mul(Pow(b, Integer(2)), Pow(e, Integer(2))), Mul(Integer(-1), Mul(Integer(2), c, e, Add(Mul(b, d), Mul(Integer(-1), Mul(a, e)))))), Pow(x, Integer(2)))), Mul(c, Pow(e, Integer(2)), Add(Mul(c, d), Mul(Integer(-1), Mul(Integer(2), b, e))), Pow(x, Integer(4))), Mul(Integer(-1), Mul(Pow(c, Integer(2)), Pow(e, Integer(3)), Pow(x, Integer(6))))), x)), x))))))
    rubi.add(rule826)

    pattern827 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(3), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PositiveQ(Mul(Mul(Integer(-1), a_), c_))), (e, c, x, a, d)))
    rule827 = ReplacementRule(pattern827, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Add(Mul(Mul(Mul(Integer(-1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(2))), Pow(Mul(Pow(e, Integer(3)), Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q))))), Integer(-1))), Int(Mul(Add(Integer(q), Mul(c, Pow(x, Integer(2)))), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(c, Pow(Pow(e, Integer(4)), Integer(-1))), Int(Mul(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), Simp(Add(Mul(d, Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(2), a, Pow(e, Integer(2))))), Mul(Integer(-1), Mul(Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(2)), Pow(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q)))), Integer(-1)))), Mul(Integer(-1), Mul(e, Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(2), a, Pow(e, Integer(2)))), Pow(x, Integer(2)))), Mul(c, d, Pow(e, Integer(2)), Pow(x, Integer(4))), Mul(Integer(-1), Mul(c, Pow(e, Integer(3)), Pow(x, Integer(6))))), x)), x))))))
    rubi.add(rule827)

    pattern828 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(Add(p_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1))))))), (e, c, x, b, p, a, d)))
    rule828 = ReplacementRule(pattern828, lambda e, c, x, b, p, a, d : Add(Mul(a, Int(Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(b, Int(Mul(Pow(x, Integer(2)), Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Integer(2)))), Integer(-1)))), x)), Mul(c, Int(Mul(Pow(x, Integer(4)), Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule828)

    pattern829 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PositiveIntegerQ(Add(p_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1))))))), (e, c, x, p, a, d)))
    rule829 = ReplacementRule(pattern829, lambda e, c, x, p, a, d : Add(Mul(a, Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(4)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(c, Int(Mul(Pow(x, Integer(4)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(4)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Integer(2)))), Integer(-1)))), x))))
    rubi.add(rule829)

    pattern830 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeQ(c_)), (e, c, x, b, a, d)))
    rule830 = ReplacementRule(pattern830, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Integer(2), Sqrt(Mul(Integer(-1), c)), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2))))), Sqrt(Add(Mul(Integer(-1), b), Integer(q), Mul(Integer(-1), Mul(Integer(2), c, Pow(x, Integer(2))))))), Integer(-1))), x))))
    rubi.add(rule830)

    pattern831 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(a_), NegativeQ(c_)), (e, c, x, a, d)))
    rule831 = ReplacementRule(pattern831, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Mul(Sqrt(Mul(Integer(-1), c)), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(Integer(q), Mul(c, Pow(x, Integer(2))))), Sqrt(Add(Integer(q), Mul(Integer(-1), Mul(c, Pow(x, Integer(2))))))), Integer(-1))), x))))
    rubi.add(rule831)

    pattern832 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(NegativeQ(c_))), (e, c, x, b, a, d)))
    rule832 = ReplacementRule(pattern832, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Integer(2), Mul(c, Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q)))))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(e, Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q)))))), Integer(-1))), Int(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x))))))
    rubi.add(rule832)

    pattern833 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PositiveQ(Mul(Mul(Integer(-1), a_), c_)), Not(NegativeQ(c_))), (e, c, x, a, d)))
    rule833 = ReplacementRule(pattern833, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Add(Mul(Mul(c, Pow(Add(Mul(c, d), Mul(e, Integer(q))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(e, Pow(Add(Mul(c, d), Mul(e, Integer(q))), Integer(-1))), Int(Mul(Add(Integer(q), Mul(Integer(-1), Mul(c, Pow(x, Integer(2))))), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x)))))
    rubi.add(rule833)

    pattern834 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), PosQ(Mul(c_, Pow(a_, Integer(-1))))), (e, c, x, b, a, d)))
    rule834 = ReplacementRule(pattern834, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(4)))), Condition(Add(Mul(ArcTan(Mul(Sqrt(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Mul(d, e), Integer(-1)))), Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))))), Pow(Mul(Integer(2), d, Sqrt(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Mul(d, e), Integer(-1))))), Integer(-1))), Mul(Add(e, Mul(d, Pow(Integer(q), Integer(2)))), Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Pow(Mul(a, Pow(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(2))), Integer(-1)))), Pow(Mul(Integer(4), d, Integer(q), Add(e, Mul(Integer(-1), Mul(d, Pow(Integer(q), Integer(2))))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticPi(Mul(Mul(Integer(-1), Pow(Add(e, Mul(Integer(-1), Mul(d, Pow(Integer(q), Integer(2))))), Integer(2))), Pow(Mul(Integer(4), d, e, Pow(Integer(q), Integer(2))), Integer(-1))), Mul(Integer(2), ArcTan(Mul(Integer(q), x))), Add(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(b, Mul(Pow(Integer(q), Integer(2)), Pow(Mul(Integer(4), c), Integer(-1)))))))), Mul(Integer(-1), Mul(Mul(Pow(Integer(q), Integer(2)), Pow(Add(e, Mul(Integer(-1), Mul(d, Pow(Integer(q), Integer(2))))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)))), NonzeroQ(Add(e, Mul(Integer(-1), Mul(d, Pow(Integer(q), Integer(2)))))))))
    rubi.add(rule834)

    pattern835 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), PosQ(Mul(c_, Pow(a_, Integer(-1))))), (e, c, x, a, d)))
    rule835 = ReplacementRule(pattern835, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(c, Pow(a, Integer(-1))), Integer(4)))), Condition(Add(Mul(ArcTan(Mul(Sqrt(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Mul(d, e), Integer(-1)))), Mul(x, Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))))), Pow(Mul(Integer(2), d, Sqrt(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Mul(d, e), Integer(-1))))), Integer(-1))), Mul(Add(e, Mul(d, Pow(Integer(q), Integer(2)))), Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(a, Mul(c, Pow(x, Integer(4)))), Pow(Mul(a, Pow(Add(Integer(1), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Integer(2))), Integer(-1)))), Pow(Mul(Integer(4), d, Integer(q), Add(e, Mul(Integer(-1), Mul(d, Pow(Integer(q), Integer(2))))), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), EllipticPi(Mul(Mul(Integer(-1), Pow(Add(e, Mul(Integer(-1), Mul(d, Pow(Integer(q), Integer(2))))), Integer(2))), Pow(Mul(Integer(4), d, e, Pow(Integer(q), Integer(2))), Integer(-1))), Mul(Integer(2), ArcTan(Mul(Integer(q), x))), Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Mul(Integer(-1), Mul(Mul(Pow(Integer(q), Integer(2)), Pow(Add(e, Mul(Integer(-1), Mul(d, Pow(Integer(q), Integer(2))))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)))), NonzeroQ(Add(e, Mul(Integer(-1), Mul(d, Pow(Integer(q), Integer(2)))))))))
    rubi.add(rule835)

    pattern836 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NegQ(Mul(c_, Pow(a_, Integer(-1)))), PositiveQ(a_)), (e, c, x, a, d)))
    rule836 = ReplacementRule(pattern836, lambda e, c, x, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), c), Pow(a, Integer(-1))), Integer(4)))), Mul(Mul(Integer(1), Pow(Mul(d, Sqrt(a), Integer(q)), Integer(-1))), EllipticPi(Mul(Mul(Integer(-1), e), Pow(Mul(d, Pow(Integer(q), Integer(2))), Integer(-1))), ArcSin(Mul(Integer(q), x)), Integer(-1)))))
    rubi.add(rule836)

    pattern837 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NegQ(Mul(c_, Pow(a_, Integer(-1)))), Not(PositiveQ(a_))), (e, c, x, a, d)))
    rule837 = ReplacementRule(pattern837, lambda e, c, x, a, d : Mul(Mul(Sqrt(Add(Integer(1), Mul(c, Mul(Pow(x, Integer(4)), Pow(a, Integer(-1)))))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(Integer(1), Mul(c, Mul(Pow(x, Integer(4)), Pow(a, Integer(-1))))))), Integer(-1))), x)))
    rubi.add(rule837)

    pattern838 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegQ(Mul(c_, Pow(a_, Integer(-1))))), (e, c, x, b, a, d)))
    rule838 = ReplacementRule(pattern838, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))), Mul(Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(q)), Integer(-1)))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(q))), Integer(-1)))))), Sqrt(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(q)), Integer(-1))))))), Integer(-1))), x))))
    rubi.add(rule838)

    pattern839 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), NegativeIntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (e, c, x, b, p, a, d)))
    rule839 = ReplacementRule(pattern839, lambda e, c, x, b, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Pow(b, Integer(2)), c, d), Mul(Integer(-1), Mul(Pow(b, Integer(3)), e)), Mul(Integer(-1), Mul(Integer(2), a, Pow(c, Integer(2)), d)), Mul(Integer(3), a, b, c, e), Mul(c, Add(Mul(b, c, d), Mul(Integer(-1), Mul(Pow(b, Integer(2)), e)), Mul(Integer(2), a, c, e)), Pow(x, Integer(2)))), Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, Pow(x, Integer(2)))), Integer(-1))), Simp(Add(Mul(Pow(b, Integer(3)), d, e, Add(Integer(3), Mul(Integer(2), p))), Mul(Integer(-1), Mul(a, b, c, d, e, Add(Integer(11), Mul(Integer(8), p)))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(Mul(Integer(2), a, Pow(e, Integer(2)), Add(p, Integer(1))), Mul(c, Pow(d, Integer(2)), Add(Integer(3), Mul(Integer(2), p)))))), Mul(Integer(2), a, c, Add(Mul(Integer(4), a, Pow(e, Integer(2)), Add(p, Integer(1))), Mul(c, Pow(d, Integer(2)), Add(Integer(5), Mul(Integer(4), p))))), Mul(Integer(-1), Mul(Add(Mul(Integer(4), a, Pow(c, Integer(2)), d, e), Mul(Integer(-1), Mul(Integer(2), Pow(b, Integer(2)), c, d, e, Add(Integer(2), p))), Mul(Integer(-1), Mul(Pow(b, Integer(3)), Pow(e, Integer(2)), Add(Integer(3), Mul(Integer(2), p)))), Mul(b, c, Add(Mul(c, Pow(d, Integer(2)), Add(Integer(7), Mul(Integer(4), p))), Mul(a, Pow(e, Integer(2)), Add(Integer(11), Mul(Integer(8), p)))))), Pow(x, Integer(2)))), Mul(Integer(-1), Mul(c, e, Add(Mul(b, c, d), Mul(Integer(-1), Mul(Pow(b, Integer(2)), e)), Mul(Integer(2), a, c, e)), Add(Integer(7), Mul(Integer(4), p)), Pow(x, Integer(4))))), x)), x)))))
    rubi.add(rule839)

    pattern840 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), NegativeIntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (e, c, x, p, a, d)))
    rule840 = ReplacementRule(pattern840, lambda e, c, x, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Integer(-2), a, Pow(c, Integer(2)), d), Mul(c, Mul(Integer(2), a, c, e), Pow(x, Integer(2)))), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(4)))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, Add(p, Integer(1)), Mul(Integer(-4), a, c), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, Add(p, Integer(1)), Mul(Integer(-4), a, c), Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(4)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, Pow(x, Integer(2)))), Integer(-1))), Simp(Add(Mul(Integer(2), a, c, Add(Mul(Integer(4), a, Pow(e, Integer(2)), Add(p, Integer(1))), Mul(c, Pow(d, Integer(2)), Add(Integer(5), Mul(Integer(4), p))))), Mul(Integer(-1), Mul(Mul(Integer(4), a, Pow(c, Integer(2)), d, e), Pow(x, Integer(2)))), Mul(Integer(-1), Mul(c, e, Mul(Integer(2), a, c, e), Add(Integer(7), Mul(Integer(4), p)), Pow(x, Integer(4))))), x)), x)))))
    rubi.add(rule840)

    pattern841 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, b, a, d)))
    rule841 = ReplacementRule(pattern841, lambda e, c, x, b, a, d : Add(Mul(Pow(e, Integer(2)), x, Mul(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Pow(Mul(Integer(2), d, Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Add(d, Mul(e, Pow(x, Integer(2))))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(c, Pow(Mul(Integer(2), d, Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), Mul(Mul(Add(Mul(Integer(3), c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(Integer(2), b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Mul(Integer(2), d, Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x))))
    rubi.add(rule841)

    pattern842 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-2)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2)))))), (e, c, x, a, d)))
    rule842 = ReplacementRule(pattern842, lambda e, c, x, a, d : Add(Mul(Pow(e, Integer(2)), x, Mul(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Pow(Mul(Integer(2), d, Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Add(d, Mul(e, Pow(x, Integer(2))))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(c, Pow(Mul(Integer(2), d, Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), Mul(Mul(Add(Mul(Integer(3), c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Mul(Integer(2), d, Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2))))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x))))
    rubi.add(rule842)

    pattern843 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(Add(p_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), NegativeIntegerQ(q_)), (e, q, c, x, b, p, a, d)))
    rule843 = ReplacementRule(pattern843, lambda e, q, c, x, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), FracPart(p)), Pow(Mul(Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(r))), Integer(-1))))), FracPart(p)), Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(r)), Integer(-1))))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, Integer(2)))), q), Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Mul(Integer(-1), Integer(r))), Integer(-1))))), p), Pow(Add(Integer(1), Mul(Integer(2), c, Mul(Pow(x, Integer(2)), Pow(Add(b, Integer(r)), Integer(-1))))), p)), x))))
    rubi.add(rule843)

    pattern844 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(Add(p_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), NegativeIntegerQ(q_)), (e, q, c, x, p, a, d)))
    rule844 = ReplacementRule(pattern844, lambda e, q, c, x, p, a, d : With(List(Set(Integer(r), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(c, Pow(x, Integer(4)))), FracPart(p)), Pow(Mul(Pow(Add(Integer(1), Mul(Integer(-1), Mul(c, Mul(Pow(x, Integer(2)), Pow(Integer(r), Integer(-1)))))), FracPart(p)), Pow(Add(Integer(1), Mul(c, Mul(Pow(x, Integer(2)), Pow(Integer(r), Integer(-1))))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, Integer(2)))), q), Pow(Add(Integer(1), Mul(Integer(-1), Mul(c, Mul(Pow(x, Integer(2)), Pow(Integer(r), Integer(-1)))))), p), Pow(Add(Integer(1), Mul(c, Mul(Pow(x, Integer(2)), Pow(Integer(r), Integer(-1))))), p)), x))))
    rubi.add(rule844)

    pattern845 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(b_, e_)))), PositiveQ(a_), PositiveQ(d_)), (e, c, x, b, a, d)))
    rule845 = ReplacementRule(pattern845, lambda e, c, x, b, a, d : Mul(Mul(Integer(1), Pow(Mul(Integer(2), Sqrt(a), Sqrt(d), Rt(Mul(Mul(Integer(-1), e), Pow(d, Integer(-1))), Integer(2))), Integer(-1))), EllipticF(Mul(Integer(2), ArcSin(Mul(Rt(Mul(Mul(Integer(-1), e), Pow(d, Integer(-1))), Integer(2)), x))), Mul(b, Mul(d, Pow(Mul(Integer(4), a, e), Integer(-1)))))))
    rubi.add(rule845)

    pattern846 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Not(And(PositiveQ(a_), PositiveQ(d_)))), (e, c, x, b, a, d)))
    rule846 = ReplacementRule(pattern846, lambda e, c, x, b, a, d : Mul(Sqrt(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Pow(d, Integer(-1)))), Mul(Sqrt(Mul(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Pow(a, Integer(-1)))), Pow(Mul(Sqrt(Add(d, Mul(e, Pow(x, Integer(2))))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Sqrt(Add(Integer(1), Mul(Mul(e, Pow(d, Integer(-1))), Pow(x, Integer(2))))), Sqrt(Add(Integer(1), Mul(Mul(b, Pow(a, Integer(-1))), Pow(x, Integer(2))), Mul(Mul(c, Pow(a, Integer(-1))), Pow(x, Integer(4)))))), Integer(-1))), x)))
    rubi.add(rule846)

    pattern847 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(b_, e_)))), PositiveQ(a_), PositiveQ(d_)), (e, c, x, b, a, d)))
    rule847 = ReplacementRule(pattern847, lambda e, c, x, b, a, d : Mul(Mul(Sqrt(a), Pow(Mul(Integer(2), Sqrt(d), Rt(Mul(Mul(Integer(-1), e), Pow(d, Integer(-1))), Integer(2))), Integer(-1))), EllipticE(Mul(Integer(2), ArcSin(Mul(Rt(Mul(Mul(Integer(-1), e), Pow(d, Integer(-1))), Integer(2)), x))), Mul(b, Mul(d, Pow(Mul(Integer(4), a, e), Integer(-1)))))))
    rubi.add(rule847)

    pattern848 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(b_, e_)))), Not(And(PositiveQ(a_), PositiveQ(d_)))), (e, c, x, b, a, d)))
    rule848 = ReplacementRule(pattern848, lambda e, c, x, b, a, d : Mul(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Mul(Sqrt(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Pow(d, Integer(-1)))), Pow(Mul(Sqrt(Add(d, Mul(e, Pow(x, Integer(2))))), Sqrt(Mul(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Pow(a, Integer(-1))))), Integer(-1))), Int(Mul(Sqrt(Add(Integer(1), Mul(Mul(b, Pow(a, Integer(-1))), Pow(x, Integer(2))), Mul(Mul(c, Pow(a, Integer(-1))), Pow(x, Integer(4))))), Pow(Sqrt(Add(Integer(1), Mul(Mul(e, Pow(d, Integer(-1))), Pow(x, Integer(2))))), Integer(-1))), x)))
    rubi.add(rule848)

    pattern849 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Or(And(IntegersQ(p_, q_), Not(IntegerQ(n_))), PositiveIntegerQ(p_), And(PositiveIntegerQ(q_), Not(IntegerQ(n_))))), (e, n, q, c, x, n2, b, p, a, d)))
    rule849 = ReplacementRule(pattern849, lambda e, n, q, c, x, n2, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule849)

    pattern850 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Or(And(IntegersQ(p_, q_), Not(IntegerQ(n_))), PositiveIntegerQ(p_), And(PositiveIntegerQ(q_), Not(IntegerQ(n_))))), (e, n, q, c, x, n2, p, a, d)))
    rule850 = ReplacementRule(pattern850, lambda e, n, q, c, x, n2, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule850)

    pattern851 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), NegativeIntegerQ(q_), Not(IntegersQ(n_, Mul(Integer(2), p_)))), (e, n, q, c, x, n2, p, a, d)))
    rule851 = ReplacementRule(pattern851, lambda e, n, q, c, x, n2, p, a, d : Int(ExpandIntegrand(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Add(Mul(d, Pow(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Mul(Integer(2), n))))), Integer(-1))), Mul(Integer(-1), Mul(e, Mul(Pow(x, n), Pow(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Mul(Integer(2), n))))), Integer(-1)))))), Mul(Integer(-1), q)), x), x))
    rubi.add(rule851)

    pattern852 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), cons((Mul(Pow(Add(d_, Mul(e_, Pow(x_, n_))), q_), Pow(Add(a_, Mul(b_, Pow(x_, n_)), Mul(c_, Pow(x_, Mul(Integer(2), n_)))), p_)), x_), (e, n, q, c, x, n2, b, p, a, d)))
    rule852 = ReplacementRule(pattern852, lambda e, n, q, c, x, n2, b, p, a, d : Defer(Integer(Int)))
    rubi.add(rule852)

    pattern853 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), cons((Mul(Pow(Add(d_, Mul(e_, Pow(x_, n_))), q_), Pow(Add(a_, Mul(c_, Pow(x_, Mul(Integer(2), n_)))), p_)), x_), (e, n, q, c, x, n2, p, a, d)))
    rule853 = ReplacementRule(pattern853, lambda e, n, q, c, x, n2, p, a, d : Defer(Integer(Int)))
    rubi.add(rule853)

    pattern854 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(u_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(u_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, n, q, c, x, u, n2, b, p, a, d)))
    rule854 = ReplacementRule(pattern854, lambda e, n, q, c, x, u, n2, b, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x, u)))
    rubi.add(rule854)

    pattern855 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(u_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(u_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (e, n, q, c, x, u, n2, p, a, d)))
    rule855 = ReplacementRule(pattern855, lambda e, n, q, c, x, u, n2, p, a, d : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x, u)))
    rubi.add(rule855)

    pattern856 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), EqQ(mn_, Mul(Integer(-1), n_)), IntegerQ(q_)), (e, n, q, c, x, n2, b, p, a, d, mn)))
    rule856 = ReplacementRule(pattern856, lambda e, n, q, c, x, n2, b, p, a, d, mn : Int(Mul(Pow(x, Mul(Mul(Integer(-1), n), q)), Pow(Add(e, Mul(d, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule856)

    pattern857 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(mn, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(-2), mn_)), IntegerQ(q_)), (e, q, c, x, n2, p, a, d, mn)))
    rule857 = ReplacementRule(pattern857, lambda e, q, c, x, n2, p, a, d, mn : Int(Mul(Pow(x, Mul(mn, q)), Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), mn)))), q), Pow(Add(a, Mul(c, Pow(x, n2))), p)), x))
    rubi.add(rule857)

    pattern858 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), EqQ(mn_, Mul(Integer(-1), n_)), Not(IntegerQ(q_)), IntegerQ(p_)), (e, n, q, c, x, n2, b, p, a, d, mn)))
    rule858 = ReplacementRule(pattern858, lambda e, n, q, c, x, n2, b, p, a, d, mn : Int(Mul(Pow(x, Mul(Integer(2), n, p)), Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), q), Pow(Add(c, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(a, Pow(x, Mul(Integer(-2), n)))), p)), x))
    rubi.add(rule858)

    pattern859 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(mn, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(-2), mn_)), Not(IntegerQ(q_)), IntegerQ(p_)), (e, q, c, x, n2, p, a, d, mn)))
    rule859 = ReplacementRule(pattern859, lambda e, q, c, x, n2, p, a, d, mn : Int(Mul(Pow(x, Mul(Integer(-2), mn, p)), Pow(Add(d, Mul(e, Pow(x, mn))), q), Pow(Add(c, Mul(a, Pow(x, Mul(Integer(2), mn)))), p)), x))
    rubi.add(rule859)

    pattern860 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), EqQ(mn_, Mul(Integer(-1), n_)), Not(IntegerQ(q_)), Not(IntegerQ(p_)), PosQ(n_)), (e, n, q, c, x, n2, b, p, a, d, mn)))
    rule860 = ReplacementRule(pattern860, lambda e, n, q, c, x, n2, b, p, a, d, mn : Mul(Pow(x, Mul(n, FracPart(q))), Mul(Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), FracPart(q)), Pow(Pow(Add(e, Mul(d, Pow(x, n))), FracPart(q)), Integer(-1))), Int(Mul(Pow(x, Mul(Mul(Integer(-1), n), q)), Pow(Add(e, Mul(d, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule860)

    pattern861 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(mn, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(-2), mn_)), Not(IntegerQ(q_)), Not(IntegerQ(p_)), PosQ(n2_)), (e, q, c, x, n2, p, a, d, mn)))
    rule861 = ReplacementRule(pattern861, lambda e, q, c, x, n2, p, a, d, mn : Mul(Pow(x, Mul(Mul(Integer(-1), mn), FracPart(q))), Mul(Pow(Add(d, Mul(e, Pow(x, mn))), FracPart(q)), Pow(Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), mn)))), FracPart(q)), Integer(-1))), Int(Mul(Pow(x, Mul(mn, q)), Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), mn)))), q), Pow(Add(a, Mul(c, Pow(x, n2))), p)), x)))
    rubi.add(rule861)

    pattern862 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), EqQ(mn_, Mul(Integer(-1), n_)), Not(IntegerQ(q_)), Not(IntegerQ(p_)), NegQ(n_)), (e, n, q, c, x, n2, b, p, a, d, mn)))
    rule862 = ReplacementRule(pattern862, lambda e, n, q, c, x, n2, b, p, a, d, mn : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(x, Mul(Integer(2), n, FracPart(p))), Pow(Add(c, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(a, Pow(x, Mul(Integer(-2), n)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(x, Mul(Integer(2), n, p)), Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), q), Pow(Add(c, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(a, Pow(x, Mul(Integer(-2), n)))), p)), x)))
    rubi.add(rule862)

    pattern863 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(mn, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(-2), mn_)), Not(IntegerQ(q_)), Not(IntegerQ(p_)), NegQ(n2_)), (e, q, c, x, n2, p, a, d, mn)))
    rule863 = ReplacementRule(pattern863, lambda e, q, c, x, n2, p, a, d, mn : Mul(Mul(Pow(Add(a, Mul(c, Pow(x, n2))), FracPart(p)), Pow(Mul(Pow(x, Mul(n2, FracPart(p))), Pow(Add(c, Mul(a, Pow(x, Mul(Integer(2), mn)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(x, Mul(n2, p)), Pow(Add(d, Mul(e, Pow(x, mn))), q), Pow(Add(c, Mul(a, Pow(x, Mul(Integer(2), mn)))), p)), x)))
    rubi.add(rule863)

    pattern864 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_)), IntegerQ(p_)), (e, n, q, c, x, b, p, a, d, mn)))
    rule864 = ReplacementRule(pattern864, lambda e, n, q, c, x, b, p, a, d, mn : Int(Mul(Pow(x, Mul(Mul(Integer(-1), n), p)), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule864)

    pattern865 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_)), Not(IntegerQ(p_))), (e, n, q, c, x, b, p, a, d, mn)))
    rule865 = ReplacementRule(pattern865, lambda e, n, q, c, x, b, p, a, d, mn : Mul(Pow(x, Mul(n, FracPart(p))), Mul(Pow(Add(a, Mul(b, Pow(Pow(x, n), Integer(-1))), Mul(c, Pow(x, n))), FracPart(p)), Pow(Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Integer(-1))), Int(Mul(Pow(x, Mul(Mul(Integer(-1), n), p)), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule865)

    pattern866 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, n_))), Wildcard.optional('r', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_))), (e, n, q, c, g, x, f, n2, b, p, a, d, r)))
    rule866 = ReplacementRule(pattern866, lambda e, n, q, c, g, x, f, n2, b, p, a, d, r : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(f, Mul(g, Pow(x, n))), r), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), p))), x)))
    rubi.add(rule866)

    pattern867 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, n_))), Wildcard.optional('r', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(p_)), (e, n, q, c, g, x, f, n2, b, p, a, d, r)))
    rule867 = ReplacementRule(pattern867, lambda e, n, q, c, g, x, f, n2, b, p, a, d, r : Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(p, q)), Pow(Add(f, Mul(g, Pow(x, n))), r), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x))
    rubi.add(rule867)

    pattern868 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, n_))), Wildcard.optional('r', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(p_)), (e, n, q, c, g, x, f, n2, p, a, d, r)))
    rule868 = ReplacementRule(pattern868, lambda e, n, q, c, g, x, f, n2, p, a, d, r : Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(p, q)), Pow(Add(f, Mul(g, Pow(x, n))), r), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x))
    rubi.add(rule868)

    pattern869 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, n_))), Wildcard.optional('r', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (e, n, q, c, g, x, f, n2, b, p, a, d, r)))
    rule869 = ReplacementRule(pattern869, lambda e, n, q, c, g, x, f, n2, b, p, a, d, r : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, Pow(x, n))), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(x, n)), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(p, q)), Pow(Add(f, Mul(g, Pow(x, n))), r), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x)))
    rubi.add(rule869)

    pattern870 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(f_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, n_))), Wildcard.optional('r', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (e, n, q, c, g, x, f, n2, p, a, d, r)))
    rule870 = ReplacementRule(pattern870, lambda e, n, q, c, g, x, f, n2, p, a, d, r : Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, Pow(x, n))), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(x, n)), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(p, q)), Pow(Add(f, Mul(g, Pow(x, n))), r), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x)))
    rubi.add(rule870)

    pattern871 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(Wildcard.optional('f', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(PositiveQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(NegativeQ(c_))), (e, f, c, g, x, b, a, d)))
    rule871 = ReplacementRule(pattern871, lambda e, f, c, g, x, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Condition(Add(Mul(Mul(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(g, Add(b, Mul(Integer(-1), Integer(q)))))), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q)))))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(e, Add(b, Mul(Integer(-1), Integer(q)))))), Integer(-1))), Int(Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x)))), NonzeroQ(Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(g, Add(b, Mul(Integer(-1), Integer(q))))))))))
    rubi.add(rule871)

    pattern872 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(f_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(PositiveQ(Mul(Mul(Integer(-1), a_), c_)), NonzeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(NegativeQ(c_))), (e, f, c, x, g, a, d)))
    rule872 = ReplacementRule(pattern872, lambda e, f, c, x, g, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Condition(Add(Mul(Mul(Add(Mul(c, f), Mul(g, Integer(q))), Pow(Add(Mul(c, d), Mul(e, Integer(q))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)), Mul(Mul(Add(Mul(e, f), Mul(Integer(-1), Mul(d, g))), Pow(Add(Mul(c, d), Mul(e, Integer(q))), Integer(-1))), Int(Mul(Add(Integer(q), Mul(Integer(-1), Mul(c, Pow(x, Integer(2))))), Pow(Mul(Add(d, Mul(e, Pow(x, Integer(2)))), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x))), NonzeroQ(Add(Mul(c, f), Mul(g, Integer(q)))))))
    rubi.add(rule872)

    pattern873 = Pattern(Int(Mul(Pow(Add(d1_, Mul(Wildcard.optional('e1', Integer(1)), Pow(x_, Wildcard.optional('non2', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(d2_, Mul(Wildcard.optional('e2', Integer(1)), Pow(x_, Wildcard.optional('non2', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d1, x), FreeQ(e1, x), FreeQ(d2, x), FreeQ(e2, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(non2_, Mul(Integer(-1), Mul(n_, Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(Mul(d2_, e1_), Mul(d1_, e2_))), Or(IntegerQ(q_), And(PositiveQ(d1_), PositiveQ(d2_)))), (n, q, c, x, n2, d2, non2, b, p, d1, e1, a, e2)))
    rule873 = ReplacementRule(pattern873, lambda n, q, c, x, n2, d2, non2, b, p, d1, e1, a, e2 : Int(Mul(Pow(Add(Mul(d1, d2), Mul(e1, e2, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule873)

    pattern874 = Pattern(Int(Mul(Pow(Add(d1_, Mul(Wildcard.optional('e1', Integer(1)), Pow(x_, Wildcard.optional('non2', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(d2_, Mul(Wildcard.optional('e2', Integer(1)), Pow(x_, Wildcard.optional('non2', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d1, x), FreeQ(e1, x), FreeQ(d2, x), FreeQ(e2, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(non2_, Mul(Integer(-1), Mul(n_, Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(Mul(d2_, e1_), Mul(d1_, e2_)))), (n, q, c, x, n2, d2, non2, b, p, d1, e1, a, e2)))
    rule874 = ReplacementRule(pattern874, lambda n, q, c, x, n2, d2, non2, b, p, d1, e1, a, e2 : Mul(Pow(Add(d1, Mul(e1, Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), FracPart(q)), Mul(Pow(Add(d2, Mul(e2, Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), FracPart(q)), Pow(Pow(Add(Mul(d1, d2), Mul(e1, e2, Pow(x, n))), FracPart(q)), Integer(-1))), Int(Mul(Pow(Add(Mul(d1, d2), Mul(e1, e2, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule874)

    pattern875 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('m', Integer(1))))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(B, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(m_, Mul(Integer(-1), n_), Integer(1)))), (e, n, q, c, x, A, m, n2, b, p, B, d, a)))
    rule875 = ReplacementRule(pattern875, lambda e, n, q, c, x, A, m, n2, b, p, B, d, a : Add(Mul(A, Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)), Mul(B, Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))))
    rubi.add(rule875)

    pattern876 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('m', Integer(1))))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(B, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(m_, Mul(Integer(-1), n_), Integer(1)))), (e, n, q, c, x, A, m, n2, p, B, d, a)))
    rule876 = ReplacementRule(pattern876, lambda e, n, q, c, x, A, m, n2, p, B, d, a : Add(Mul(A, Int(Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)), Mul(B, Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))))
    rubi.add(rule876)

    pattern877 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Or(IntegerQ(m_), PositiveQ(f_)), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (f, e, n, c, x, q, m, n2, b, p, a)))
    rule877 = ReplacementRule(pattern877, lambda f, e, n, c, x, q, m, n2, b, p, a : Mul(Mul(Pow(f, m), Pow(Mul(n, Pow(e, Add(Mul(Add(m, Integer(1)), Pow(n, Integer(-1))), Integer(-1)))), Integer(-1))), Subst(Int(Mul(Pow(Mul(e, x), Add(q, Mul(Add(m, Integer(1)), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule877)

    pattern878 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Or(IntegerQ(m_), PositiveQ(f_)), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (f, e, n, c, x, q, m, n2, p, a)))
    rule878 = ReplacementRule(pattern878, lambda f, e, n, c, x, q, m, n2, p, a : Mul(Mul(Pow(f, m), Pow(Mul(n, Pow(e, Add(Mul(Add(m, Integer(1)), Pow(n, Integer(-1))), Integer(-1)))), Integer(-1))), Subst(Int(Mul(Pow(Mul(e, x), Add(q, Mul(Add(m, Integer(1)), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule878)

    pattern879 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Or(IntegerQ(m_), PositiveQ(f_)), Not(IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))))), (f, e, n, c, x, q, m, n2, b, p, a)))
    rule879 = ReplacementRule(pattern879, lambda f, e, n, c, x, q, m, n2, b, p, a : Mul(Pow(f, m), Pow(e, IntPart(q)), Mul(Pow(Mul(e, Pow(x, n)), FracPart(q)), Pow(Pow(x, Mul(n, FracPart(q))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(n, q))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule879)

    pattern880 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Or(IntegerQ(m_), PositiveQ(f_)), Not(IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))))), (f, e, n, c, x, q, m, n2, p, a)))
    rule880 = ReplacementRule(pattern880, lambda f, e, n, c, x, q, m, n2, p, a : Mul(Pow(f, m), Pow(e, IntPart(q)), Mul(Pow(Mul(e, Pow(x, n)), FracPart(q)), Pow(Pow(x, Mul(n, FracPart(q))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(n, q))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule880)

    pattern881 = Pattern(Int(Mul(Pow(Mul(f_, x_), Wildcard.optional('m', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Not(IntegerQ(m_))), (e, f, n, c, x, q, m, n2, b, p, a)))
    rule881 = ReplacementRule(pattern881, lambda e, f, n, c, x, q, m, n2, b, p, a : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Mul(e, Pow(x, n)), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule881)

    pattern882 = Pattern(Int(Mul(Pow(Mul(f_, x_), Wildcard.optional('m', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Not(IntegerQ(m_))), (e, f, n, c, x, q, m, n2, p, a)))
    rule882 = ReplacementRule(pattern882, lambda e, f, n, c, x, q, m, n2, p, a : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Mul(e, Pow(x, n)), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule882)

    pattern883 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Simplify(Add(m_, Mul(Integer(-1), n_), Integer(1))))), (e, n, q, c, x, m, n2, b, p, a, d)))
    rule883 = ReplacementRule(pattern883, lambda e, n, q, c, x, m, n2, b, p, a, d : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, x)), q), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule883)

    pattern884 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Simplify(Add(m_, Mul(Integer(-1), n_), Integer(1))))), (e, n, q, c, x, m, n2, p, a, d)))
    rule884 = ReplacementRule(pattern884, lambda e, n, q, c, x, m, n2, p, a, d : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, x)), q), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule884)

    pattern885 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegersQ(p_, q_), NegQ(n_)), (e, n, q, c, x, m, n2, b, p, a, d)))
    rule885 = ReplacementRule(pattern885, lambda e, n, q, c, x, m, n2, b, p, a, d : Int(Mul(Pow(x, Add(m, Mul(n, Add(Mul(Integer(2), p), q)))), Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), n)))), q), Pow(Add(c, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(a, Pow(x, Mul(Integer(-2), n)))), p)), x))
    rubi.add(rule885)

    pattern886 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegersQ(p_, q_), NegQ(n_)), (e, n, q, c, x, m, n2, p, a, d)))
    rule886 = ReplacementRule(pattern886, lambda e, n, q, c, x, m, n2, p, a, d : Int(Mul(Pow(x, Add(m, Mul(n, Add(Mul(Integer(2), p), q)))), Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), n)))), q), Pow(Add(c, Mul(a, Pow(x, Mul(Integer(-2), n)))), p)), x))
    rubi.add(rule886)

    pattern887 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_)), PositiveIntegerQ(m_, n_, Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))), (e, n, q, c, x, m, n2, b, p, a, d)))
    rule887 = ReplacementRule(pattern887, lambda e, n, q, c, x, m, n2, b, p, a, d : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, Integer(1)), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(d, Mul(e, x)), q), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule887)

    pattern888 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(p_))), (f, e, q, c, x, n, m, n2, b, p, a, d)))
    rule888 = ReplacementRule(pattern888, lambda f, e, q, c, x, n, m, n2, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(c, IntPart(p)), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Mul(Integer(2), p))), x)))
    rubi.add(rule888)

    pattern889 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (e, n, q, c, x, m, n2, b, p, a, d)))
    rule889 = ReplacementRule(pattern889, lambda e, n, q, c, x, m, n2, b, p, a, d : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), Pow(Add(d, Mul(e, x)), q), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule889)

    pattern890 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (e, n, q, c, x, m, n2, p, a, d)))
    rule890 = ReplacementRule(pattern890, lambda e, n, q, c, x, m, n2, p, a, d : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), Pow(Add(d, Mul(e, x)), q), Pow(Add(a, Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule890)

    pattern891 = Pattern(Int(Mul(Pow(Mul(f_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (e, f, q, c, x, n, m, n2, b, p, a, d)))
    rule891 = ReplacementRule(pattern891, lambda e, f, q, c, x, n, m, n2, b, p, a, d : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule891)

    pattern892 = Pattern(Int(Mul(Pow(Mul(f_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (e, f, q, c, x, n, m, n2, p, a, d)))
    rule892 = ReplacementRule(pattern892, lambda e, f, q, c, x, n, m, n2, p, a, d : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule892)

    pattern893 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(p_)), (f, e, q, c, x, n, m, n2, b, p, a, d)))
    rule893 = ReplacementRule(pattern893, lambda f, e, q, c, x, n, m, n2, b, p, a, d : Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x))
    rubi.add(rule893)

    pattern894 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), IntegerQ(p_)), (f, e, q, c, x, n, m, n2, p, a, d)))
    rule894 = ReplacementRule(pattern894, lambda f, e, q, c, x, n, m, n2, p, a, d : Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x))
    rubi.add(rule894)

    pattern895 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(b_, d_, e_)), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (f, e, n, c, x, q, m, n2, b, p, a, d)))
    rule895 = ReplacementRule(pattern895, lambda f, e, n, c, x, q, m, n2, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, Pow(x, n))), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(x, n)), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x)))
    rubi.add(rule895)

    pattern896 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(a_, Pow(e_, Integer(2))))), Not(IntegerQ(p_))), (f, e, n, c, x, q, m, n2, p, a, d)))
    rule896 = ReplacementRule(pattern896, lambda f, e, n, c, x, q, m, n2, p, a, d : Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Add(d, Mul(e, Pow(x, n))), FracPart(p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(x, n)), Pow(e, Integer(-1)))), FracPart(p))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, p)), Pow(Add(Mul(a, Pow(d, Integer(-1))), Mul(Mul(c, Pow(e, Integer(-1))), Pow(x, n))), p)), x)))
    rubi.add(rule896)

    pattern897 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_, p_), IntegersQ(m_, q_), Less(q_, Integer(-1)), Greater(m_, Integer(0))), (e, n, q, c, x, m, n2, b, p, a, d)))
    rule897 = ReplacementRule(pattern897, lambda e, n, q, c, x, m, n2, b, p, a, d : Add(Mul(Pow(Mul(Integer(-1), d), Add(Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), p), Pow(x, Add(Mod(m, n), Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(n, Pow(e, Add(Mul(Integer(2), p), Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))))), Add(q, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(n, Pow(e, Add(Mul(Integer(2), p), Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))))), Add(q, Integer(1))), Integer(-1))), Int(Mul(Pow(x, Mod(m, n)), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), ExpandToSum(Together(Mul(Mul(Integer(1), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1))), Add(Mul(n, Pow(e, Add(Mul(Integer(2), p), Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))))), Add(q, Integer(1)), Pow(x, Add(m, Mul(Integer(-1), Mod(m, n)))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), Mul(Integer(-1), Mul(Pow(Mul(Integer(-1), d), Add(Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), p), Add(Mul(d, Add(Mod(m, n), Integer(1))), Mul(e, Add(Mod(m, n), Mul(n, Add(q, Integer(1))), Integer(1)), Pow(x, n)))))))), x)), x))))
    rubi.add(rule897)

    pattern898 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_, p_), IntegersQ(m_, q_), Less(q_, Integer(-1)), Greater(m_, Integer(0))), (e, n, q, c, x, m, n2, p, a, d)))
    rule898 = ReplacementRule(pattern898, lambda e, n, q, c, x, m, n2, p, a, d : Add(Mul(Pow(Mul(Integer(-1), d), Add(Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), p), Pow(x, Add(Mod(m, n), Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(n, Pow(e, Add(Mul(Integer(2), p), Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))))), Add(q, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(n, Pow(e, Add(Mul(Integer(2), p), Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))))), Add(q, Integer(1))), Integer(-1))), Int(Mul(Pow(x, Mod(m, n)), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), ExpandToSum(Together(Mul(Mul(Integer(1), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1))), Add(Mul(n, Pow(e, Add(Mul(Integer(2), p), Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))))), Add(q, Integer(1)), Pow(x, Add(m, Mul(Integer(-1), Mod(m, n)))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), Mul(Integer(-1), Mul(Pow(Mul(Integer(-1), d), Add(Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), p), Add(Mul(d, Add(Mod(m, n), Integer(1))), Mul(e, Add(Mod(m, n), Mul(n, Add(q, Integer(1))), Integer(1)), Pow(x, n)))))))), x)), x))))
    rubi.add(rule898)

    pattern899 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_, p_), IntegersQ(m_, q_), Less(q_, Integer(-1)), Less(m_, Integer(0))), (e, n, q, c, x, n2, m, b, p, a, d)))
    rule899 = ReplacementRule(pattern899, lambda e, n, q, c, x, n2, m, b, p, a, d : Add(Mul(Pow(Mul(Integer(-1), d), Add(Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), p), Pow(x, Add(Mod(m, n), Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(n, Pow(e, Add(Mul(Integer(2), p), Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))))), Add(q, Integer(1))), Integer(-1)))), Mul(Mul(Pow(Mul(Integer(-1), d), Add(Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))), Integer(-1))), Pow(Mul(n, Pow(e, Mul(Integer(2), p)), Add(q, Integer(1))), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), ExpandToSum(Together(Mul(Mul(Integer(1), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1))), Add(Mul(n, Pow(Mul(Integer(-1), d), Add(Mul(Mul(Integer(-1), Add(m, Mul(Integer(-1), Mod(m, n)))), Pow(n, Integer(-1))), Integer(1))), Pow(e, Mul(Integer(2), p)), Add(q, Integer(1)), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), Mul(Integer(-1), Mul(Mul(Pow(e, Mul(Mul(Integer(-1), Add(m, Mul(Integer(-1), Mod(m, n)))), Pow(n, Integer(-1)))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), p), Pow(x, Mul(Integer(-1), Add(m, Mul(Integer(-1), Mod(m, n)))))), Add(Mul(d, Add(Mod(m, n), Integer(1))), Mul(e, Add(Mod(m, n), Mul(n, Add(q, Integer(1))), Integer(1)), Pow(x, n)))))))), x)), x))))
    rubi.add(rule899)

    pattern900 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_, p_), IntegersQ(m_, q_), Less(q_, Integer(-1)), Less(m_, Integer(0))), (e, n, q, c, x, n2, m, p, a, d)))
    rule900 = ReplacementRule(pattern900, lambda e, n, q, c, x, n2, m, p, a, d : Add(Mul(Pow(Mul(Integer(-1), d), Add(Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), p), Pow(x, Add(Mod(m, n), Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(n, Pow(e, Add(Mul(Integer(2), p), Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))))), Add(q, Integer(1))), Integer(-1)))), Mul(Mul(Pow(Mul(Integer(-1), d), Add(Mul(Add(m, Mul(Integer(-1), Mod(m, n))), Pow(n, Integer(-1))), Integer(-1))), Pow(Mul(n, Pow(e, Mul(Integer(2), p)), Add(q, Integer(1))), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), ExpandToSum(Together(Mul(Mul(Integer(1), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1))), Add(Mul(n, Pow(Mul(Integer(-1), d), Add(Mul(Mul(Integer(-1), Add(m, Mul(Integer(-1), Mod(m, n)))), Pow(n, Integer(-1))), Integer(1))), Pow(e, Mul(Integer(2), p)), Add(q, Integer(1)), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), Mul(Integer(-1), Mul(Mul(Pow(e, Mul(Mul(Integer(-1), Add(m, Mul(Integer(-1), Mod(m, n)))), Pow(n, Integer(-1)))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), p), Pow(x, Mul(Integer(-1), Add(m, Mul(Integer(-1), Mod(m, n)))))), Add(Mul(d, Add(Mod(m, n), Integer(1))), Mul(e, Add(Mod(m, n), Mul(n, Add(q, Integer(1))), Integer(1)), Pow(x, n)))))))), x)), x))))
    rubi.add(rule900)

    pattern901 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_, p_), Greater(Mul(Integer(2), n_, p_), Add(n_, Integer(-1))), Not(IntegerQ(q_)), NonzeroQ(Add(m_, Mul(Integer(2), n_, p_), Mul(n_, q_), Integer(1)))), (f, e, q, c, x, n, m, n2, b, p, a, d)))
    rule901 = ReplacementRule(pattern901, lambda f, e, q, c, x, n, m, n2, b, p, a, d : Add(Mul(Pow(c, p), Pow(Mul(f, x), Add(m, Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(e, Pow(f, Add(Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1))), Add(m, Mul(Integer(2), n, p), Mul(n, q), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(e, Add(m, Mul(Integer(2), n, p), Mul(n, q), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q), ExpandToSum(Add(Mul(e, Add(m, Mul(Integer(2), n, p), Mul(n, q), Integer(1)), Add(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Integer(-1), Mul(Pow(c, p), Pow(x, Mul(Integer(2), n, p)))))), Mul(Integer(-1), Mul(d, Pow(c, p), Add(m, Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1)), Pow(x, Add(Mul(Integer(2), n, p), Mul(Integer(-1), n)))))), x)), x))))
    rubi.add(rule901)

    pattern902 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_, p_), Greater(Mul(Integer(2), n_, p_), Add(n_, Integer(-1))), Not(IntegerQ(q_)), NonzeroQ(Add(m_, Mul(Integer(2), n_, p_), Mul(n_, q_), Integer(1)))), (f, e, q, c, x, n, m, n2, p, a, d)))
    rule902 = ReplacementRule(pattern902, lambda f, e, q, c, x, n, m, n2, p, a, d : Add(Mul(Pow(c, p), Pow(Mul(f, x), Add(m, Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Pow(Mul(e, Pow(f, Add(Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1))), Add(m, Mul(Integer(2), n, p), Mul(n, q), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(e, Add(m, Mul(Integer(2), n, p), Mul(n, q), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q), ExpandToSum(Add(Mul(e, Add(m, Mul(Integer(2), n, p), Mul(n, q), Integer(1)), Add(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Integer(-1), Mul(Pow(c, p), Pow(x, Mul(Integer(2), n, p)))))), Mul(Integer(-1), Mul(d, Pow(c, p), Add(m, Mul(Integer(2), n, p), Mul(Integer(-1), n), Integer(1)), Pow(x, Add(Mul(Integer(2), n, p), Mul(Integer(-1), n)))))), x)), x))))
    rubi.add(rule902)

    pattern903 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_, p_)), (f, e, q, c, x, n, m, n2, b, p, a, d)))
    rule903 = ReplacementRule(pattern903, lambda f, e, q, c, x, n, m, n2, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule903)

    pattern904 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_, p_)), (f, e, q, c, x, n, m, n2, p, a, d)))
    rule904 = ReplacementRule(pattern904, lambda f, e, q, c, x, n, m, n2, p, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule904)

    pattern905 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), IntegerQ(m_)), (e, n, q, c, x, m, n2, b, p, a, d)))
    rule905 = ReplacementRule(pattern905, lambda e, n, q, c, x, m, n2, b, p, a, d : With(List(Set(Integer(k), GCD(Add(m, Integer(1)), n))), Condition(Mul(Mul(Integer(1), Pow(Integer(k), Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, Integer(1)), Pow(Integer(k), Integer(-1))), Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Mul(n, Pow(Integer(k), Integer(-1)))))), q), Pow(Add(a, Mul(b, Pow(x, Mul(n, Pow(Integer(k), Integer(-1))))), Mul(c, Pow(x, Mul(Integer(2), Mul(n, Pow(Integer(k), Integer(-1))))))), p)), x), x, Pow(x, Integer(k)))), Unequal(Integer(k), Integer(1)))))
    rubi.add(rule905)

    pattern906 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), IntegerQ(m_)), (e, n, q, c, x, m, n2, p, a, d)))
    rule906 = ReplacementRule(pattern906, lambda e, n, q, c, x, m, n2, p, a, d : With(List(Set(Integer(k), GCD(Add(m, Integer(1)), n))), Condition(Mul(Mul(Integer(1), Pow(Integer(k), Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, Integer(1)), Pow(Integer(k), Integer(-1))), Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Mul(n, Pow(Integer(k), Integer(-1)))))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), Mul(n, Pow(Integer(k), Integer(-1))))))), p)), x), x, Pow(x, Integer(k)))), Unequal(Integer(k), Integer(1)))))
    rubi.add(rule906)

    pattern907 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), FractionQ(m_), IntegerQ(p_)), (f, e, q, c, x, n, n2, m, b, p, a, d)))
    rule907 = ReplacementRule(pattern907, lambda f, e, q, c, x, n, n2, m, b, p, a, d : With(List(Set(Integer(k), Denominator(m))), Mul(Mul(Integer(k), Pow(f, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(k), Add(m, Integer(1))), Integer(-1))), Pow(Add(d, Mul(e, Mul(Pow(x, Mul(Integer(k), n)), Pow(Pow(f, n), Integer(-1))))), q), Pow(Add(a, Mul(b, Mul(Pow(x, Mul(Integer(k), n)), Pow(Pow(f, n), Integer(-1)))), Mul(c, Mul(Pow(x, Mul(Integer(2), Integer(k), n)), Pow(Pow(f, Mul(Integer(2), n)), Integer(-1))))), p)), x), x, Pow(Mul(f, x), Mul(Integer(1), Pow(Integer(k), Integer(-1))))))))
    rubi.add(rule907)

    pattern908 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), FractionQ(m_), IntegerQ(p_)), (f, e, q, c, x, n, n2, m, p, a, d)))
    rule908 = ReplacementRule(pattern908, lambda f, e, q, c, x, n, n2, m, p, a, d : With(List(Set(Integer(k), Denominator(m))), Mul(Mul(Integer(k), Pow(f, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(k), Add(m, Integer(1))), Integer(-1))), Pow(Add(d, Mul(e, Mul(Pow(x, Mul(Integer(k), n)), Pow(f, Integer(-1))))), q), Pow(Add(a, Mul(c, Mul(Pow(x, Mul(Integer(2), Integer(k), n)), Pow(f, Integer(-1))))), p)), x), x, Pow(Mul(f, x), Mul(Integer(1), Pow(Integer(k), Integer(-1))))))))
    rubi.add(rule908)

    pattern909 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Integer(-1)), Unequal(Add(m_, Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1)), Integer(0)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, b, p, a, d)))
    rule909 = ReplacementRule(pattern909, lambda f, e, n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(Mul(f, x), Add(m, Integer(1))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Add(Mul(d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(e, Add(m, Integer(1)), Pow(x, n))), Pow(Mul(f, Add(m, Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(n, Mul(p, Pow(Mul(Pow(f, n), Add(m, Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Simp(Add(Mul(Integer(2), a, e, Add(m, Integer(1))), Mul(Integer(-1), Mul(b, d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1)))), Mul(Add(Mul(b, e, Add(m, Integer(1))), Mul(Integer(-1), Mul(Integer(2), c, d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))))), Pow(x, n))), x)), x))))
    rubi.add(rule909)

    pattern910 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Integer(-1)), Unequal(Add(m_, Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1)), Integer(0)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, p, a, d)))
    rule910 = ReplacementRule(pattern910, lambda f, e, n, c, x, m, n2, p, a, d : Add(Mul(Pow(Mul(f, x), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Add(Mul(d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(e, Add(m, Integer(1)), Pow(x, n))), Pow(Mul(f, Add(m, Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Integer(2), n, Mul(p, Pow(Mul(Pow(f, n), Add(m, Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, n)), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Add(Mul(a, e, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Pow(x, n))))), x))))
    rubi.add(rule910)

    pattern911 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(Mul(Integer(2), n_, p_), m_, Integer(1))), NonzeroQ(Add(m_, Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, b, p, a, d)))
    rule911 = ReplacementRule(pattern911, lambda f, e, n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(Mul(f, x), Add(m, Integer(1))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Add(Mul(b, e, n, p), Mul(c, d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(c, e, Add(Mul(Integer(2), n, p), m, Integer(1)), Pow(x, n))), Pow(Mul(c, f, Add(Mul(Integer(2), n, p), m, Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(n, Mul(p, Pow(Mul(c, Add(Mul(Integer(2), n, p), m, Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Simp(Add(Mul(Integer(2), a, c, d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(Integer(-1), Mul(a, b, e, Add(m, Integer(1)))), Mul(Add(Mul(Integer(2), a, c, e, Add(Mul(Integer(2), n, p), m, Integer(1))), Mul(b, c, d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), e, Add(m, Mul(n, p), Integer(1))))), Pow(x, n))), x)), x))))
    rubi.add(rule911)

    pattern912 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(Mul(Integer(2), n_, p_), m_, Integer(1))), NonzeroQ(Add(m_, Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, p, a, d)))
    rule912 = ReplacementRule(pattern912, lambda f, e, n, c, x, m, n2, p, a, d : Add(Mul(Pow(Mul(f, x), Add(m, Integer(1))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Add(Mul(c, d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(c, e, Add(Mul(Integer(2), n, p), m, Integer(1)), Pow(x, n))), Pow(Mul(c, f, Add(Mul(Integer(2), n, p), m, Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Integer(2), a, n, Mul(p, Pow(Mul(Add(Mul(Integer(2), n, p), m, Integer(1)), Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Simp(Add(Mul(d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(e, Add(Mul(Integer(2), n, p), m, Integer(1)), Pow(x, n))), x)), x))))
    rubi.add(rule912)

    pattern913 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Add(n_, Integer(-1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, b, p, a, d)))
    rule913 = ReplacementRule(pattern913, lambda f, e, n, c, x, m, n2, b, p, a, d : Add(Mul(Pow(f, Add(n, Integer(-1))), Pow(Mul(f, x), Add(m, Mul(Integer(-1), n), Integer(1))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e)), Mul(Integer(-1), Mul(Add(Mul(b, e), Mul(Integer(-1), Mul(Integer(2), c, d))), Pow(x, n)))), Pow(Mul(n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Pow(f, n), Pow(Mul(n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(Add(n, Mul(Integer(-1), m), Integer(-1)), Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e)))), Mul(Add(Mul(Integer(2), n, p), Mul(Integer(2), n), m, Integer(1)), Add(Mul(b, e), Mul(Integer(-1), Mul(Integer(2), c, d))), Pow(x, n))), x)), x))))
    rubi.add(rule913)

    pattern914 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Add(n_, Integer(-1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, p, a, d)))
    rule914 = ReplacementRule(pattern914, lambda f, e, n, c, x, m, n2, p, a, d : Add(Mul(Pow(f, Add(n, Integer(-1))), Pow(Mul(f, x), Add(m, Mul(Integer(-1), n), Integer(1))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Mul(Add(Mul(a, e), Mul(Integer(-1), Mul(c, d, Pow(x, n)))), Pow(Mul(Integer(2), a, c, n, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Pow(f, n), Pow(Mul(Integer(2), a, c, n, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Add(Mul(a, e, Add(n, Mul(Integer(-1), m), Integer(-1))), Mul(c, d, Add(Mul(Integer(2), n, p), Mul(Integer(2), n), m, Integer(1)), Pow(x, n)))), x))))
    rubi.add(rule914)

    pattern915 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, b, p, a, d)))
    rule915 = ReplacementRule(pattern915, lambda f, e, n, c, x, m, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Mul(f, x), Add(m, Integer(1)))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Mul(Add(Mul(d, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)))), Mul(Integer(-1), Mul(a, b, e)), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e))), c, Pow(x, n))), Pow(Mul(a, f, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(d, Add(Mul(Pow(b, Integer(2)), Add(m, Mul(n, Add(p, Integer(1))), Integer(1))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)))))), Mul(Integer(-1), Mul(a, b, e, Add(m, Integer(1)))), Mul(c, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e))), Pow(x, n))), x)), x))))
    rubi.add(rule915)

    pattern916 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, p, a, d)))
    rule916 = ReplacementRule(pattern916, lambda f, e, n, c, x, m, n2, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Mul(f, x), Add(m, Integer(1)))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Mul(Add(d, Mul(e, Pow(x, n))), Pow(Mul(Integer(2), a, f, n, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, n, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(d, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1))), Mul(e, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Pow(x, n))), x)), x))))
    rubi.add(rule916)

    pattern917 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_), Greater(m_, Add(n_, Integer(-1))), NonzeroQ(Add(m_, Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, b, p, a, d)))
    rule917 = ReplacementRule(pattern917, lambda f, e, n, c, x, m, n2, b, p, a, d : Add(Mul(e, Pow(f, Add(n, Integer(-1))), Pow(Mul(f, x), Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Pow(f, n), Pow(Mul(c, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Simp(Add(Mul(a, e, Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Add(Mul(b, e, Add(m, Mul(n, p), Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))))), Pow(x, n))), x)), x)))))
    rubi.add(rule917)

    pattern918 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(m_), Greater(m_, Add(n_, Integer(-1))), NonzeroQ(Add(m_, Mul(n_, Add(Mul(Integer(2), p_), Integer(1))), Integer(1))), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, p, a, d)))
    rule918 = ReplacementRule(pattern918, lambda f, e, n, c, x, m, n2, p, a, d : Add(Mul(e, Pow(f, Add(n, Integer(-1))), Pow(Mul(f, x), Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Pow(f, n), Pow(Mul(c, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p), Add(Mul(a, e, Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Pow(x, n))))), x)))))
    rubi.add(rule918)

    pattern919 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_), Less(m_, Integer(-1)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, b, p, a, d)))
    rule919 = ReplacementRule(pattern919, lambda f, e, n, c, x, m, n2, b, p, a, d : Add(Mul(d, Pow(Mul(f, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, f, Add(m, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, Pow(f, n), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Simp(Add(Mul(a, e, Add(m, Integer(1))), Mul(Integer(-1), Mul(b, d, Add(m, Mul(n, Add(p, Integer(1))), Integer(1)))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)), Pow(x, n)))), x)), x))))
    rubi.add(rule919)

    pattern920 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(m_), Less(m_, Integer(-1)), Or(IntegerQ(p_), And(IntegerQ(Mul(Integer(2), p_)), IntegerQ(m_), Equal(n_, Integer(2))))), (f, e, n, c, x, m, n2, p, a, d)))
    rule920 = ReplacementRule(pattern920, lambda f, e, n, c, x, m, n2, p, a, d : Add(Mul(d, Pow(Mul(f, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, f, Add(m, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, Pow(f, n), Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, n)), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p), Add(Mul(a, e, Add(m, Integer(1))), Mul(Integer(-1), Mul(c, d, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)), Pow(x, n))))), x))))
    rubi.add(rule920)

    pattern921 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegersQ(m_, Mul(n_, Pow(Integer(2), Integer(-1)))), Less(Integer(0), m_, n_), PosQ(Mul(a_, c_))), (f, e, n, c, x, m, n2, b, a, d)))
    rule921 = ReplacementRule(pattern921, lambda f, e, n, c, x, m, n2, b, a, d : With(List(Set(Integer(q), Rt(Mul(a, c), Integer(2)))), Condition(With(List(Set(Integer(r), Rt(Add(Mul(Integer(2), c, Integer(q)), Mul(Integer(-1), Mul(b, c))), Integer(2)))), Add(Mul(Mul(c, Pow(Mul(Integer(2), Integer(q), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Simp(Add(Mul(d, Integer(r)), Mul(Integer(-1), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))))), x), Pow(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Mul(c, Pow(x, n))), Integer(-1)))), x)), Mul(Mul(c, Pow(Mul(Integer(2), Integer(q), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Simp(Add(Mul(d, Integer(r)), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), x), Pow(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Mul(c, Pow(x, n))), Integer(-1)))), x)))), Not(NegativeQ(Add(Mul(Integer(2), c, Integer(q)), Mul(Integer(-1), Mul(b, c))))))))
    rubi.add(rule921)

    pattern922 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveQ(Mul(a_, c_)), IntegersQ(m_, Mul(n_, Pow(Integer(2), Integer(-1)))), Less(Integer(0), m_, n_)), (f, e, n, c, x, m, n2, a, d)))
    rule922 = ReplacementRule(pattern922, lambda f, e, n, c, x, m, n2, a, d : With(List(Set(Integer(q), Rt(Mul(a, c), Integer(2)))), Condition(With(List(Set(Integer(r), Rt(Mul(Integer(2), c, Integer(q)), Integer(2)))), Add(Mul(Mul(c, Pow(Mul(Integer(2), Integer(q), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Simp(Add(Mul(d, Integer(r)), Mul(Integer(-1), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))))), x), Pow(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Mul(c, Pow(x, n))), Integer(-1)))), x)), Mul(Mul(c, Pow(Mul(Integer(2), Integer(q), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Simp(Add(Mul(d, Integer(r)), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), x), Pow(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Mul(c, Pow(x, n))), Integer(-1)))), x)))), Not(NegativeQ(Mul(Integer(2), c, Integer(q)))))))
    rubi.add(rule922)

    pattern923 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2)))))), PositiveQ(Mul(d_, Pow(e_, Integer(-1)))), PosQ(Mul(Mul(c_, Pow(e_, Integer(-1))), Add(Mul(Integer(2), c_, d_), Mul(Integer(-1), Mul(b_, e_)))))), (f, e, c, x, m, b, a, d)))
    rule923 = ReplacementRule(pattern923, lambda f, e, c, x, m, b, a, d : With(List(Set(Integer(r), Rt(Mul(Mul(c, Pow(e, Integer(-1))), Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e)))), Integer(2)))), Add(Mul(Mul(e, Pow(Integer(2), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(Mul(c, Mul(d, Pow(e, Integer(-1)))), Mul(Integer(-1), Mul(Integer(r), x)), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(e, Pow(Integer(2), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(Mul(c, Mul(d, Pow(e, Integer(-1)))), Mul(Integer(r), x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)))))
    rubi.add(rule923)

    pattern924 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2)))))), PositiveQ(Mul(d_, Pow(e_, Integer(-1))))), (f, e, c, x, m, a, d)))
    rule924 = ReplacementRule(pattern924, lambda f, e, c, x, m, a, d : With(List(Set(Integer(r), Rt(Mul(Integer(2), Pow(c, Integer(2)), Mul(d, Pow(e, Integer(-1)))), Integer(2)))), Add(Mul(Mul(e, Pow(Integer(2), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(Mul(c, Mul(d, Pow(e, Integer(-1)))), Mul(Integer(-1), Mul(Integer(r), x)), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Mul(e, Pow(Integer(2), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(Mul(c, Mul(d, Pow(e, Integer(-1)))), Mul(Integer(r), x), Mul(c, Pow(x, Integer(2)))), Integer(-1))), x)))))
    rubi.add(rule924)

    pattern925 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), Greater(n_, Integer(2)), PosQ(Mul(a_, c_))), (f, e, n, c, x, m, n2, b, a, d)))
    rule925 = ReplacementRule(pattern925, lambda f, e, n, c, x, m, n2, b, a, d : With(List(Set(Integer(q), Rt(Mul(a, c), Integer(2)))), Condition(With(List(Set(Integer(r), Rt(Add(Mul(Integer(2), c, Integer(q)), Mul(Integer(-1), Mul(b, c))), Integer(2)))), Add(Mul(Mul(c, Pow(Mul(Integer(2), Integer(q), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Add(Mul(d, Integer(r)), Mul(Integer(-1), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))))), Pow(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Mul(c, Pow(x, n))), Integer(-1)))), x)), Mul(Mul(c, Pow(Mul(Integer(2), Integer(q), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Add(Mul(d, Integer(r)), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Mul(c, Pow(x, n))), Integer(-1)))), x)))), Not(NegativeQ(Add(Mul(Integer(2), c, Integer(q)), Mul(Integer(-1), Mul(b, c))))))))
    rubi.add(rule925)

    pattern926 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), Greater(n_, Integer(2)), PositiveQ(Mul(a_, c_))), (f, e, n, c, x, m, n2, a, d)))
    rule926 = ReplacementRule(pattern926, lambda f, e, n, c, x, m, n2, a, d : With(List(Set(Integer(q), Rt(Mul(a, c), Integer(2)))), Condition(With(List(Set(Integer(r), Rt(Mul(Integer(2), c, Integer(q)), Integer(2)))), Add(Mul(Mul(c, Pow(Mul(Integer(2), Integer(q), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Add(Mul(d, Integer(r)), Mul(Integer(-1), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))))), Pow(Add(Integer(q), Mul(Integer(-1), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Mul(c, Pow(x, n))), Integer(-1)))), x)), Mul(Mul(c, Pow(Mul(Integer(2), Integer(q), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Add(Mul(d, Integer(r)), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(Integer(q), Mul(Integer(r), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Mul(c, Pow(x, n))), Integer(-1)))), x)))), Not(NegativeQ(Mul(Integer(2), c, Integer(q)))))))
    rubi.add(rule926)

    pattern927 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_)), (f, e, n, c, x, m, n2, b, a, d)))
    rule927 = ReplacementRule(pattern927, lambda f, e, n, c, x, m, n2, b, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), Integer(q)), Integer(-1)))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Integer(q), Pow(Integer(2), Integer(-1)))), Mul(c, Pow(x, n))), Integer(-1))), x)), Mul(Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), c, d), Mul(Integer(-1), Mul(b, e))), Pow(Mul(Integer(2), Integer(q)), Integer(-1))))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(Mul(b, Pow(Integer(2), Integer(-1))), Mul(Integer(q), Pow(Integer(2), Integer(-1))), Mul(c, Pow(x, n))), Integer(-1))), x)))))
    rubi.add(rule927)

    pattern928 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_)), (f, e, n, c, x, m, n2, a, d)))
    rule928 = ReplacementRule(pattern928, lambda f, e, n, c, x, m, n2, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Add(Mul(Mul(Integer(-1), Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(c, Mul(d, Pow(Mul(Integer(2), Integer(q)), Integer(-1)))))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(Integer(q), Mul(Integer(-1), Mul(c, Pow(x, n)))), Integer(-1))), x)), Mul(Add(Mul(e, Pow(Integer(2), Integer(-1))), Mul(Integer(-1), Mul(c, Mul(d, Pow(Mul(Integer(2), Integer(q)), Integer(-1)))))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(Integer(q), Mul(c, Pow(x, n))), Integer(-1))), x)))))
    rubi.add(rule928)

    pattern929 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), IntegerQ(q_), IntegerQ(m_)), (f, e, q, c, x, n, m, n2, b, a, d)))
    rule929 = ReplacementRule(pattern929, lambda f, e, q, c, x, n, m, n2, b, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(f, x), m), Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x), x))
    rubi.add(rule929)

    pattern930 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), IntegerQ(q_), IntegerQ(m_)), (f, e, q, c, x, n, m, n2, a, d)))
    rule930 = ReplacementRule(pattern930, lambda f, e, q, c, x, n, m, n2, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(f, x), m), Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x), x))
    rubi.add(rule930)

    pattern931 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), IntegerQ(q_), Not(IntegerQ(m_))), (f, e, q, c, x, n, m, n2, b, a, d)))
    rule931 = ReplacementRule(pattern931, lambda f, e, q, c, x, n, m, n2, b, a, d : Int(ExpandIntegrand(Pow(Mul(f, x), m), Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule931)

    pattern932 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), IntegerQ(q_), Not(IntegerQ(m_))), (f, e, q, c, x, n, m, n2, a, d)))
    rule932 = ReplacementRule(pattern932, lambda f, e, q, c, x, n, m, n2, a, d : Int(ExpandIntegrand(Pow(Mul(f, x), m), Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule932)

    pattern933 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_, q_), Greater(q_, Integer(0)), Greater(m_, Add(Mul(Integer(2), n_), Integer(-1)))), (f, e, n, c, x, q, m, n2, b, a, d)))
    rule933 = ReplacementRule(pattern933, lambda f, e, n, c, x, q, m, n2, b, a, d : Add(Mul(Mul(Pow(f, Mul(Integer(2), n)), Pow(Pow(c, Integer(2)), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(c, e, Pow(x, n))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Pow(f, Mul(Integer(2), n)), Pow(Pow(c, Integer(2)), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1))), Mul(Simp(Add(Mul(a, Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)))), Mul(Add(Mul(b, c, d), Mul(Integer(-1), Mul(Pow(b, Integer(2)), e)), Mul(a, c, e)), Pow(x, n))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x)))))
    rubi.add(rule933)

    pattern934 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_), Greater(m_, Add(Mul(Integer(2), n_), Integer(-1)))), (f, e, n, c, x, q, m, n2, a, d)))
    rule934 = ReplacementRule(pattern934, lambda f, e, n, c, x, q, m, n2, a, d : Add(Mul(Mul(Pow(f, Mul(Integer(2), n)), Pow(c, Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Pow(Add(d, Mul(e, Pow(x, n))), q)), x)), Mul(Integer(-1), Mul(a, Mul(Pow(f, Mul(Integer(2), n)), Pow(c, Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x)))))
    rubi.add(rule934)

    pattern935 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_, q_), Greater(q_, Integer(0)), Inequality(Add(n_, Integer(-1)), Integer(Less), m_, Integer(LessEqual), Add(Mul(Integer(2), n_), Integer(-1)))), (f, e, n, c, x, q, m, n2, b, a, d)))
    rule935 = ReplacementRule(pattern935, lambda f, e, n, c, x, q, m, n2, b, a, d : Add(Mul(e, Mul(Pow(f, n), Pow(c, Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Pow(f, n), Pow(c, Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1))), Mul(Simp(Add(Mul(a, e), Mul(Integer(-1), Mul(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e))), Pow(x, n)))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x)))))
    rubi.add(rule935)

    pattern936 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_, q_), Greater(q_, Integer(0)), Inequality(Add(n_, Integer(-1)), Integer(Less), m_, Integer(LessEqual), Add(Mul(Integer(2), n_), Integer(-1)))), (f, e, n, c, x, q, m, n2, a, d)))
    rule936 = ReplacementRule(pattern936, lambda f, e, n, c, x, q, m, n2, a, d : Add(Mul(e, Mul(Pow(f, n), Pow(c, Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Pow(f, n), Pow(c, Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1))), Mul(Simp(Add(Mul(a, e), Mul(Integer(-1), Mul(c, d, Pow(x, n)))), x), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x)))))
    rubi.add(rule936)

    pattern937 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_, q_), Greater(q_, Integer(0)), Less(m_, Integer(0))), (f, e, n, c, x, q, n2, m, b, a, d)))
    rule937 = ReplacementRule(pattern937, lambda f, e, n, c, x, q, n2, m, b, a, d : Add(Mul(Mul(d, Pow(a, Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, Pow(f, n)), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, n)), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1))), Mul(Simp(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e)), Mul(c, d, Pow(x, n))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x)))))
    rubi.add(rule937)

    pattern938 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_, q_), Greater(q_, Integer(0)), Less(m_, Integer(0))), (f, e, n, c, x, q, n2, m, a, d)))
    rule938 = ReplacementRule(pattern938, lambda f, e, n, c, x, q, n2, m, a, d : Add(Mul(Mul(d, Pow(a, Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1)))), x)), Mul(Mul(Integer(1), Pow(Mul(a, Pow(f, n)), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, n)), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(-1))), Mul(Simp(Add(Mul(a, e), Mul(Integer(-1), Mul(c, d, Pow(x, n)))), x), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x))))
    rubi.add(rule938)

    pattern939 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_, q_), Less(q_, Integer(-1)), Greater(m_, Add(Mul(Integer(2), n_), Integer(-1)))), (f, e, n, c, x, q, m, n2, b, a, d)))
    rule939 = ReplacementRule(pattern939, lambda f, e, n, c, x, q, m, n2, b, a, d : Add(Mul(Pow(d, Integer(2)), Mul(Pow(f, Mul(Integer(2), n)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Pow(Add(d, Mul(e, Pow(x, n))), q)), x)), Mul(Integer(-1), Mul(Mul(Pow(f, Mul(Integer(2), n)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Mul(Simp(Add(Mul(a, d), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Pow(x, n))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x)))))
    rubi.add(rule939)

    pattern940 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_, q_), Less(q_, Integer(-1)), Greater(m_, Add(Mul(Integer(2), n_), Integer(-1)))), (f, e, n, c, x, q, m, n2, a, d)))
    rule940 = ReplacementRule(pattern940, lambda f, e, n, c, x, q, m, n2, a, d : Add(Mul(Pow(d, Integer(2)), Mul(Pow(f, Mul(Integer(2), n)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Pow(Add(d, Mul(e, Pow(x, n))), q)), x)), Mul(Integer(-1), Mul(a, Mul(Pow(f, Mul(Integer(2), n)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Mul(Add(d, Mul(Integer(-1), Mul(e, Pow(x, n)))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x)))))
    rubi.add(rule940)

    pattern941 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_, q_), Less(q_, Integer(-1)), Inequality(Add(n_, Integer(-1)), Integer(Less), m_, Integer(LessEqual), Add(Mul(Integer(2), n_), Integer(-1)))), (f, e, n, c, x, q, m, n2, b, a, d)))
    rule941 = ReplacementRule(pattern941, lambda f, e, n, c, x, q, m, n2, b, a, d : Add(Mul(Mul(Integer(-1), d), e, Mul(Pow(f, n), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(d, Mul(e, Pow(x, n))), q)), x)), Mul(Mul(Pow(f, n), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Mul(Simp(Add(Mul(a, e), Mul(c, d, Pow(x, n))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x))))
    rubi.add(rule941)

    pattern942 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(m_, q_), Less(q_, Integer(-1)), Inequality(Add(n_, Integer(-1)), Integer(Less), m_, Integer(LessEqual), Add(Mul(Integer(2), n_), Integer(-1)))), (f, e, n, c, x, q, m, n2, a, d)))
    rule942 = ReplacementRule(pattern942, lambda f, e, n, c, x, q, m, n2, a, d : Add(Mul(Mul(Integer(-1), d), e, Mul(Pow(f, n), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(d, Mul(e, Pow(x, n))), q)), x)), Mul(Mul(Pow(f, n), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Mul(Simp(Add(Mul(a, e), Mul(c, d, Pow(x, n))), x), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x))))
    rubi.add(rule942)

    pattern943 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(q_), Less(q_, Integer(-1))), (f, e, n, c, x, q, m, n2, b, a, d)))
    rule943 = ReplacementRule(pattern943, lambda f, e, n, c, x, q, m, n2, b, a, d : Add(Mul(Mul(Pow(e, Integer(2)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q)), x)), Mul(Mul(Integer(1), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Mul(Simp(Add(Mul(c, d), Mul(Integer(-1), Mul(b, e)), Mul(Integer(-1), Mul(c, e, Pow(x, n)))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x))))
    rubi.add(rule943)

    pattern944 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), RationalQ(q_), Less(q_, Integer(-1))), (f, e, n, c, x, q, m, n2, a, d)))
    rule944 = ReplacementRule(pattern944, lambda f, e, n, c, x, q, m, n2, a, d : Add(Mul(Mul(Pow(e, Integer(2)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q)), x)), Mul(Mul(c, Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), Add(q, Integer(1))), Mul(Add(d, Mul(Integer(-1), Mul(e, Pow(x, n)))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x))))
    rubi.add(rule944)

    pattern945 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), IntegerQ(m_)), (f, e, n, c, x, q, m, n2, b, a, d)))
    rule945 = ReplacementRule(pattern945, lambda f, e, n, c, x, q, m, n2, b, a, d : Int(ExpandIntegrand(Pow(Add(d, Mul(e, Pow(x, n))), q), Mul(Pow(Mul(f, x), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule945)

    pattern946 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(q, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), IntegerQ(m_)), (f, e, n, c, x, q, m, n2, a, d)))
    rule946 = ReplacementRule(pattern946, lambda f, e, n, c, x, q, m, n2, a, d : Int(ExpandIntegrand(Pow(Add(d, Mul(e, Pow(x, n))), q), Mul(Pow(Mul(f, x), m), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule946)

    pattern947 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(q, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), Not(IntegerQ(m_))), (f, e, n, c, x, q, m, n2, b, a, d)))
    rule947 = ReplacementRule(pattern947, lambda f, e, n, c, x, q, m, n2, b, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q)), Mul(Integer(1), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule947)

    pattern948 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(q, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), Not(IntegerQ(q_)), Not(IntegerQ(m_))), (f, e, n, c, x, q, m, n2, a, d)))
    rule948 = ReplacementRule(pattern948, lambda f, e, n, c, x, q, m, n2, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q)), Mul(Integer(1), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule948)

    pattern949 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Mul(Integer(-1), n_))), (f, e, n, c, x, n2, m, b, p, a, d)))
    rule949 = ReplacementRule(pattern949, lambda f, e, n, c, x, n2, m, b, p, a, d : Add(Mul(Mul(Integer(1), Pow(Pow(d, Integer(2)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Add(Mul(a, d), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x)), Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Mul(Pow(d, Integer(2)), Pow(f, Mul(Integer(2), n))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(2), n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1)))), x))))
    rubi.add(rule949)

    pattern950 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Mul(Integer(-1), n_))), (f, e, n, c, x, n2, m, p, a, d)))
    rule950 = ReplacementRule(pattern950, lambda f, e, n, c, x, n2, m, p, a, d : Add(Mul(Mul(a, Pow(Pow(d, Integer(2)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Add(d, Mul(Integer(-1), Mul(e, Pow(x, n)))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x)), Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Mul(Pow(d, Integer(2)), Pow(f, Mul(Integer(2), n))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(2), n))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1)))), x))))
    rubi.add(rule950)

    pattern951 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Integer(0))), (f, e, n, c, x, n2, m, b, p, a, d)))
    rule951 = ReplacementRule(pattern951, lambda f, e, n, c, x, n2, m, b, p, a, d : Add(Mul(Mul(Integer(1), Pow(Mul(d, e), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Add(Mul(a, e), Mul(c, d, Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Pow(Mul(d, e, Pow(f, n)), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, n)), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1)))), x)))))
    rubi.add(rule951)

    pattern952 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(m_, Integer(0))), (f, e, n, c, x, n2, m, p, a, d)))
    rule952 = ReplacementRule(pattern952, lambda f, e, n, c, x, n2, m, p, a, d : Add(Mul(Mul(Integer(1), Pow(Mul(d, e), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Add(Mul(a, e), Mul(c, d, Pow(x, n))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Pow(Mul(d, e, Pow(f, n)), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, n)), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(-1))), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1)))), x)))))
    rubi.add(rule952)

    pattern953 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, n_)), (f, e, n, c, x, m, n2, b, p, a, d)))
    rule953 = ReplacementRule(pattern953, lambda f, e, n, c, x, m, n2, b, p, a, d : Add(Mul(Mul(Mul(Integer(-1), Pow(f, Mul(Integer(2), n))), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Add(Mul(a, d), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)), Mul(Pow(d, Integer(2)), Mul(Pow(f, Mul(Integer(2), n)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1)))), x))))
    rubi.add(rule953)

    pattern954 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, n_)), (f, e, n, c, x, m, n2, p, a, d)))
    rule954 = ReplacementRule(pattern954, lambda f, e, n, c, x, m, n2, p, a, d : Add(Mul(Mul(Integer(-1), a), Mul(Pow(f, Mul(Integer(2), n)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Add(d, Mul(Integer(-1), Mul(e, Pow(x, n)))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)), Mul(Pow(d, Integer(2)), Mul(Pow(f, Mul(Integer(2), n)), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), Mul(Integer(2), n)))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1)))), x))))
    rubi.add(rule954)

    pattern955 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(0))), (f, e, n, c, x, m, n2, b, p, a, d)))
    rule955 = ReplacementRule(pattern955, lambda f, e, n, c, x, m, n2, b, p, a, d : Add(Mul(Mul(Pow(f, n), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Add(Mul(a, e), Mul(c, d, Pow(x, n))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)), Mul(Integer(-1), Mul(d, e, Mul(Pow(f, n), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(Integer(-1), Mul(b, d, e)), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1)))), x)))))
    rubi.add(rule955)

    pattern956 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, Integer(-1)), Greater(m_, Integer(0))), (f, e, n, c, x, m, n2, p, a, d)))
    rule956 = ReplacementRule(pattern956, lambda f, e, n, c, x, m, n2, p, a, d : Add(Mul(Mul(Pow(f, n), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Add(Mul(a, e), Mul(c, d, Pow(x, n))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)), Mul(Integer(-1), Mul(d, e, Mul(Pow(f, n), Pow(Add(Mul(c, Pow(d, Integer(2))), Mul(a, Pow(e, Integer(2)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), Add(m, Mul(Integer(-1), n))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Add(d, Mul(e, Pow(x, n))), Integer(-1)))), x)))))
    rubi.add(rule956)

    pattern957 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Or(PositiveIntegerQ(q_), IntegersQ(m_, q_))), (f, e, q, c, x, n, m, n2, b, p, a, d)))
    rule957 = ReplacementRule(pattern957, lambda f, e, q, c, x, n, m, n2, b, p, a, d : Int(ExpandIntegrand(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q)), x), x))
    rubi.add(rule957)

    pattern958 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PositiveIntegerQ(n_), Or(PositiveIntegerQ(q_), IntegersQ(m_, q_))), (f, e, q, c, x, n, m, n2, p, a, d)))
    rule958 = ReplacementRule(pattern958, lambda f, e, q, c, x, n, m, n2, p, a, d : Int(ExpandIntegrand(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p), Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q)), x), x))
    rubi.add(rule958)

    pattern959 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), IntegerQ(m_)), (e, n, q, c, x, m, n2, b, p, a, d)))
    rule959 = ReplacementRule(pattern959, lambda e, n, q, c, x, m, n2, b, p, a, d : Mul(Integer(-1), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), q), Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule959)

    pattern960 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(n_), IntegerQ(m_)), (e, n, q, c, x, m, n2, p, a, d)))
    rule960 = ReplacementRule(pattern960, lambda e, n, q, c, x, m, n2, p, a, d : Mul(Integer(-1), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), q), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule960)

    pattern961 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), FractionQ(m_)), (f, e, q, c, x, n, m, n2, b, p, a, d)))
    rule961 = ReplacementRule(pattern961, lambda f, e, q, c, x, n, m, n2, b, p, a, d : With(List(Set(Integer(g), Denominator(m))), Mul(Mul(Mul(Integer(-1), Integer(g)), Pow(f, Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(f, Mul(Integer(-1), n)), Pow(x, Mul(Mul(Integer(-1), Integer(g)), n)))), q), Mul(Pow(Add(a, Mul(b, Pow(f, Mul(Integer(-1), n)), Pow(x, Mul(Mul(Integer(-1), Integer(g)), n))), Mul(c, Pow(f, Mul(Integer(-2), n)), Pow(x, Mul(Integer(-2), Integer(g), n)))), p), Pow(Pow(x, Add(Mul(Integer(g), Add(m, Integer(1))), Integer(1))), Integer(-1)))), x), x, Mul(Integer(1), Pow(Pow(Mul(f, x), Mul(Integer(1), Pow(Integer(g), Integer(-1)))), Integer(-1)))))))
    rubi.add(rule961)

    pattern962 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(n_), FractionQ(m_)), (f, e, q, c, x, n, m, n2, p, a, d)))
    rule962 = ReplacementRule(pattern962, lambda f, e, q, c, x, n, m, n2, p, a, d : With(List(Set(Integer(g), Denominator(m))), Mul(Mul(Mul(Integer(-1), Integer(g)), Pow(f, Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(f, Mul(Integer(-1), n)), Pow(x, Mul(Mul(Integer(-1), Integer(g)), n)))), q), Mul(Pow(Add(a, Mul(c, Pow(f, Mul(Integer(-2), n)), Pow(x, Mul(Integer(-2), Integer(g), n)))), p), Pow(Pow(x, Add(Mul(Integer(g), Add(m, Integer(1))), Integer(1))), Integer(-1)))), x), x, Mul(Integer(1), Pow(Pow(Mul(f, x), Mul(Integer(1), Pow(Integer(g), Integer(-1)))), Integer(-1)))))))
    rubi.add(rule962)

    pattern963 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), Not(RationalQ(m_))), (f, e, q, c, x, n, n2, m, b, p, a, d)))
    rule963 = ReplacementRule(pattern963, lambda f, e, q, c, x, n, n2, m, b, p, a, d : Mul(Mul(Integer(-1), Pow(f, IntPart(m))), Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, Integer(-1)), FracPart(m)), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), q), Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule963)

    pattern964 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(n_), Not(RationalQ(m_))), (f, e, q, c, x, n, n2, m, p, a, d)))
    rule964 = ReplacementRule(pattern964, lambda f, e, q, c, x, n, n2, m, p, a, d : Mul(Mul(Integer(-1), Pow(f, IntPart(m))), Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, Integer(-1)), FracPart(m)), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), q), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1))))))
    rubi.add(rule964)

    pattern965 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(n_)), (e, n, q, c, x, m, n2, b, p, a, d)))
    rule965 = ReplacementRule(pattern965, lambda e, n, q, c, x, m, n2, b, p, a, d : With(List(Set(Integer(g), Denominator(n))), Mul(Integer(g), Subst(Int(Mul(Pow(x, Add(Mul(Integer(g), Add(m, Integer(1))), Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Mul(Integer(g), n)))), q), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(g), n))), Mul(c, Pow(x, Mul(Integer(2), Integer(g), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1))))))))
    rubi.add(rule965)

    pattern966 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), FractionQ(n_)), (e, n, q, c, x, m, n2, p, a, d)))
    rule966 = ReplacementRule(pattern966, lambda e, n, q, c, x, m, n2, p, a, d : With(List(Set(Integer(g), Denominator(n))), Mul(Integer(g), Subst(Int(Mul(Pow(x, Add(Mul(Integer(g), Add(m, Integer(1))), Integer(-1))), Pow(Add(d, Mul(e, Pow(x, Mul(Integer(g), n)))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), Integer(g), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1))))))))
    rubi.add(rule966)

    pattern967 = Pattern(Int(Mul(Pow(Mul(f_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(n_)), (e, f, q, c, x, n, n2, m, b, p, a, d)))
    rule967 = ReplacementRule(pattern967, lambda e, f, q, c, x, n, n2, m, b, p, a, d : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule967)

    pattern968 = Pattern(Int(Mul(Pow(Mul(f_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), FractionQ(n_)), (f, e, q, c, x, n, n2, m, p, a, d)))
    rule968 = ReplacementRule(pattern968, lambda f, e, q, c, x, n, n2, m, p, a, d : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule968)

    pattern969 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (e, n, q, c, x, m, n2, b, p, a, d)))
    rule969 = ReplacementRule(pattern969, lambda e, n, q, c, x, m, n2, b, p, a, d : Mul(Mul(Integer(1), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), q), Pow(Add(a, Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1)))))), Mul(c, Pow(x, Simplify(Mul(Integer(2), Mul(n, Pow(Add(m, Integer(1)), Integer(-1)))))))), p)), x), x, Pow(x, Add(m, Integer(1))))))
    rubi.add(rule969)

    pattern970 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (e, n, q, c, x, m, n2, p, a, d)))
    rule970 = ReplacementRule(pattern970, lambda e, n, q, c, x, m, n2, p, a, d : Mul(Mul(Integer(1), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(d, Mul(e, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), q), Pow(Add(a, Mul(c, Pow(x, Simplify(Mul(Integer(2), Mul(n, Pow(Add(m, Integer(1)), Integer(-1)))))))), p)), x), x, Pow(x, Add(m, Integer(1))))))
    rubi.add(rule970)

    pattern971 = Pattern(Int(Mul(Pow(Mul(f_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (e, f, q, c, x, n, n2, m, b, p, a, d)))
    rule971 = ReplacementRule(pattern971, lambda e, f, q, c, x, n, n2, m, b, p, a, d : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule971)

    pattern972 = Pattern(Int(Mul(Pow(Mul(f_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (f, e, q, c, x, n, n2, m, p, a, d)))
    rule972 = ReplacementRule(pattern972, lambda f, e, q, c, x, n, n2, m, p, a, d : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule972)

    pattern973 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (f, e, n, c, x, q, m, n2, b, a, d)))
    rule973 = ReplacementRule(pattern973, lambda f, e, n, c, x, q, m, n2, b, a, d : With(List(Set(Integer(r), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Integer(2), Mul(c, Pow(Integer(r), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Mul(Integer(-1), Integer(r)), Mul(Integer(2), c, Pow(x, n))), Integer(-1)))), x)), Mul(Integer(-1), Mul(Integer(2), Mul(c, Pow(Integer(r), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Integer(r), Mul(Integer(2), c, Pow(x, n))), Integer(-1)))), x))))))
    rubi.add(rule973)

    pattern974 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1)), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_))))), (f, e, n, c, x, q, m, n2, a, d)))
    rule974 = ReplacementRule(pattern974, lambda f, e, n, c, x, q, m, n2, a, d : With(List(Set(Integer(r), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)))), Add(Mul(Mul(Mul(Integer(-1), c), Pow(Mul(Integer(2), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(Integer(r), Mul(Integer(-1), Mul(c, Pow(x, n)))), Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(c, Pow(Mul(Integer(2), Integer(r)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Mul(Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(Integer(r), Mul(c, Pow(x, n))), Integer(-1)))), x))))))
    rubi.add(rule974)

    pattern975 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (f, e, n, c, x, m, n2, b, p, a, d)))
    rule975 = ReplacementRule(pattern975, lambda f, e, n, c, x, m, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Mul(f, x), Add(m, Integer(1)))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Mul(Add(Mul(d, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)))), Mul(Integer(-1), Mul(a, b, e)), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e))), c, Pow(x, n))), Pow(Mul(a, f, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(d, Add(Mul(Pow(b, Integer(2)), Add(m, Mul(n, Add(p, Integer(1))), Integer(1))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)))))), Mul(Integer(-1), Mul(a, b, e, Add(m, Integer(1)))), Mul(Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e))), c, Pow(x, n))), x)), x))))
    rubi.add(rule975)

    pattern976 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (f, e, n, c, x, m, n2, p, a, d)))
    rule976 = ReplacementRule(pattern976, lambda f, e, n, c, x, m, n2, p, a, d : Add(Mul(Mul(Integer(-1), Pow(Mul(f, x), Add(m, Integer(1)))), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Mul(Add(d, Mul(e, Pow(x, n))), Pow(Mul(Integer(2), a, f, n, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, n, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(d, Add(m, Mul(Integer(2), n, Add(p, Integer(1))), Integer(1))), Mul(e, Add(m, Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Pow(x, n))), x)), x))))
    rubi.add(rule976)

    pattern977 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Or(PositiveIntegerQ(p_), PositiveIntegerQ(q_))), (f, e, q, c, x, n, m, n2, b, p, a, d)))
    rule977 = ReplacementRule(pattern977, lambda f, e, q, c, x, n, m, n2, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule977)

    pattern978 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Or(PositiveIntegerQ(p_), PositiveIntegerQ(q_))), (f, e, q, c, x, n, m, n2, p, a, d)))
    rule978 = ReplacementRule(pattern978, lambda f, e, q, c, x, n, m, n2, p, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(f, x), m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule978)

    pattern979 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(q_), Or(IntegerQ(m_), PositiveQ(f_))), (f, e, n, c, x, q, m, n2, p, a, d)))
    rule979 = ReplacementRule(pattern979, lambda f, e, n, c, x, q, m, n2, p, a, d : Mul(Pow(f, m), Int(ExpandIntegrand(Mul(Pow(x, m), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), Pow(Add(Mul(d, Pow(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Mul(Integer(2), n))))), Integer(-1))), Mul(Integer(-1), Mul(e, Mul(Pow(x, n), Pow(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Mul(Integer(2), n))))), Integer(-1)))))), Mul(Integer(-1), q)), x), x)))
    rubi.add(rule979)

    pattern980 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), m_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(q_), Not(Or(IntegerQ(m_), PositiveQ(f_)))), (f, e, n, c, x, q, m, n2, p, a, d)))
    rule980 = ReplacementRule(pattern980, lambda f, e, n, c, x, q, m, n2, p, a, d : Mul(Mul(Pow(Mul(f, x), m), Pow(Pow(x, m), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule980)

    pattern981 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), cons((Mul(Pow(Mul(f_, x_), m_), Pow(Add(d_, Mul(e_, Pow(x_, n_))), q_), Pow(Add(a_, Mul(b_, Pow(x_, n_)), Mul(c_, Pow(x_, Mul(Integer(2), n_)))), p_)), x_), (f, e, q, c, x, n, m, n2, b, p, a, d)))
    rule981 = ReplacementRule(pattern981, lambda f, e, q, c, x, n, m, n2, b, p, a, d : Defer(Integer(Int)))
    rubi.add(rule981)

    pattern982 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), cons((Mul(Pow(Mul(f_, x_), m_), Pow(Add(d_, Mul(e_, Pow(x_, n_))), q_), Pow(Add(a_, Mul(c_, Pow(x_, Mul(Integer(2), n_)))), p_)), x_), (f, e, q, c, x, n, m, n2, p, a, d)))
    rule982 = ReplacementRule(pattern982, lambda f, e, q, c, x, n, m, n2, p, a, d : Defer(Integer(Int)))
    rubi.add(rule982)

    pattern983 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(v_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(v_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(v_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), LinearPairQ(u_, v_, x_)), (e, n, q, c, x, m, n2, u, b, p, a, d, v)))
    rule983 = ReplacementRule(pattern983, lambda e, n, q, c, x, m, n2, u, b, p, a, d, v : Mul(Mul(Pow(u, m), Pow(Mul(Coefficient(v, x, Integer(1)), Pow(v, m)), Integer(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x, v)))
    rubi.add(rule983)

    pattern984 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(v_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(v_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), LinearPairQ(u_, v_, x_)), (e, n, q, c, x, m, n2, u, p, a, d, v)))
    rule984 = ReplacementRule(pattern984, lambda e, n, q, c, x, m, n2, u, p, a, d, v : Mul(Mul(Pow(u, m), Pow(Mul(Coefficient(v, x, Integer(1)), Pow(v, m)), Integer(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x, v)))
    rubi.add(rule984)

    pattern985 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), EqQ(mn_, Mul(Integer(-1), n_)), IntegerQ(q_)), (e, n, q, c, x, m, n2, b, p, a, d, mn)))
    rule985 = ReplacementRule(pattern985, lambda e, n, q, c, x, m, n2, b, p, a, d, mn : Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(n, q)))), Pow(Add(e, Mul(d, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule985)

    pattern986 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(mn, x), FreeQ(p, x), cons(And(EqQ(n2_, Mul(Integer(-2), mn_)), IntegerQ(q_)), (e, q, c, x, m, n2, p, a, d, mn)))
    rule986 = ReplacementRule(pattern986, lambda e, q, c, x, m, n2, p, a, d, mn : Int(Mul(Pow(x, Add(m, Mul(mn, q))), Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), mn)))), q), Pow(Add(a, Mul(c, Pow(x, n2))), p)), x))
    rubi.add(rule986)

    pattern987 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), EqQ(mn_, Mul(Integer(-1), n_)), Not(IntegerQ(q_)), IntegerQ(p_)), (e, n, q, c, x, m, n2, b, p, a, d, mn)))
    rule987 = ReplacementRule(pattern987, lambda e, n, q, c, x, m, n2, b, p, a, d, mn : Int(Mul(Pow(x, Add(m, Mul(Integer(2), n, p))), Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), q), Pow(Add(c, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(a, Pow(x, Mul(Integer(-2), n)))), p)), x))
    rubi.add(rule987)

    pattern988 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(mn, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(-2), mn_)), Not(IntegerQ(q_)), IntegerQ(p_)), (e, q, c, x, m, n2, p, a, d, mn)))
    rule988 = ReplacementRule(pattern988, lambda e, q, c, x, m, n2, p, a, d, mn : Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(Integer(2), mn, p)))), Pow(Add(d, Mul(e, Pow(x, mn))), q), Pow(Add(c, Mul(a, Pow(x, Mul(Integer(2), mn)))), p)), x))
    rubi.add(rule988)

    pattern989 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), EqQ(mn_, Mul(Integer(-1), n_)), Not(IntegerQ(q_)), Not(IntegerQ(p_))), (e, n, q, c, x, m, n2, b, p, a, d, mn)))
    rule989 = ReplacementRule(pattern989, lambda e, n, q, c, x, m, n2, b, p, a, d, mn : Mul(Pow(x, Mul(n, FracPart(q))), Mul(Pow(Add(d, Mul(e, Pow(x, Mul(Integer(-1), n)))), FracPart(q)), Pow(Pow(Add(e, Mul(d, Pow(x, n))), FracPart(q)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(n, q)))), Pow(Add(e, Mul(d, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule989)

    pattern990 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), q_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(mn, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(-2), mn_)), Not(IntegerQ(q_)), Not(IntegerQ(p_))), (e, q, c, x, m, n2, p, a, d, mn)))
    rule990 = ReplacementRule(pattern990, lambda e, q, c, x, m, n2, p, a, d, mn : Mul(Pow(x, Mul(Mul(Integer(-1), mn), FracPart(q))), Mul(Pow(Add(d, Mul(e, Pow(x, mn))), FracPart(q)), Pow(Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), mn)))), FracPart(q)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(mn, q))), Pow(Add(e, Mul(d, Pow(x, Mul(Integer(-1), mn)))), q), Pow(Add(a, Mul(c, Pow(x, n2))), p)), x)))
    rubi.add(rule990)

    pattern991 = Pattern(Int(Mul(Pow(Mul(f_, x_), m_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(2), n_)), EqQ(mn_, Mul(Integer(-1), n_))), (e, n, q, c, f, x, n2, m, b, p, a, d, mn)))
    rule991 = ReplacementRule(pattern991, lambda e, n, q, c, f, x, n2, m, b, p, a, d, mn : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, mn))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule991)

    pattern992 = Pattern(Int(Mul(Pow(Mul(f_, x_), m_), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('mn', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(mn, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(n2_, Mul(Integer(-2), mn_))), (e, f, q, c, x, n2, m, p, a, d, mn)))
    rule992 = ReplacementRule(pattern992, lambda e, f, q, c, x, n2, m, p, a, d, mn : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, mn))), q), Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), Integer(n))))), p)), x)))
    rubi.add(rule992)

    pattern993 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_)), IntegerQ(p_)), (e, n, q, c, x, m, b, p, a, d, mn)))
    rule993 = ReplacementRule(pattern993, lambda e, n, q, c, x, m, b, p, a, d, mn : Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(n, p)))), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule993)

    pattern994 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_)), Not(IntegerQ(p_))), (e, n, q, c, x, m, b, p, a, d, mn)))
    rule994 = ReplacementRule(pattern994, lambda e, n, q, c, x, m, b, p, a, d, mn : Mul(Pow(x, Mul(n, FracPart(p))), Mul(Pow(Add(a, Mul(b, Pow(Pow(x, n), Integer(-1))), Mul(c, Pow(x, n))), FracPart(p)), Pow(Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(n, p)))), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(b, Mul(a, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule994)

    pattern995 = Pattern(Int(Mul(Pow(Mul(f_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, mn_))), Wildcard.optional('p', Integer(1))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(Integer(-1), n_))), (e, n, q, c, f, x, m, b, p, a, d, mn)))
    rule995 = ReplacementRule(pattern995, lambda e, n, q, c, f, x, m, b, p, a, d, mn : Mul(Pow(f, IntPart(m)), Mul(Pow(Mul(f, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(d, Mul(e, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, n))), p)), x)))
    rubi.add(rule995)

    pattern996 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(d1_, Mul(Wildcard.optional('e1', Integer(1)), Pow(x_, Wildcard.optional('non2', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(d2_, Mul(Wildcard.optional('e2', Integer(1)), Pow(x_, Wildcard.optional('non2', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d1, x), FreeQ(e1, x), FreeQ(d2, x), FreeQ(e2, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(non2_, Mul(Integer(-1), Mul(n_, Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(Mul(d2_, e1_), Mul(d1_, e2_))), Or(IntegerQ(q_), And(PositiveQ(d1_), PositiveQ(d2_)))), (f, n, q, c, x, m, n2, d2, non2, b, p, d1, e1, a, e2)))
    rule996 = ReplacementRule(pattern996, lambda f, n, q, c, x, m, n2, d2, non2, b, p, d1, e1, a, e2 : Int(Mul(Pow(Mul(f, x), m), Pow(Add(Mul(d1, d2), Mul(e1, e2, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule996)

    pattern997 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(d1_, Mul(Wildcard.optional('e1', Integer(1)), Pow(x_, Wildcard.optional('non2', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(d2_, Mul(Wildcard.optional('e2', Integer(1)), Pow(x_, Wildcard.optional('non2', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d1, x), FreeQ(e1, x), FreeQ(d2, x), FreeQ(e2, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(non2_, Mul(Integer(-1), Mul(n_, Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(Mul(d2_, e1_), Mul(d1_, e2_)))), (f, n, q, c, x, m, n2, d2, non2, b, p, d1, e1, a, e2)))
    rule997 = ReplacementRule(pattern997, lambda f, n, q, c, x, m, n2, d2, non2, b, p, d1, e1, a, e2 : Mul(Pow(Add(d1, Mul(e1, Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), FracPart(q)), Mul(Pow(Add(d2, Mul(e2, Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), FracPart(q)), Pow(Pow(Add(Mul(d1, d2), Mul(e1, e2, Pow(x, n))), FracPart(q)), Integer(-1))), Int(Mul(Pow(Mul(f, x), m), Pow(Add(Mul(d1, d2), Mul(e1, e2, Pow(x, n))), q), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule997)

    pattern998 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n_, Mul(Integer(-1), q_))), ZeroQ(Add(r_, Mul(Integer(-1), n_)))), (n, q, c, x, b, p, a, r)))
    rule998 = ReplacementRule(pattern998, lambda n, q, c, x, b, p, a, r : Int(Pow(Mul(Add(a, b, c), Pow(x, n)), p), x))
    rubi.add(rule998)

    pattern999 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), IntegerQ(p_)), (n, q, c, x, b, p, a, r)))
    rule999 = ReplacementRule(pattern999, lambda n, q, c, x, b, p, a, r : Int(Mul(Pow(x, Mul(p, q)), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))), p)), x))
    rubi.add(rule999)

    pattern1000 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Rational(Integer(1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_)))), (n, q, c, x, b, a, r)))
    rule1000 = ReplacementRule(pattern1000, lambda n, q, c, x, b, a, r : Mul(Mul(Sqrt(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q)))))), Pow(Mul(Pow(x, Mul(q, Pow(Integer(2), Integer(-1)))), Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))))), Integer(-1))), Int(Mul(Pow(x, Mul(q, Pow(Integer(2), Integer(-1)))), Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))))), x)))
    rubi.add(rule1000)

    pattern1001 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_)))), (n, q, c, x, b, a, r)))
    rule1001 = ReplacementRule(pattern1001, lambda n, q, c, x, b, a, r : Mul(Pow(x, Mul(q, Pow(Integer(2), Integer(-1)))), Mul(Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q))))))), Pow(Sqrt(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q)))))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Pow(x, Mul(q, Pow(Integer(2), Integer(-1)))), Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))))), Integer(-1))), x)))
    rubi.add(rule1001)

    pattern1002 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(Mul(p_, Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))), Integer(1)))), (n, q, c, x, b, p, a, r)))
    rule1002 = ReplacementRule(pattern1002, lambda n, q, c, x, b, p, a, r : Add(Mul(x, Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Add(Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Integer(-1)))), Mul(Add(n, Mul(Integer(-1), q)), Mul(p, Pow(Add(Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Integer(-1))), Int(Mul(Pow(x, q), Add(Mul(Integer(2), a), Mul(b, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1002)

    pattern1003 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1))), (n, q, c, x, b, p, a, r)))
    rule1003 = ReplacementRule(pattern1003, lambda n, q, c, x, b, p, a, r : Add(Mul(Mul(Integer(-1), Pow(x, Add(Mul(Integer(-1), q), Integer(1)))), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)), Mul(b, c, Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(x, Mul(Integer(-1), q)), Add(Mul(Add(Mul(p, q), Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)))), Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Mul(b, c, Add(Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1)))), x))))
    rubi.add(rule1003)

    pattern1004 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_))), (n, q, c, x, b, p, a, r)))
    rule1004 = ReplacementRule(pattern1004, lambda n, q, c, x, b, p, a, r : Mul(Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Mul(Pow(x, Mul(p, q)), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))), p)), Integer(-1))), Int(Mul(Pow(x, Mul(p, q)), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))), p)), x)))
    rubi.add(rule1004)

    pattern1005 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_), x_), cons((Pow(Add(Mul(a_, Pow(x_, q_)), Mul(b_, Pow(x_, n_)), Mul(c_, Pow(x_, Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), p_), x_), (n, q, c, x, b, p, a, r)))
    rule1005 = ReplacementRule(pattern1005, lambda n, q, c, x, b, p, a, r : Defer(Integer(Int)))
    rubi.add(rule1005)

    pattern1006 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(u_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(u_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Wildcard.optional('r', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (n, q, c, x, u, b, p, a, r)))
    rule1006 = ReplacementRule(pattern1006, lambda n, q, c, x, u, b, p, a, r : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), x), x, u)))
    rubi.add(rule1006)

    pattern1007 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(q_, Mul(Integer(-1), n_))), ZeroQ(Add(r_, Mul(Integer(-1), n_)))), (n, q, c, x, m, b, p, a, r)))
    rule1007 = ReplacementRule(pattern1007, lambda n, q, c, x, m, b, p, a, r : Int(Mul(Pow(x, m), Pow(Mul(Add(a, b, c), Pow(x, n)), p)), x))
    rubi.add(rule1007)

    pattern1008 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), IntegerQ(p_), PosQ(Add(n_, Mul(Integer(-1), q_)))), (n, q, c, x, m, b, p, a, r)))
    rule1008 = ReplacementRule(pattern1008, lambda n, q, c, x, m, b, p, a, r : Int(Mul(Pow(x, Add(m, Mul(p, q))), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))), p)), x))
    rubi.add(rule1008)

    pattern1009 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Or(And(ZeroQ(Add(m_, Integer(-1))), ZeroQ(Add(n_, Integer(-3))), ZeroQ(Add(q_, Integer(-2)))), And(Or(ZeroQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), ZeroQ(Add(m_, Mul(Integer(-1), Mul(Integer(3), Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(m_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(m_, Mul(Integer(-1), Mul(Integer(5), Pow(Integer(2), Integer(-1))))))), ZeroQ(Add(n_, Integer(-3))), ZeroQ(Add(q_, Integer(-1)))))), (n, q, c, x, m, b, a, r)))
    rule1009 = ReplacementRule(pattern1009, lambda n, q, c, x, m, b, a, r : Mul(Pow(x, Mul(q, Pow(Integer(2), Integer(-1)))), Mul(Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q))))))), Pow(Sqrt(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q)))))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(q, Pow(Integer(2), Integer(-1)))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q))))))), Integer(-1))), x)))
    rubi.add(rule1009)

    pattern1010 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Rational(Integer(-3), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), Mul(Integer(3), Mul(Add(n_, Integer(-1)), Pow(Integer(2), Integer(-1))))))), ZeroQ(Add(q_, Mul(Integer(-1), n_), Integer(1))), ZeroQ(Add(r_, Mul(Integer(-1), n_), Integer(-1))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, q, c, x, m, b, a, r)))
    rule1010 = ReplacementRule(pattern1010, lambda n, q, c, x, m, b, a, r : Mul(Integer(-2), Pow(x, Mul(Add(n, Integer(-1)), Pow(Integer(2), Integer(-1)))), Mul(Add(b, Mul(Integer(2), c, x)), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(Mul(a, Pow(x, Add(n, Integer(-1)))), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(n, Integer(1))))))), Integer(-1)))))
    rubi.add(rule1010)

    pattern1011 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Rational(Integer(-3), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), Mul(Add(Mul(Integer(3), n_), Integer(-1)), Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(q_, Mul(Integer(-1), n_), Integer(1))), ZeroQ(Add(r_, Mul(Integer(-1), n_), Integer(-1))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, q, c, x, m, b, a, r)))
    rule1011 = ReplacementRule(pattern1011, lambda n, q, c, x, m, b, a, r : Mul(Pow(x, Mul(Add(n, Integer(-1)), Pow(Integer(2), Integer(-1)))), Mul(Add(Mul(Integer(4), a), Mul(Integer(2), b, x)), Pow(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(Mul(a, Pow(x, Add(n, Integer(-1)))), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(n, Integer(1))))))), Integer(-1)))))
    rubi.add(rule1011)

    pattern1012 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Equal(Add(m_, Mul(p_, Add(n_, Integer(-1))), Integer(-1)), Integer(0))), (n, q, c, x, m, b, p, a, r)))
    rule1012 = ReplacementRule(pattern1012, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Pow(x, Add(m, Mul(Integer(-1), n))), Mul(Pow(Add(Mul(a, Pow(x, Add(n, Integer(-1)))), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(n, Integer(1))))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(b, Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Pow(x, Add(m, Integer(-1))), Pow(Add(Mul(a, Pow(x, Add(n, Integer(-1)))), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(n, Integer(1))))), p)), x)))))
    rubi.add(rule1012)

    pattern1013 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Greater(p_, Integer(0)), Equal(Add(m_, Mul(p_, q_), Integer(1)), Add(n_, Mul(Integer(-1), q_)))), (n, q, c, x, m, b, p, a, r)))
    rule1013 = ReplacementRule(pattern1013, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Pow(x, Add(m, Mul(Integer(-1), n), q, Integer(1))), Add(b, Mul(Integer(2), c, Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Mul(Integer(2), c, Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(p, Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(Mul(Integer(2), c, Add(Mul(Integer(2), p), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, q)), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule1013)

    pattern1014 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Greater(p_, Integer(0)), Greater(Add(m_, Mul(p_, q_), Integer(1)), Add(n_, Mul(Integer(-1), q_))), Unequal(Add(m_, Mul(p_, Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))), Integer(1)), Integer(0)), Unequal(Add(m_, Mul(p_, q_), Mul(Add(n_, Mul(Integer(-1), q_)), Add(Mul(Integer(2), p_), Integer(-1))), Integer(1)), Integer(0))), (n, q, c, x, m, b, p, a, r)))
    rule1014 = ReplacementRule(pattern1014, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Pow(x, Add(m, Mul(Integer(-1), n), q, Integer(1))), Add(Mul(b, Add(n, Mul(Integer(-1), q)), p), Mul(c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(-1))), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Mul(c, Add(m, Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Integer(-1)))), Mul(Add(n, Mul(Integer(-1), q)), Mul(p, Pow(Mul(c, Add(m, Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Add(n, Mul(Integer(-1), Mul(Integer(2), q)))))), Simp(Add(Mul(Mul(Integer(-1), a), b, Add(m, Mul(p, q), Mul(Integer(-1), n), q, Integer(1))), Mul(Add(Mul(Integer(2), a, c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(-1))), Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(-1))), Integer(1))))), Pow(x, Add(n, Mul(Integer(-1), q))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1014)

    pattern1015 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Greater(p_, Integer(0)), LessEqual(Add(m_, Mul(p_, q_), Integer(1)), Add(Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))), Integer(1))), NonzeroQ(Add(m_, Mul(p_, q_), Integer(1)))), (n, q, c, x, m, b, p, a, r)))
    rule1015 = ReplacementRule(pattern1015, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Pow(x, Add(m, Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Add(m, Mul(p, q), Integer(1)), Integer(-1)))), Mul(Integer(-1), Mul(Add(n, Mul(Integer(-1), q)), Mul(p, Pow(Add(m, Mul(p, q), Integer(1)), Integer(-1))), Int(Mul(Pow(x, Add(m, n)), Add(b, Mul(Integer(2), c, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule1015)

    pattern1016 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Greater(p_, Integer(0)), Greater(Add(m_, Mul(p_, q_), Integer(1)), Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_)))), Unequal(Add(m_, Mul(p_, Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))), Integer(1)), Integer(0))), (n, q, c, x, m, b, p, a, r)))
    rule1016 = ReplacementRule(pattern1016, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Pow(x, Add(m, Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Add(m, Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Integer(-1)))), Mul(Add(n, Mul(Integer(-1), q)), Mul(p, Pow(Add(m, Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Integer(-1))), Int(Mul(Pow(x, Add(m, q)), Add(Mul(Integer(2), a), Mul(b, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1016)

    pattern1017 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Less(p_, Integer(-1)), Equal(Add(m_, Mul(p_, q_), Integer(1)), Mul(Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))), Add(Mul(Integer(2), p_), Integer(3))))), (n, q, c, x, m, b, p, a, r)))
    rule1017 = ReplacementRule(pattern1017, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Mul(Integer(-1), Pow(x, Add(m, Mul(Integer(-1), q), Integer(1)))), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)), Mul(b, c, Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Add(Mul(Integer(2), a, c), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Add(p, Integer(2))))), Pow(Mul(a, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), q))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1)))), x))))
    rubi.add(rule1017)

    pattern1018 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Less(p_, Integer(-1)), Greater(Add(m_, Mul(p_, q_), Integer(1)), Mul(Integer(2), Add(n_, Mul(Integer(-1), q_))))), (n, q, c, x, m, b, p, a, r)))
    rule1018 = ReplacementRule(pattern1018, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Mul(Integer(-1), Pow(x, Add(m, Mul(Integer(-1), Mul(Integer(2), n)), q, Integer(1)))), Add(Mul(Integer(2), a), Mul(b, Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(Integer(2), n)), q)), Add(Mul(Integer(2), a, Add(m, Mul(p, q), Mul(Integer(-1), Mul(Integer(2), Add(n, Mul(Integer(-1), q)))), Integer(1))), Mul(b, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1)))), x))))
    rubi.add(rule1018)

    pattern1019 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Less(p_, Integer(-1)), Less(Add(m_, Mul(p_, q_), Integer(1)), Add(n_, Mul(Integer(-1), q_)))), (n, q, c, x, m, b, p, a, r)))
    rule1019 = ReplacementRule(pattern1019, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Mul(Integer(-1), Pow(x, Add(m, Mul(Integer(-1), q), Integer(1)))), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c)), Mul(b, c, Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), q))), Add(Mul(Pow(b, Integer(2)), Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1)))), Mul(b, c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1)))), x))))
    rubi.add(rule1019)

    pattern1020 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Less(p_, Integer(-1)), Less(Add(n_, Mul(Integer(-1), q_)), Add(m_, Mul(p_, q_), Integer(1)), Mul(Integer(2), Add(n_, Mul(Integer(-1), q_))))), (n, q, c, x, m, b, p, a, r)))
    rule1020 = ReplacementRule(pattern1020, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Pow(x, Add(m, Mul(Integer(-1), n), Integer(1))), Add(b, Mul(Integer(2), c, Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), n))), Add(Mul(b, Add(m, Mul(p, q), Mul(Integer(-1), n), q, Integer(1))), Mul(Integer(2), c, Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1)))), x)))))
    rubi.add(rule1020)

    pattern1021 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Inequality(Integer(-1), Integer(LessEqual), p_, Integer(Less), Integer(0)), Equal(Add(m_, Mul(p_, q_), Integer(1)), Mul(Integer(2), Add(n_, Mul(Integer(-1), q_))))), (n, q, c, x, m, b, p, a, r)))
    rule1021 = ReplacementRule(pattern1021, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(Integer(2), n)), q, Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(Integer(2), c, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(b, Pow(Mul(Integer(2), c), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), n), q)), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p)), x)))))
    rubi.add(rule1021)

    pattern1022 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Inequality(Integer(-1), Integer(LessEqual), p_, Integer(Less), Integer(0)), Equal(Add(m_, Mul(p_, q_), Integer(1)), Mul(Integer(-2), Add(n_, Mul(Integer(-1), q_)), Add(p_, Integer(1))))), (n, q, c, x, m, b, p, a, r)))
    rule1022 = ReplacementRule(pattern1022, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Mul(Integer(-1), Pow(x, Add(m, Mul(Integer(-1), q), Integer(1)))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(b, Pow(Mul(Integer(2), a), Integer(-1))), Int(Mul(Pow(x, Add(m, n, Mul(Integer(-1), q))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p)), x)))))
    rubi.add(rule1022)

    pattern1023 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Inequality(Integer(-1), Integer(LessEqual), p_, Integer(Less), Integer(0)), Greater(Add(m_, Mul(p_, q_), Integer(1)), Mul(Integer(2), Add(n_, Mul(Integer(-1), q_))))), (n, q, c, x, m, b, p, a, r)))
    rule1023 = ReplacementRule(pattern1023, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(Integer(2), n)), q, Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), p), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))), Add(Mul(a, Add(m, Mul(p, q), Mul(Integer(-1), Mul(Integer(2), Add(n, Mul(Integer(-1), q)))), Integer(1))), Mul(b, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(-1))), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p)), x)))))
    rubi.add(rule1023)

    pattern1024 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Inequality(Integer(-1), Integer(LessEqual), p_, Integer(Less), Integer(0)), Less(Add(m_, Mul(p_, q_), Integer(1)), Integer(0))), (n, q, c, x, m, b, p, a, r)))
    rule1024 = ReplacementRule(pattern1024, lambda n, q, c, x, m, b, p, a, r : Add(Mul(Pow(x, Add(m, Mul(Integer(-1), q), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(a, Add(m, Mul(p, q), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, Add(m, Mul(p, q), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, n, Mul(Integer(-1), q))), Add(Mul(b, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1))), Mul(c, Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p)), x)))))
    rubi.add(rule1024)

    pattern1025 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), Not(IntegerQ(p_)), PosQ(Add(n_, Mul(Integer(-1), q_)))), (n, q, c, x, m, b, p, a, r)))
    rule1025 = ReplacementRule(pattern1025, lambda n, q, c, x, m, b, p, a, r : Mul(Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Mul(Pow(x, Mul(p, q)), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))), p)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(p, q))), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))), p)), x)))
    rubi.add(rule1025)

    pattern1026 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(u_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(u_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Wildcard.optional('r', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (n, q, c, x, m, u, b, p, a, r)))
    rule1026 = ReplacementRule(pattern1026, lambda n, q, c, x, m, u, b, p, a, r : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p)), x), x, u)))
    rubi.add(rule1026)

    pattern1027 = Pattern(Int(Mul(Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), IntegerQ(p_), PosQ(Add(n_, Mul(Integer(-1), q_)))), (B, n, q, c, x, A, j, b, p, a, r)))
    rule1027 = ReplacementRule(pattern1027, lambda B, n, q, c, x, A, j, b, p, a, r : Int(Mul(Pow(x, Mul(p, q)), Add(A, Mul(B, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))), p)), x))
    rubi.add(rule1027)

    pattern1028 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1))))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(j_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), ZeroQ(Add(n_, Integer(-3))), ZeroQ(Add(q_, Integer(-2)))), (B, n, q, c, x, A, j, b, a, r)))
    rule1028 = ReplacementRule(pattern1028, lambda B, n, q, c, x, A, j, b, a, r : Mul(Pow(x, Mul(q, Pow(Integer(2), Integer(-1)))), Mul(Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q))))))), Pow(Sqrt(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q)))))), Integer(-1))), Int(Mul(Add(A, Mul(B, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Mul(Pow(x, Mul(q, Pow(Integer(2), Integer(-1)))), Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))))), Integer(-1))), x)))
    rubi.add(rule1028)

    pattern1029 = Pattern(Int(Mul(Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), p_), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Greater(p_, Integer(0)), NonzeroQ(Add(Mul(p_, Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))), Integer(1))), NonzeroQ(Add(Mul(p_, q_), Mul(Add(n_, Mul(Integer(-1), q_)), Add(Mul(Integer(2), p_), Integer(1))), Integer(1)))), (B, n, q, c, x, A, j, b, p, a, r)))
    rule1029 = ReplacementRule(pattern1029, lambda B, n, q, c, x, A, j, b, p, a, r : Add(Mul(x, Add(Mul(b, B, Add(n, Mul(Integer(-1), q)), p), Mul(A, c, Add(Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(B, c, Add(Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Mul(c, Add(Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Add(Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Add(n, Mul(Integer(-1), q)), Mul(p, Pow(Mul(c, Add(Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Add(Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(x, q), Add(Mul(Integer(2), a, A, c, Add(Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(Integer(-1), Mul(a, b, B, Add(Mul(p, q), Integer(1)))), Mul(Add(Mul(Integer(2), a, B, c, Add(Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1))), Mul(A, b, c, Add(Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), B, Add(Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), p), Integer(1))))), Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1029)

    pattern1030 = Pattern(Int(Mul(Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), p_), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(q, x), cons(And(Not(IntegerQ(p_)), RationalQ(p_), Greater(p_, Integer(0))), (q, c, x, A, j, p, B, r, a)))
    rule1030 = ReplacementRule(pattern1030, lambda q, c, x, A, j, p, B, r, a : With(List(Set(Integer(n), Add(q, r))), Condition(Add(Mul(x, Add(Mul(A, Add(Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(B, Add(Mul(p, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))), Integer(1)), Pow(x, Add(Integer(n), Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), p), Pow(Mul(Add(Mul(p, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))), Integer(1)), Add(Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Add(Integer(n), Mul(Integer(-1), q)), Mul(p, Pow(Mul(Add(Mul(p, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))), Integer(1)), Add(Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(x, q), Add(Mul(Integer(2), a, A, Add(Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(Mul(Integer(2), a, B, Add(Mul(p, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))), Integer(1))), Pow(x, Add(Integer(n), Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x))), And(ZeroQ(Add(j, Mul(Integer(-1), Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), NonzeroQ(Add(Mul(p, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))), Integer(1))), NonzeroQ(Add(Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1)))))))
    rubi.add(rule1030)

    pattern1031 = Pattern(Int(Mul(Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), p_), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), RationalQ(p_), Less(p_, Integer(-1))), (B, n, q, c, x, A, j, b, p, a, r)))
    rule1031 = ReplacementRule(pattern1031, lambda B, n, q, c, x, A, j, b, p, a, r : Add(Mul(Mul(Integer(-1), Pow(x, Add(Mul(Integer(-1), q), Integer(1)))), Add(Mul(A, Pow(b, Integer(2))), Mul(Integer(-1), Mul(a, b, B)), Mul(Integer(-1), Mul(Integer(2), a, A, c)), Mul(Add(Mul(A, b), Mul(Integer(-1), Mul(Integer(2), a, B))), c, Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(x, Mul(Integer(-1), q)), Mul(Add(Mul(A, Pow(b, Integer(2)), Add(Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1))), Mul(Integer(-1), Mul(a, b, B, Add(Mul(p, q), Integer(1)))), Mul(Integer(-1), Mul(Integer(2), a, A, c, Add(Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1)))), Mul(Add(Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Add(Mul(A, b), Mul(Integer(-1), Mul(Integer(2), a, B))), c, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))))), x))))
    rubi.add(rule1031)

    pattern1032 = Pattern(Int(Mul(Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), p_), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(q, x), cons(And(Not(IntegerQ(p_)), RationalQ(p_), Less(p_, Integer(-1))), (q, c, x, A, j, p, B, r, a)))
    rule1032 = ReplacementRule(pattern1032, lambda q, c, x, A, j, p, B, r, a : With(List(Set(Integer(n), Add(q, r))), Condition(Add(Mul(Mul(Integer(-1), Pow(x, Add(Mul(Integer(-1), q), Integer(1)))), Add(Mul(a, A, c), Mul(a, B, c, Pow(x, Add(Integer(n), Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(a, Add(Integer(n), Mul(Integer(-1), q)), Add(p, Integer(1)), Mul(Integer(2), a, c)), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, Add(Integer(n), Mul(Integer(-1), q)), Add(p, Integer(1)), Mul(Integer(2), a, c)), Integer(-1))), Int(Mul(Pow(x, Mul(Integer(-1), q)), Mul(Add(Mul(a, A, c, Add(Mul(p, q), Mul(Integer(2), Add(Integer(n), Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1))), Mul(a, B, c, Add(Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Pow(x, Add(Integer(n), Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(1))))), x))), ZeroQ(Add(j, Mul(Integer(-1), Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))))))
    rubi.add(rule1032)

    pattern1033 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1))))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), cons((Mul(Add(A_, Mul(B_, Pow(x_, Add(n_, Mul(Integer(-1), q_))))), Pow(Add(Mul(a_, Pow(x_, q_)), Mul(b_, Pow(x_, n_)), Mul(c_, Pow(x_, Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), p_)), x_), (B, n, q, c, x, A, j, b, p, a, r)))
    rule1033 = ReplacementRule(pattern1033, lambda B, n, q, c, x, A, j, b, p, a, r : Defer(Integer(Int)))
    rubi.add(rule1033)

    pattern1034 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(u_, Wildcard.optional('j', Integer(1))))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(u_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(u_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Wildcard.optional('r', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(j_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (B, n, q, c, x, A, u, j, b, p, a, r)))
    rule1034 = ReplacementRule(pattern1034, lambda B, n, q, c, x, A, u, j, b, p, a, r : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Add(A, Mul(B, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p)), x), x, u)))
    rubi.add(rule1034)

    pattern1035 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), IntegerQ(p_), PosQ(Add(n_, Mul(Integer(-1), q_)))), (B, n, q, c, x, A, m, j, b, p, a, r)))
    rule1035 = ReplacementRule(pattern1035, lambda B, n, q, c, x, A, m, j, b, p, a, r : Int(Mul(Pow(x, Add(m, Mul(p, q))), Add(A, Mul(B, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q)))))), p)), x))
    rubi.add(rule1035)

    pattern1036 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Greater(p_, Integer(0)), LessEqual(Add(m_, Mul(p_, q_)), Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_)))), Unequal(Add(m_, Mul(p_, q_), Integer(1)), Integer(0)), Unequal(Add(m_, Mul(p_, q_), Mul(Add(n_, Mul(Integer(-1), q_)), Add(Mul(Integer(2), p_), Integer(1))), Integer(1)), Integer(0))), (B, n, q, c, x, A, m, j, b, p, a, r)))
    rule1036 = ReplacementRule(pattern1036, lambda B, n, q, c, x, A, m, j, b, p, a, r : Add(Mul(Pow(x, Add(m, Integer(1))), Add(Mul(A, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(B, Add(m, Mul(p, q), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Mul(Add(m, Mul(p, q), Integer(1)), Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Add(n, Mul(Integer(-1), q)), Mul(p, Pow(Mul(Add(m, Mul(p, q), Integer(1)), Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(n, m)), Simp(Add(Mul(Integer(2), a, B, Add(m, Mul(p, q), Integer(1))), Mul(Integer(-1), Mul(A, b, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1)))), Mul(Add(Mul(b, B, Add(m, Mul(p, q), Integer(1))), Mul(Integer(-1), Mul(Integer(2), A, c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))))), Pow(x, Add(n, Mul(Integer(-1), q))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1036)

    pattern1037 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(Not(IntegerQ(p_)), RationalQ(m_, p_, q_), Greater(p_, Integer(0))), (B, q, c, x, A, m, j, p, a, r)))
    rule1037 = ReplacementRule(pattern1037, lambda B, q, c, x, A, m, j, p, a, r : With(List(Set(Integer(n), Add(q, r))), Condition(Add(Mul(Pow(x, Add(m, Integer(1))), Add(Mul(A, Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(B, Add(m, Mul(p, q), Integer(1)), Pow(x, Add(Integer(n), Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), p), Pow(Mul(Add(m, Mul(p, q), Integer(1)), Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Integer(2), Add(Integer(n), Mul(Integer(-1), q)), Mul(p, Pow(Mul(Add(m, Mul(p, q), Integer(1)), Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(Integer(n), m)), Simp(Add(Mul(a, B, Add(m, Mul(p, q), Integer(1))), Mul(Integer(-1), Mul(A, c, Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Pow(x, Add(Integer(n), Mul(Integer(-1), q)))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x))), And(ZeroQ(Add(j, Mul(Integer(-1), Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), PositiveIntegerQ(Integer(n)), LessEqual(Add(m, Mul(p, q)), Mul(Integer(-1), Add(Integer(n), Mul(Integer(-1), q)))), Unequal(Add(m, Mul(p, q), Integer(1)), Integer(0)), Unequal(Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Integer(0))))))
    rubi.add(rule1037)

    pattern1038 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Less(p_, Integer(-1)), Greater(Add(m_, Mul(p_, q_)), Add(n_, Mul(Integer(-1), q_), Integer(-1)))), (B, n, q, c, x, A, m, j, b, p, a, r)))
    rule1038 = ReplacementRule(pattern1038, lambda B, n, q, c, x, A, m, j, b, p, a, r : Add(Mul(Pow(x, Add(m, Mul(Integer(-1), n), Integer(1))), Add(Mul(A, b), Mul(Integer(-1), Mul(Integer(2), a, B)), Mul(Integer(-1), Mul(Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c))), Pow(x, Add(n, Mul(Integer(-1), q)))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), n))), Simp(Add(Mul(Add(m, Mul(p, q), Mul(Integer(-1), n), q, Integer(1)), Add(Mul(Integer(2), a, B), Mul(Integer(-1), Mul(A, b)))), Mul(Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1)), Add(Mul(b, B), Mul(Integer(-1), Mul(Integer(2), A, c))), Pow(x, Add(n, Mul(Integer(-1), q))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1)))), x))))
    rubi.add(rule1038)

    pattern1039 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(Not(IntegerQ(p_)), RationalQ(m_, p_, q_), Less(p_, Integer(-1))), (B, q, c, x, A, m, j, p, a, r)))
    rule1039 = ReplacementRule(pattern1039, lambda B, q, c, x, A, m, j, p, a, r : With(List(Set(Integer(n), Add(q, r))), Condition(Add(Mul(Pow(x, Add(m, Mul(Integer(-1), Integer(n)), Integer(1))), Add(Mul(a, B), Mul(Integer(-1), Mul(A, c, Pow(x, Add(Integer(n), Mul(Integer(-1), q)))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(Integer(n), Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(Integer(n), Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Integer(n)))), Simp(Add(Mul(a, B, Add(m, Mul(p, q), Mul(Integer(-1), Integer(n)), q, Integer(1))), Mul(Integer(-1), Mul(A, c, Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Integer(2), Add(p, Integer(1))), Integer(1)), Pow(x, Add(Integer(n), Mul(Integer(-1), q)))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(1)))), x)))), And(ZeroQ(Add(j, Mul(Integer(-1), Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), PositiveIntegerQ(Integer(n)), Greater(Add(m, Mul(p, q)), Add(Integer(n), Mul(Integer(-1), q), Integer(-1)))))))
    rubi.add(rule1039)

    pattern1040 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Greater(p_, Integer(0)), Greater(Add(m_, Mul(p_, q_)), Add(Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))), Integer(-1))), Unequal(Add(m_, Mul(p_, Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))), Integer(1)), Integer(0)), Unequal(Add(m_, Mul(p_, q_), Mul(Add(n_, Mul(Integer(-1), q_)), Add(Mul(Integer(2), p_), Integer(1))), Integer(1)), Integer(0))), (B, n, q, c, x, A, m, j, b, p, a, r)))
    rule1040 = ReplacementRule(pattern1040, lambda B, n, q, c, x, A, m, j, b, p, a, r : Add(Mul(Pow(x, Add(m, Integer(1))), Add(Mul(b, B, Add(n, Mul(Integer(-1), q)), p), Mul(A, c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(B, c, Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), p), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p), Pow(Mul(c, Add(m, Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Add(n, Mul(Integer(-1), q)), Mul(p, Pow(Mul(c, Add(m, Mul(p, Add(Mul(Integer(2), n), Mul(Integer(-1), q))), Integer(1)), Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, q)), Simp(Add(Mul(Integer(2), a, A, c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(Integer(-1), Mul(a, b, B, Add(m, Mul(p, q), Integer(1)))), Mul(Add(Mul(Integer(2), a, B, c, Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), p), Integer(1))), Mul(A, b, c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), B, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), p), Integer(1))))), Pow(x, Add(n, Mul(Integer(-1), q))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1040)

    pattern1041 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(Not(IntegerQ(p_)), RationalQ(m_, p_, q_), Greater(p_, Integer(0))), (B, q, c, x, A, m, j, p, a, r)))
    rule1041 = ReplacementRule(pattern1041, lambda B, q, c, x, A, m, j, p, a, r : With(List(Set(Integer(n), Add(q, r))), Condition(Add(Mul(Pow(x, Add(m, Integer(1))), Add(Mul(A, Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(B, Add(m, Mul(p, q), Mul(Integer(2), Add(Integer(n), Mul(Integer(-1), q)), p), Integer(1)), Pow(x, Add(Integer(n), Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), p), Pow(Mul(Add(m, Mul(p, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))), Integer(1)), Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Add(Integer(n), Mul(Integer(-1), q)), Mul(p, Pow(Mul(Add(m, Mul(p, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))), Integer(1)), Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, q)), Simp(Add(Mul(Integer(2), a, A, Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Mul(Integer(2), a, B, Add(m, Mul(p, q), Mul(Integer(2), Add(Integer(n), Mul(Integer(-1), q)), p), Integer(1)), Pow(x, Add(Integer(n), Mul(Integer(-1), q))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(-1)))), x))), And(ZeroQ(Add(j, Mul(Integer(-1), Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), PositiveIntegerQ(Integer(n)), Greater(Add(m, Mul(p, q)), Mul(Integer(-1), Add(Integer(n), Mul(Integer(-1), q)))), Unequal(Add(m, Mul(p, q), Mul(Integer(2), Add(Integer(n), Mul(Integer(-1), q)), p), Integer(1)), Integer(0)), Unequal(Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Integer(0)), Unequal(Add(m, Integer(1)), Integer(n))))))
    rubi.add(rule1041)

    pattern1042 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Less(p_, Integer(-1)), Less(Add(m_, Mul(p_, q_)), Add(n_, Mul(Integer(-1), q_), Integer(-1)))), (B, n, q, c, x, A, m, j, b, p, a, r)))
    rule1042 = ReplacementRule(pattern1042, lambda B, n, q, c, x, A, m, j, b, p, a, r : Add(Mul(Mul(Integer(-1), Pow(x, Add(m, Mul(Integer(-1), q), Integer(1)))), Add(Mul(A, Pow(b, Integer(2))), Mul(Integer(-1), Mul(a, b, B)), Mul(Integer(-1), Mul(Integer(2), a, A, c)), Mul(Add(Mul(A, b), Mul(Integer(-1), Mul(Integer(2), a, B))), c, Pow(x, Add(n, Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, Add(n, Mul(Integer(-1), q)), Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), q))), Simp(Add(Mul(A, Pow(b, Integer(2)), Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1))), Mul(Integer(-1), Mul(a, b, B, Add(m, Mul(p, q), Integer(1)))), Mul(Integer(-1), Mul(Integer(2), a, A, c, Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1)))), Mul(Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Add(Mul(A, b), Mul(Integer(-1), Mul(Integer(2), a, B))), c, Pow(x, Add(n, Mul(Integer(-1), q))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1)))), x))))
    rubi.add(rule1042)

    pattern1043 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(Not(IntegerQ(p_)), RationalQ(m_, p_, q_), Less(p_, Integer(-1))), (B, q, c, x, A, m, j, p, a, r)))
    rule1043 = ReplacementRule(pattern1043, lambda B, q, c, x, A, m, j, p, a, r : With(List(Set(Integer(n), Add(q, r))), Condition(Add(Mul(Mul(Integer(-1), Pow(x, Add(m, Mul(Integer(-1), q), Integer(1)))), Add(Mul(A, c), Mul(B, c, Pow(x, Add(Integer(n), Mul(Integer(-1), q))))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(Integer(2), a, c, Add(Integer(n), Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(Integer(n), Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), q))), Simp(Add(Mul(A, c, Add(m, Mul(p, q), Mul(Integer(2), Add(Integer(n), Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1))), Mul(B, Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(3))), Integer(1)), c, Pow(x, Add(Integer(n), Mul(Integer(-1), q))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(1)))), x))), And(ZeroQ(Add(j, Mul(Integer(-1), Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), PositiveIntegerQ(Integer(n)), Less(Add(m, Mul(p, q)), Add(Integer(n), Mul(Integer(-1), q), Integer(-1)))))))
    rubi.add(rule1043)

    pattern1044 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Inequality(Integer(-1), Integer(LessEqual), p_, Integer(Less), Integer(0)), GreaterEqual(Add(m_, Mul(p_, q_)), Add(n_, Mul(Integer(-1), q_), Integer(-1))), Unequal(Add(m_, Mul(p_, q_), Mul(Add(n_, Mul(Integer(-1), q_)), Add(Mul(Integer(2), p_), Integer(1))), Integer(1)), Integer(0))), (B, n, q, c, x, A, m, j, b, p, a, r)))
    rule1044 = ReplacementRule(pattern1044, lambda B, n, q, c, x, A, m, j, b, p, a, r : Add(Mul(B, Pow(x, Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), n), q)), Simp(Add(Mul(a, B, Add(m, Mul(p, q), Mul(Integer(-1), n), q, Integer(1))), Mul(Add(Mul(b, B, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), p), Integer(1))), Mul(Integer(-1), Mul(A, c, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))))), Pow(x, Add(n, Mul(Integer(-1), q))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p)), x)))))
    rubi.add(rule1044)

    pattern1045 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(Not(IntegerQ(p_)), RationalQ(m_, p_, q_), Inequality(Integer(-1), Integer(LessEqual), p_, Integer(Less), Integer(0))), (B, q, c, x, A, m, j, p, a, r)))
    rule1045 = ReplacementRule(pattern1045, lambda B, q, c, x, A, m, j, p, a, r : With(List(Set(Integer(n), Add(q, r))), Condition(Add(Mul(B, Pow(x, Add(m, Mul(Integer(-1), Integer(n)), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(c, Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(c, Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Integer(n)), q)), Simp(Add(Mul(a, B, Add(m, Mul(p, q), Mul(Integer(-1), Integer(n)), q, Integer(1))), Mul(Integer(-1), Mul(A, c, Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Pow(x, Add(Integer(n), Mul(Integer(-1), q)))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), p)), x)))), And(ZeroQ(Add(j, Mul(Integer(-1), Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), PositiveIntegerQ(Integer(n)), GreaterEqual(Add(m, Mul(p, q)), Add(Integer(n), Mul(Integer(-1), q), Integer(-1))), Unequal(Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Integer(0))))))
    rubi.add(rule1045)

    pattern1046 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(r_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(j_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), Not(IntegerQ(p_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Or(Inequality(Integer(-1), Integer(LessEqual), p_, Integer(Less), Integer(0)), Equal(Add(m_, Mul(p_, q_), Mul(Add(n_, Mul(Integer(-1), q_)), Add(Mul(Integer(2), p_), Integer(1))), Integer(1)), Integer(0))), LessEqual(Add(m_, Mul(p_, q_)), Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_)))), Unequal(Add(m_, Mul(p_, q_), Integer(1)), Integer(0))), (B, n, q, c, x, A, m, j, b, p, a, r)))
    rule1046 = ReplacementRule(pattern1046, lambda B, n, q, c, x, A, m, j, b, p, a, r : Add(Mul(A, Pow(x, Add(m, Mul(Integer(-1), q), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(a, Add(m, Mul(p, q), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, Add(m, Mul(p, q), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, n, Mul(Integer(-1), q))), Simp(Add(Mul(a, B, Add(m, Mul(p, q), Integer(1))), Mul(Integer(-1), Mul(A, b, Add(m, Mul(p, q), Mul(Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1)))), Mul(Integer(-1), Mul(A, c, Add(m, Mul(p, q), Mul(Integer(2), Add(n, Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1)), Pow(x, Add(n, Mul(Integer(-1), q)))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p)), x))))
    rubi.add(rule1046)

    pattern1047 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), cons(And(Not(IntegerQ(p_)), RationalQ(m_, p_, q_)), (B, q, c, x, A, m, j, p, a, r)))
    rule1047 = ReplacementRule(pattern1047, lambda B, q, c, x, A, m, j, p, a, r : With(List(Set(Integer(n), Add(q, r))), Condition(Add(Mul(A, Pow(x, Add(m, Mul(Integer(-1), q), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), Add(p, Integer(1))), Pow(Mul(a, Add(m, Mul(p, q), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, Add(m, Mul(p, q), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(m, Integer(n), Mul(Integer(-1), q))), Simp(Add(Mul(a, B, Add(m, Mul(p, q), Integer(1))), Mul(Integer(-1), Mul(A, c, Add(m, Mul(p, q), Mul(Integer(2), Add(Integer(n), Mul(Integer(-1), q)), Add(p, Integer(1))), Integer(1)), Pow(x, Add(Integer(n), Mul(Integer(-1), q)))))), x), Pow(Add(Mul(a, Pow(x, q)), Mul(c, Pow(x, Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), p)), x))), And(ZeroQ(Add(j, Mul(Integer(-1), Add(Mul(Integer(2), Integer(n)), Mul(Integer(-1), q))))), PositiveIntegerQ(Integer(n)), Or(Inequality(Integer(-1), Integer(LessEqual), p, Integer(Less), Integer(0)), Equal(Add(m, Mul(p, q), Mul(Add(Integer(n), Mul(Integer(-1), q)), Add(Mul(Integer(2), p), Integer(1))), Integer(1)), Integer(0))), LessEqual(Add(m, Mul(p, q)), Mul(Integer(-1), Add(Integer(n), Mul(Integer(-1), q)))), Unequal(Add(m, Mul(p, q), Integer(1)), Integer(0))))))
    rubi.add(rule1047)

    pattern1048 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1))))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1))))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(ZeroQ(Add(j_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), PosQ(Add(n_, Mul(Integer(-1), q_))), Or(ZeroQ(Add(m_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(n_, Integer(-3))), ZeroQ(Add(q_, Integer(-1)))), (n, q, c, x, A, m, j, b, B, r, a)))
    rule1048 = ReplacementRule(pattern1048, lambda n, q, c, x, A, m, j, b, B, r, a : Mul(Pow(x, Mul(q, Pow(Integer(2), Integer(-1)))), Mul(Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q))))))), Pow(Sqrt(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q)))))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(Integer(-1), Mul(q, Pow(Integer(2), Integer(-1)))))), Mul(Add(A, Mul(B, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), q)))), Mul(c, Pow(x, Mul(Integer(2), Add(n, Mul(Integer(-1), q))))))), Integer(-1)))), x)))
    rubi.add(rule1048)

    pattern1049 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('k', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, q_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(j, x), FreeQ(k, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(q_, Mul(Integer(-1), Add(k_, Mul(Integer(-1), j_))))), ZeroQ(Add(n_, Mul(Integer(-1), Add(Mul(Integer(2), k_), Mul(Integer(-1), j_))))), Not(IntegerQ(p_)), PosQ(Add(k_, Mul(Integer(-1), j_)))), (B, n, q, c, x, A, m, j, b, p, a, k)))
    rule1049 = ReplacementRule(pattern1049, lambda B, n, q, c, x, A, m, j, b, p, a, k : Mul(Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, k)), Mul(c, Pow(x, n))), p), Pow(Mul(Pow(x, Mul(j, p)), Pow(Add(a, Mul(b, Pow(x, Add(k, Mul(Integer(-1), j)))), Mul(c, Pow(x, Mul(Integer(2), Add(k, Mul(Integer(-1), j)))))), p)), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(j, p))), Add(A, Mul(B, Pow(x, Add(k, Mul(Integer(-1), j))))), Pow(Add(a, Mul(b, Pow(x, Add(k, Mul(Integer(-1), j)))), Mul(c, Pow(x, Mul(Integer(2), Add(k, Mul(Integer(-1), j)))))), p)), x)))
    rubi.add(rule1049)

    pattern1050 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(u_, Wildcard.optional('j', Integer(1))))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(u_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(u_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(u_, Wildcard.optional('r', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(j_, Mul(Integer(-1), Add(n_, Mul(Integer(-1), q_))))), ZeroQ(Add(r_, Mul(Integer(-1), Add(Mul(Integer(2), n_), Mul(Integer(-1), q_))))), LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (n, q, c, x, A, m, u, j, b, p, B, r, a)))
    rule1050 = ReplacementRule(pattern1050, lambda n, q, c, x, A, m, u, j, b, p, B, r, a : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(x, m), Add(A, Mul(B, Pow(x, Add(n, Mul(Integer(-1), q))))), Pow(Add(Mul(a, Pow(x, q)), Mul(b, Pow(x, n)), Mul(c, Pow(x, Add(Mul(Integer(2), n), Mul(Integer(-1), q))))), p)), x), x, u)))
    rubi.add(rule1050)

    pattern1051 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n_)), q_))), Wildcard.optional('p', Integer(1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(q, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Mul(n_, q_))), (n, q, c, x, b, p, a)))
    rule1051 = ReplacementRule(pattern1051, lambda n, q, c, x, b, p, a : Mul(Mul(x, Pow(Pow(Mul(c, Pow(x, n)), Mul(Integer(1), Pow(n, Integer(-1)))), Integer(-1))), Subst(Int(Pow(Add(a, Mul(b, Pow(x, Mul(n, q)))), p), x), x, Pow(Mul(c, Pow(x, n)), Mul(Integer(1), Pow(n, Integer(-1)))))))
    rubi.add(rule1051)

    pattern1052 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n_)), q_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(IntegerQ(Mul(n_, q_)), IntegerQ(m_)), (n, q, c, x, m, b, p, a)))
    rule1052 = ReplacementRule(pattern1052, lambda n, q, c, x, m, b, p, a : Mul(Mul(Pow(x, Add(m, Integer(1))), Pow(Pow(Mul(c, Pow(x, n)), Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, Mul(n, q)))), p)), x), x, Pow(Mul(c, Pow(x, n)), Mul(Integer(1), Pow(n, Integer(-1)))))))
    rubi.add(rule1052)

    pattern1053 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('r', Integer(1)))), p_), Pow(Mul(Wildcard.optional('f', Integer(1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), s_)), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), FreeQ(s, x), cons(True, (e, n, f, c, x, q, m, b, p, a, s, d, r)))
    rule1053 = ReplacementRule(pattern1053, lambda e, n, f, c, x, q, m, b, p, a, s, d, r : Mul(Pow(Mul(e, Pow(Add(a, Mul(b, Pow(x, n))), r)), p), Mul(Pow(Mul(f, Pow(Add(c, Mul(d, Pow(x, n))), s)), q), Pow(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Mul(p, r)), Pow(Add(c, Mul(d, Pow(x, n))), Mul(q, s))), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), Mul(p, r)), Pow(Add(c, Mul(d, Pow(x, n))), Mul(q, s))), x)))
    rubi.add(rule1053)

    pattern1054 = Pattern(Int(Mul(Wildcard.optional('u', Integer(1)), Pow(Mul(Wildcard.optional('e', Integer(1)), Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Integer(-1))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))))), (e, n, c, x, u, b, p, a, d)))
    rule1054 = ReplacementRule(pattern1054, lambda e, n, c, x, u, b, p, a, d : Mul(Pow(Mul(b, Mul(e, Pow(d, Integer(-1)))), p), Int(u, x)))
    rubi.add(rule1054)

    pattern1055 = Pattern(Int(Mul(Wildcard.optional('u', Integer(1)), Pow(Mul(Wildcard.optional('e', Integer(1)), Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Integer(-1))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), cons(And(PositiveQ(Mul(b_, d_, e_)), PositiveQ(Add(c_, Mul(Integer(-1), Mul(a_, Mul(d_, Pow(b_, Integer(-1)))))))), (e, n, c, x, u, b, p, a, d)))
    rule1055 = ReplacementRule(pattern1055, lambda e, n, c, x, u, b, p, a, d : Int(Mul(u, Mul(Pow(Mul(e, Add(a, Mul(b, Pow(x, n)))), p), Pow(Pow(Add(c, Mul(d, Pow(x, n))), p), Integer(-1)))), x))
    rubi.add(rule1055)

    pattern1056 = Pattern(Int(Pow(Mul(Wildcard.optional('e', Integer(1)), Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Integer(-1))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(FractionQ(p_), IntegerQ(Mul(Integer(1), Pow(n_, Integer(-1))))), (e, n, c, x, b, p, a, d)))
    rule1056 = ReplacementRule(pattern1056, lambda e, n, c, x, b, p, a, d : With(List(Set(Integer(q), Denominator(p))), Mul(Integer(q), e, Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(q), Add(p, Integer(1))), Integer(-1))), Mul(Pow(Add(Mul(Mul(Integer(-1), a), e), Mul(c, Pow(x, Integer(q)))), Add(Mul(Integer(1), Pow(n, Integer(-1))), Integer(-1))), Pow(Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(d, Pow(x, Integer(q))))), Add(Mul(Integer(1), Pow(n, Integer(-1))), Integer(1))), Integer(-1)))), x), x, Pow(Mul(e, Mul(Add(a, Mul(b, Pow(x, n))), Pow(Add(c, Mul(d, Pow(x, n))), Integer(-1)))), Mul(Integer(1), Pow(Integer(q), Integer(-1))))))))
    rubi.add(rule1056)

    pattern1057 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Integer(-1))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(FractionQ(p_), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (e, n, c, x, m, b, p, a, d)))
    rule1057 = ReplacementRule(pattern1057, lambda e, n, c, x, m, b, p, a, d : With(List(Set(Integer(q), Denominator(p))), Mul(Integer(q), e, Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(q), Add(p, Integer(1))), Integer(-1))), Mul(Pow(Add(Mul(Mul(Integer(-1), a), e), Mul(c, Pow(x, Integer(q)))), Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), Pow(Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(d, Pow(x, Integer(q))))), Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(1))), Integer(-1)))), x), x, Pow(Mul(e, Mul(Add(a, Mul(b, Pow(x, n))), Pow(Add(c, Mul(d, Pow(x, n))), Integer(-1)))), Mul(Integer(1), Pow(Integer(q), Integer(-1))))))))
    rubi.add(rule1057)

    pattern1058 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('r', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Integer(-1))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PolynomialQ(u_, x_), FractionQ(p_), IntegerQ(Mul(Integer(1), Pow(n_, Integer(-1)))), IntegerQ(r_)), (e, n, c, x, u, b, p, a, d, r)))
    rule1058 = ReplacementRule(pattern1058, lambda e, n, c, x, u, b, p, a, d, r : With(List(Set(Integer(q), Denominator(p))), Mul(Integer(q), e, Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(n, Integer(-1))), Subst(Int(SimplifyIntegrand(Mul(Pow(x, Add(Mul(Integer(q), Add(p, Integer(1))), Integer(-1))), Mul(Pow(Add(Mul(Mul(Integer(-1), a), e), Mul(c, Pow(x, Integer(q)))), Add(Mul(Integer(1), Pow(n, Integer(-1))), Integer(-1))), Pow(Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(d, Pow(x, Integer(q))))), Add(Mul(Integer(1), Pow(n, Integer(-1))), Integer(1))), Integer(-1))), Pow(ReplaceAll(u, Rule(x, Mul(Pow(Add(Mul(Mul(Integer(-1), a), e), Mul(c, Pow(x, Integer(q)))), Mul(Integer(1), Pow(n, Integer(-1)))), Pow(Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(d, Pow(x, Integer(q))))), Mul(Integer(1), Pow(n, Integer(-1)))), Integer(-1))))), r)), x), x), x, Pow(Mul(e, Mul(Add(a, Mul(b, Pow(x, n))), Pow(Add(c, Mul(d, Pow(x, n))), Integer(-1)))), Mul(Integer(1), Pow(Integer(q), Integer(-1))))))))
    rubi.add(rule1058)

    pattern1059 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('r', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Integer(-1))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(PolynomialQ(u_, x_), FractionQ(p_), IntegerQ(Mul(Integer(1), Pow(n_, Integer(-1)))), IntegersQ(m_, r_)), (e, n, c, x, m, u, b, p, a, d, r)))
    rule1059 = ReplacementRule(pattern1059, lambda e, n, c, x, m, u, b, p, a, d, r : With(List(Set(Integer(q), Denominator(p))), Mul(Integer(q), e, Mul(Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(n, Integer(-1))), Subst(Int(SimplifyIntegrand(Mul(Pow(x, Add(Mul(Integer(q), Add(p, Integer(1))), Integer(-1))), Mul(Pow(Add(Mul(Mul(Integer(-1), a), e), Mul(c, Pow(x, Integer(q)))), Add(Mul(Add(m, Integer(1)), Pow(n, Integer(-1))), Integer(-1))), Pow(Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(d, Pow(x, Integer(q))))), Add(Mul(Add(m, Integer(1)), Pow(n, Integer(-1))), Integer(1))), Integer(-1))), Pow(ReplaceAll(u, Rule(x, Mul(Pow(Add(Mul(Mul(Integer(-1), a), e), Mul(c, Pow(x, Integer(q)))), Mul(Integer(1), Pow(n, Integer(-1)))), Pow(Pow(Add(Mul(b, e), Mul(Integer(-1), Mul(d, Pow(x, Integer(q))))), Mul(Integer(1), Pow(n, Integer(-1)))), Integer(-1))))), r)), x), x), x, Pow(Mul(e, Mul(Add(a, Mul(b, Pow(x, n))), Pow(Add(c, Mul(d, Pow(x, n))), Integer(-1)))), Mul(Integer(1), Pow(Integer(q), Integer(-1))))))))
    rubi.add(rule1059)

    pattern1060 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(-1))), n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(True, (n, c, x, b, p, a)))
    rule1060 = ReplacementRule(pattern1060, lambda n, c, x, b, p, a : Mul(Mul(Integer(-1), c), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Pow(x, Integer(2)), Integer(-1))), x), x, Mul(c, Pow(x, Integer(-1))))))
    rubi.add(rule1060)

    pattern1061 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(-1))), n_))), Wildcard.optional('p', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(m_)), (n, c, x, m, b, p, a)))
    rule1061 = ReplacementRule(pattern1061, lambda n, c, x, m, b, p, a : Mul(Mul(Integer(-1), Pow(c, Add(m, Integer(1)))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(c, Pow(x, Integer(-1))))))
    rubi.add(rule1061)

    pattern1062 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(-1))), n_))), Wildcard.optional('p', Integer(1))), Pow(Mul(Wildcard.optional('d', Integer(1)), x_), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_))), (n, c, x, m, b, p, a, d)))
    rule1062 = ReplacementRule(pattern1062, lambda n, c, x, m, b, p, a, d : Mul(Mul(Integer(-1), c), Pow(Mul(d, x), m), Pow(Mul(c, Pow(x, Integer(-1))), m), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(c, Pow(x, Integer(-1))))))
    rubi.add(rule1062)

    pattern1063 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(-1))), Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(-1))), n_))), Wildcard.optional('p', Integer(1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_))))), (n, c, x, n2, b, p, a, d)))
    rule1063 = ReplacementRule(pattern1063, lambda n, c, x, n2, b, p, a, d : Mul(Mul(Integer(-1), d), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Pow(x, Integer(2)), Integer(-1))), x), x, Mul(d, Pow(x, Integer(-1))))))
    rubi.add(rule1063)

    pattern1064 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(-1))), Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(-1))), n_))), Wildcard.optional('p', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), IntegerQ(m_)), (n, c, x, n2, m, b, p, a, d)))
    rule1064 = ReplacementRule(pattern1064, lambda n, c, x, n2, m, b, p, a, d : Mul(Mul(Integer(-1), Pow(d, Add(m, Integer(1)))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(d, Pow(x, Integer(-1))))))
    rubi.add(rule1064)

    pattern1065 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(-1))), Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(-1))), n_))), Wildcard.optional('p', Integer(1))), Pow(Mul(Wildcard.optional('e', Integer(1)), x_), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), Not(IntegerQ(m_))), (e, n, c, x, n2, m, b, p, a, d)))
    rule1065 = ReplacementRule(pattern1065, lambda e, n, c, x, n2, m, b, p, a, d : Mul(Mul(Integer(-1), d), Pow(Mul(e, x), m), Pow(Mul(d, Pow(x, Integer(-1))), m), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(d, Pow(x, Integer(-1))))))
    rubi.add(rule1065)

    pattern1066 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(-1))), n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(2), n_))), IntegerQ(Mul(Integer(2), n_))), (n, c, x, n2, b, p, a, d)))
    rule1066 = ReplacementRule(pattern1066, lambda n, c, x, n2, b, p, a, d : Mul(Mul(Integer(-1), d), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(Mul(c, Pow(Pow(d, Mul(Integer(2), n)), Integer(-1))), Pow(x, Mul(Integer(2), n)))), p), Pow(Pow(x, Integer(2)), Integer(-1))), x), x, Mul(d, Pow(x, Integer(-1))))))
    rubi.add(rule1066)

    pattern1067 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(-1))), n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(2), n_))), IntegerQ(Mul(Integer(2), n_)), IntegerQ(m_)), (n, c, x, m, n2, b, p, a, d)))
    rule1067 = ReplacementRule(pattern1067, lambda n, c, x, m, n2, b, p, a, d : Mul(Mul(Integer(-1), Pow(d, Add(m, Integer(1)))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(Mul(c, Pow(Pow(d, Mul(Integer(2), n)), Integer(-1))), Pow(x, Mul(Integer(2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(d, Pow(x, Integer(-1))))))
    rubi.add(rule1067)

    pattern1068 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(-1))), n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(2), n_))), Not(IntegerQ(m_)), IntegerQ(Mul(Integer(2), n_))), (e, n, c, x, n2, m, b, p, a, d)))
    rule1068 = ReplacementRule(pattern1068, lambda e, n, c, x, n2, m, b, p, a, d : Mul(Mul(Integer(-1), d), Pow(Mul(e, x), m), Pow(Mul(d, Pow(x, Integer(-1))), m), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(Mul(c, Pow(Pow(d, Mul(Integer(2), n)), Integer(-1))), Pow(x, Mul(Integer(2), n)))), p), Pow(Pow(x, Add(m, Integer(2))), Integer(-1))), x), x, Mul(d, Pow(x, Integer(-1))))))
    rubi.add(rule1068)

    pattern1069 = Pattern(Int(Pow(u_, m_), x_), FreeQ(m, x), cons(And(LinearQ(u_, x_), Not(LinearMatchQ(u_, x_))), (m, u, x)))
    rule1069 = ReplacementRule(pattern1069, lambda m, u, x : Int(Pow(ExpandToSum(u, x), m), x))
    rubi.add(rule1069)

    pattern1070 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(v_, Wildcard.optional('n', Integer(1)))), x_), FreeQ(m, x), FreeQ(n, x), cons(And(LinearQ(List(u_, v_), x_), Not(LinearMatchQ(List(u_, v_), x_))), (n, x, m, u, v)))
    rule1070 = ReplacementRule(pattern1070, lambda n, x, m, u, v : Int(Mul(Pow(ExpandToSum(u, x), m), Pow(ExpandToSum(v, x), n)), x))
    rubi.add(rule1070)

    pattern1071 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(v_, Wildcard.optional('n', Integer(1))), Pow(w_, Wildcard.optional('p', Integer(1)))), x_), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(List(u_, v_, w_), x_), Not(LinearMatchQ(List(u_, v_, w_), x_))), (n, x, m, u, p, w, v)))
    rule1071 = ReplacementRule(pattern1071, lambda n, x, m, u, p, w, v : Int(Mul(Pow(ExpandToSum(u, x), m), Pow(ExpandToSum(v, x), n), Pow(ExpandToSum(w, x), p)), x))
    rubi.add(rule1071)

    pattern1072 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(v_, Wildcard.optional('n', Integer(1))), Pow(w_, Wildcard.optional('p', Integer(1))), Pow(z_, Wildcard.optional('q', Integer(1)))), x_), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(List(u_, v_, w_, z_), x_), Not(LinearMatchQ(List(u_, v_, w_, z_), x_))), (n, q, x, z, m, u, p, w, v)))
    rule1072 = ReplacementRule(pattern1072, lambda n, q, x, z, m, u, p, w, v : Int(Mul(Pow(ExpandToSum(u, x), m), Pow(ExpandToSum(v, x), n), Pow(ExpandToSum(w, x), p), Pow(ExpandToSum(z, x), q)), x))
    rubi.add(rule1072)

    pattern1073 = Pattern(Int(Pow(u_, p_), x_), FreeQ(p, x), cons(And(QuadraticQ(u_, x_), Not(QuadraticMatchQ(u_, x_))), (p, u, x)))
    rule1073 = ReplacementRule(pattern1073, lambda p, u, x : Int(Pow(ExpandToSum(u, x), p), x))
    rubi.add(rule1073)

    pattern1074 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(v_, Wildcard.optional('p', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), QuadraticQ(v_, x_), Not(And(LinearMatchQ(u_, x_), QuadraticMatchQ(v_, x_)))), (x, m, u, p, v)))
    rule1074 = ReplacementRule(pattern1074, lambda x, m, u, p, v : Int(Mul(Pow(ExpandToSum(u, x), m), Pow(ExpandToSum(v, x), p)), x))
    rubi.add(rule1074)

    pattern1075 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(v_, Wildcard.optional('n', Integer(1))), Pow(w_, Wildcard.optional('p', Integer(1)))), x_), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(List(u_, v_), x_), QuadraticQ(w_, x_), Not(And(LinearMatchQ(List(u_, v_), x_), QuadraticMatchQ(w_, x_)))), (n, x, m, u, p, w, v)))
    rule1075 = ReplacementRule(pattern1075, lambda n, x, m, u, p, w, v : Int(Mul(Pow(ExpandToSum(u, x), m), Pow(ExpandToSum(v, x), n), Pow(ExpandToSum(w, x), p)), x))
    rubi.add(rule1075)

    pattern1076 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(v_, Wildcard.optional('q', Integer(1)))), x_), FreeQ(p, x), FreeQ(q, x), cons(And(QuadraticQ(List(u_, v_), x_), Not(QuadraticMatchQ(List(u_, v_), x_))), (q, x, u, p, v)))
    rule1076 = ReplacementRule(pattern1076, lambda q, x, u, p, v : Int(Mul(Pow(ExpandToSum(u, x), p), Pow(ExpandToSum(v, x), q)), x))
    rubi.add(rule1076)

    pattern1077 = Pattern(Int(Pow(u_, p_), x_), FreeQ(p, x), cons(And(BinomialQ(u_, x_), Not(BinomialMatchQ(u_, x_))), (p, u, x)))
    rule1077 = ReplacementRule(pattern1077, lambda p, u, x : Int(Pow(ExpandToSum(u, x), p), x))
    rubi.add(rule1077)

    pattern1078 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1)))), x_), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(BinomialQ(u_, x_), Not(BinomialMatchQ(u_, x_))), (c, x, m, u, p)))
    rule1078 = ReplacementRule(pattern1078, lambda c, x, m, u, p : Int(Mul(Pow(Mul(c, x), m), Pow(ExpandToSum(u, x), p)), x))
    rubi.add(rule1078)

    pattern1079 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(v_, Wildcard.optional('q', Integer(1)))), x_), FreeQ(p, x), FreeQ(q, x), cons(And(BinomialQ(List(u_, v_), x_), ZeroQ(Add(BinomialDegree(u_, x_), Mul(Integer(-1), BinomialDegree(v_, x_)))), Not(BinomialMatchQ(List(u_, v_), x_))), (q, x, u, p, v)))
    rule1079 = ReplacementRule(pattern1079, lambda q, x, u, p, v : Int(Mul(Pow(ExpandToSum(u, x), p), Pow(ExpandToSum(v, x), q)), x))
    rubi.add(rule1079)

    pattern1080 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(v_, Wildcard.optional('q', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(BinomialQ(List(u_, v_), x_), ZeroQ(Add(BinomialDegree(u_, x_), Mul(Integer(-1), BinomialDegree(v_, x_)))), Not(BinomialMatchQ(List(u_, v_), x_))), (q, x, m, u, p, v)))
    rule1080 = ReplacementRule(pattern1080, lambda q, x, m, u, p, v : Int(Mul(Pow(x, m), Pow(ExpandToSum(u, x), p), Pow(ExpandToSum(v, x), q)), x))
    rubi.add(rule1080)

    pattern1081 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(v_, Wildcard.optional('p', Integer(1))), Pow(w_, Wildcard.optional('q', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(BinomialQ(List(u_, v_, w_), x_), ZeroQ(Add(BinomialDegree(u_, x_), Mul(Integer(-1), BinomialDegree(v_, x_)))), ZeroQ(Add(BinomialDegree(u_, x_), Mul(Integer(-1), BinomialDegree(w_, x_)))), Not(BinomialMatchQ(List(u_, v_, w_), x_))), (q, x, m, u, p, w, v)))
    rule1081 = ReplacementRule(pattern1081, lambda q, x, m, u, p, w, v : Int(Mul(Pow(ExpandToSum(u, x), m), Pow(ExpandToSum(v, x), p), Pow(ExpandToSum(w, x), q)), x))
    rubi.add(rule1081)

    pattern1082 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(v_, Wildcard.optional('q', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1))), Pow(z_, Wildcard.optional('r', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(BinomialQ(List(u_, v_, z_), x_), ZeroQ(Add(BinomialDegree(u_, x_), Mul(Integer(-1), BinomialDegree(v_, x_)))), ZeroQ(Add(BinomialDegree(u_, x_), Mul(Integer(-1), BinomialDegree(z_, x_)))), Not(BinomialMatchQ(List(u_, v_, z_), x_))), (q, x, z, m, u, p, v, r)))
    rule1082 = ReplacementRule(pattern1082, lambda q, x, z, m, u, p, v, r : Int(Mul(Pow(x, m), Pow(ExpandToSum(u, x), p), Pow(ExpandToSum(v, x), q), Pow(ExpandToSum(z, x), r)), x))
    rubi.add(rule1082)

    pattern1083 = Pattern(Int(Pow(u_, p_), x_), FreeQ(p, x), cons(And(GeneralizedBinomialQ(u_, x_), Not(GeneralizedBinomialMatchQ(u_, x_))), (p, u, x)))
    rule1083 = ReplacementRule(pattern1083, lambda p, u, x : Int(Pow(ExpandToSum(u, x), p), x))
    rubi.add(rule1083)

    pattern1084 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), cons(And(GeneralizedBinomialQ(u_, x_), Not(GeneralizedBinomialMatchQ(u_, x_))), (p, m, u, x)))
    rule1084 = ReplacementRule(pattern1084, lambda p, m, u, x : Int(Mul(Pow(x, m), Pow(ExpandToSum(u, x), p)), x))
    rubi.add(rule1084)

    pattern1085 = Pattern(Int(Pow(u_, p_), x_), FreeQ(p, x), cons(And(TrinomialQ(u_, x_), Not(TrinomialMatchQ(u_, x_))), (p, u, x)))
    rule1085 = ReplacementRule(pattern1085, lambda p, u, x : Int(Pow(ExpandToSum(u, x), p), x))
    rubi.add(rule1085)

    pattern1086 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1)))), x_), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), cons(And(TrinomialQ(u_, x_), Not(TrinomialMatchQ(u_, x_))), (x, m, u, p, d)))
    rule1086 = ReplacementRule(pattern1086, lambda x, m, u, p, d : Int(Mul(Pow(Mul(d, x), m), Pow(ExpandToSum(u, x), p)), x))
    rubi.add(rule1086)

    pattern1087 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('q', Integer(1))), Pow(v_, Wildcard.optional('p', Integer(1)))), x_), FreeQ(p, x), FreeQ(q, x), cons(And(BinomialQ(u_, x_), TrinomialQ(v_, x_), Not(And(BinomialMatchQ(u_, x_), TrinomialMatchQ(v_, x_)))), (q, x, u, p, v)))
    rule1087 = ReplacementRule(pattern1087, lambda q, x, u, p, v : Int(Mul(Pow(ExpandToSum(u, x), q), Pow(ExpandToSum(v, x), p)), x))
    rubi.add(rule1087)

    pattern1088 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('q', Integer(1))), Pow(v_, Wildcard.optional('p', Integer(1)))), x_), FreeQ(p, x), FreeQ(q, x), cons(And(BinomialQ(u_, x_), BinomialQ(v_, x_), Not(And(BinomialMatchQ(u_, x_), BinomialMatchQ(v_, x_)))), (q, x, u, p, v)))
    rule1088 = ReplacementRule(pattern1088, lambda q, x, u, p, v : Int(Mul(Pow(ExpandToSum(u, x), q), Pow(ExpandToSum(v, x), p)), x))
    rubi.add(rule1088)

    pattern1089 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1))), Pow(z_, Wildcard.optional('q', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(BinomialQ(z_, x_), TrinomialQ(u_, x_), Not(And(BinomialMatchQ(z_, x_), TrinomialMatchQ(u_, x_)))), (q, x, z, m, u, p)))
    rule1089 = ReplacementRule(pattern1089, lambda q, x, z, m, u, p : Int(Mul(Pow(x, m), Pow(ExpandToSum(z, x), q), Pow(ExpandToSum(u, x), p)), x))
    rubi.add(rule1089)

    pattern1090 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1))), Pow(z_, Wildcard.optional('q', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(BinomialQ(z_, x_), BinomialQ(u_, x_), Not(And(BinomialMatchQ(z_, x_), BinomialMatchQ(u_, x_)))), (q, x, z, m, u, p)))
    rule1090 = ReplacementRule(pattern1090, lambda q, x, z, m, u, p : Int(Mul(Pow(x, m), Pow(ExpandToSum(z, x), q), Pow(ExpandToSum(u, x), p)), x))
    rubi.add(rule1090)

    pattern1091 = Pattern(Int(Pow(u_, p_), x_), FreeQ(p, x), cons(And(GeneralizedTrinomialQ(u_, x_), Not(GeneralizedTrinomialMatchQ(u_, x_))), (p, u, x)))
    rule1091 = ReplacementRule(pattern1091, lambda p, u, x : Int(Pow(ExpandToSum(u, x), p), x))
    rubi.add(rule1091)

    pattern1092 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), cons(And(GeneralizedTrinomialQ(u_, x_), Not(GeneralizedTrinomialMatchQ(u_, x_))), (p, m, u, x)))
    rule1092 = ReplacementRule(pattern1092, lambda p, m, u, x : Int(Mul(Pow(x, m), Pow(ExpandToSum(u, x), p)), x))
    rubi.add(rule1092)

    pattern1093 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), z_), x_), FreeQ(p, x), cons(And(BinomialQ(z_, x_), GeneralizedTrinomialQ(u_, x_), ZeroQ(Add(BinomialDegree(z_, x_), Mul(Integer(-1), GeneralizedTrinomialDegree(u_, x_)))), Not(And(BinomialMatchQ(z_, x_), GeneralizedTrinomialMatchQ(u_, x_)))), (p, u, x, z)))
    rule1093 = ReplacementRule(pattern1093, lambda p, u, x, z : Int(Mul(ExpandToSum(z, x), Pow(ExpandToSum(u, x), p)), x))
    rubi.add(rule1093)

    pattern1094 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', Integer(1))), Pow(x_, Wildcard.optional('m', Integer(1))), z_), x_), FreeQ(m, x), FreeQ(p, x), cons(And(BinomialQ(z_, x_), GeneralizedTrinomialQ(u_, x_), ZeroQ(Add(BinomialDegree(z_, x_), Mul(Integer(-1), GeneralizedTrinomialDegree(u_, x_)))), Not(And(BinomialMatchQ(z_, x_), GeneralizedTrinomialMatchQ(u_, x_)))), (x, z, m, u, p)))
    rule1094 = ReplacementRule(pattern1094, lambda x, z, m, u, p : Int(Mul(Pow(x, m), ExpandToSum(z, x), Pow(ExpandToSum(u, x), p)), x))
    rubi.add(rule1094)

    pattern1095 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Rational(Integer(-3), Integer(2))), Add(e_, Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(q_, Mul(Integer(-1), Mul(n_, Pow(Integer(4), Integer(-1)))))), ZeroQ(Add(r_, Mul(Integer(-1), Mul(Integer(3), Mul(n_, Pow(Integer(4), Integer(-1))))))), ZeroQ(Add(Mul(Integer(4), m_), Mul(Integer(-1), n_), Integer(4))), ZeroQ(Add(Mul(c_, e_), Mul(a_, h_)))), (f, n, q, c, g, x, e, m, a, h, r)))
    rule1095 = ReplacementRule(pattern1095, lambda f, n, q, c, g, x, e, m, a, h, r : Mul(Mul(Integer(-1), Add(Mul(Integer(2), a, g), Mul(Integer(4), a, h, Pow(x, Mul(n, Pow(Integer(4), Integer(-1))))), Mul(Integer(-1), Mul(Integer(2), c, f, Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))))), Pow(Mul(a, c, n, Sqrt(Add(a, Mul(c, Pow(x, n))))), Integer(-1))))
    rubi.add(rule1095)

    pattern1096 = Pattern(Int(Mul(Pow(Mul(d_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Rational(Integer(-3), Integer(2))), Add(e_, Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(Integer(4), m_), Mul(Integer(-1), n_), Integer(4))), ZeroQ(Add(q_, Mul(Integer(-1), Mul(n_, Pow(Integer(4), Integer(-1)))))), ZeroQ(Add(r_, Mul(Integer(-1), Mul(Integer(3), Mul(n_, Pow(Integer(4), Integer(-1))))))), ZeroQ(Add(Mul(c_, e_), Mul(a_, h_)))), (f, n, q, c, g, x, e, m, a, h, d, r)))
    rule1096 = ReplacementRule(pattern1096, lambda f, n, q, c, g, x, e, m, a, h, d, r : Mul(Mul(Pow(Mul(d, x), m), Pow(Pow(x, m), Integer(-1))), Int(Mul(Pow(x, m), Mul(Add(e, Mul(f, Pow(x, Mul(n, Pow(Integer(4), Integer(-1))))), Mul(g, Pow(x, Mul(Mul(Integer(3), n), Pow(Integer(4), Integer(-1))))), Mul(h, Pow(x, n))), Pow(Pow(Add(a, Mul(c, Pow(x, n))), Mul(Integer(3), Pow(Integer(2), Integer(-1)))), Integer(-1)))), x)))
    rubi.add(rule1096)

    pattern1097 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), cons(And(PolyQ(Pq_, x_), FractionQ(p_), NegativeIntegerQ(Add(m_, Integer(1)))), (c, x, m, b, p, Pq, a)))
    rule1097 = ReplacementRule(pattern1097, lambda c, x, m, b, p, Pq, a : With(List(Set(Integer(n), Denominator(p))), Mul(Mul(Integer(n), Pow(b, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Integer(n), p), Integer(n), Integer(-1))), Pow(Add(Mul(Mul(Integer(-1), a), Mul(c, Pow(b, Integer(-1)))), Mul(c, Mul(Pow(x, Integer(n)), Pow(b, Integer(-1))))), m), ReplaceAll(Pq, Rule(x, Add(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Pow(x, Integer(n)), Pow(b, Integer(-1))))))), x), x, Pow(Add(a, Mul(b, x)), Mul(Integer(1), Pow(Integer(n), Integer(-1))))))))
    rubi.add(rule1097)

    pattern1098 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(m_, Integer(1))), PositiveIntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), PolyQ(Pq_, Pow(x_, Add(m_, Integer(1))))), (n, x, m, b, p, Pq, a)))
    rule1098 = ReplacementRule(pattern1098, lambda n, x, m, b, p, Pq, a : Mul(Mul(Integer(1), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Mul(SubstFor(Pow(x, Add(m, Integer(1))), Pq, x), Pow(Add(a, Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), p)), x), x, Pow(x, Add(m, Integer(1))))))
    rubi.add(rule1098)

    pattern1099 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_, p_), NonzeroQ(Coeff(Pq_, x_, Add(n_, Integer(-1))))), (n, x, b, p, Pq, a)))
    rule1099 = ReplacementRule(pattern1099, lambda n, x, b, p, Pq, a : Add(Mul(Coeff(Pq, x, Add(n, Integer(-1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(b, n, Add(p, Integer(1))), Integer(-1)))), Int(Mul(ExpandToSum(Add(Pq, Mul(Integer(-1), Mul(Coeff(Pq, x, Add(n, Integer(-1))), Pow(x, Add(n, Integer(-1)))))), x), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1099)

    pattern1100 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(PolyQ(Pq_, x_), Or(PositiveIntegerQ(p_), ZeroQ(Add(n_, Integer(-1))))), (n, c, x, m, b, p, Pq, a)))
    rule1100 = ReplacementRule(pattern1100, lambda n, c, x, m, b, p, Pq, a : Int(ExpandIntegrand(Mul(Pow(Mul(c, x), m), Pq, Pow(Add(a, Mul(b, Pow(x, n))), p)), x), x))
    rubi.add(rule1100)

    pattern1101 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), cons(And(PolyQ(Pq_, x_), Or(PositiveIntegerQ(p_), ZeroQ(Add(n_, Integer(-1))))), (n, x, b, p, Pq, a)))
    rule1101 = ReplacementRule(pattern1101, lambda n, x, b, p, Pq, a : Int(ExpandIntegrand(Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n))), p)), x), x))
    rubi.add(rule1101)

    pattern1102 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, x, m, b, p, Pq, a)))
    rule1102 = ReplacementRule(pattern1102, lambda n, x, m, b, p, Pq, a : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), SubstFor(Pow(x, n), Pq, x), Pow(Add(a, Mul(b, x)), p)), x), x, Pow(x, n))))
    rubi.add(rule1102)

    pattern1103 = Pattern(Int(Mul(Pq_, Pow(Mul(c_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, c, x, m, b, p, Pq, a)))
    rule1103 = ReplacementRule(pattern1103, lambda n, c, x, m, b, p, Pq, a : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1103)

    pattern1104 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), cons(And(PolyQ(Pq_, x_), ZeroQ(Add(m_, Mul(Integer(-1), n_), Integer(1))), RationalQ(p_), Less(p_, Integer(-1))), (n, x, m, b, p, Pq, a)))
    rule1104 = ReplacementRule(pattern1104, lambda n, x, m, b, p, Pq, a : Add(Mul(Pq, Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(b, n, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(b, n, Add(p, Integer(1))), Integer(-1))), Int(Mul(D(Pq, x), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1)))), x)))))
    rubi.add(rule1104)

    pattern1105 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), ZeroQ(Coeff(Pq_, x_, Integer(0)))), (n, x, m, b, p, Pq, a, d)))
    rule1105 = ReplacementRule(pattern1105, lambda n, x, m, b, p, Pq, a, d : Mul(Mul(Integer(1), Pow(d, Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Integer(1))), ExpandToSum(Mul(Pq, Pow(x, Integer(-1))), x), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1105)

    pattern1106 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), ZeroQ(Coeff(Pq_, x_, Integer(0))), SumQ(Pq_)), (n, x, b, p, Pq, a)))
    rule1106 = ReplacementRule(pattern1106, lambda n, x, b, p, Pq, a : Int(Mul(x, ExpandToSum(Mul(Pq, Pow(x, Integer(-1))), x), Pow(Add(a, Mul(b, Pow(x, n))), p)), x))
    rubi.add(rule1106)

    pattern1107 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, Integer(0)), Less(Add(m_, Expon(Pq_, x_), Integer(1)), Integer(0))), (n, x, m, b, p, Pq, a)))
    rule1107 = ReplacementRule(pattern1107, lambda n, x, m, b, p, Pq, a : Module(List(Set(Integer(u), IntHide(Mul(Pow(x, m), Pq), x))), Add(Mul(Integer(u), Pow(Add(a, Mul(b, Pow(x, n))), p)), Mul(Integer(-1), Mul(b, n, p, Int(Mul(Pow(x, Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(-1))), ExpandToSum(Mul(Integer(u), Pow(Pow(x, Add(m, Integer(1))), Integer(-1))), x)), x))))))
    rubi.add(rule1107)

    pattern1108 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(Mul(Add(n_, Integer(-1)), Pow(Integer(2), Integer(-1)))), RationalQ(p_), Greater(p_, Integer(0))), (n, c, x, m, b, p, Pq, a)))
    rule1108 = ReplacementRule(pattern1108, lambda n, c, x, m, b, p, Pq, a : Module(List(Set(Integer(q), Expon(Pq, x)), Integer(i)), Add(Mul(Pow(Mul(c, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Sum(Mul(Coeff(Pq, x, Integer(i)), Mul(Pow(x, Add(Integer(i), Integer(1))), Pow(Add(m, Mul(n, p), Integer(i), Integer(1)), Integer(-1)))), List(Integer(i), Integer(0), Integer(q)))), Mul(a, n, p, Int(Mul(Pow(Mul(c, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(-1))), Sum(Mul(Coeff(Pq, x, Integer(i)), Mul(Pow(x, Integer(i)), Pow(Add(m, Mul(n, p), Integer(i), Integer(1)), Integer(-1)))), List(Integer(i), Integer(0), Integer(q)))), x)))))
    rubi.add(rule1108)

    pattern1109 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(Mul(Add(n_, Integer(-1)), Pow(Integer(2), Integer(-1)))), RationalQ(p_), Greater(p_, Integer(0))), (n, x, b, p, Pq, a)))
    rule1109 = ReplacementRule(pattern1109, lambda n, x, b, p, Pq, a : Module(List(Set(Integer(q), Expon(Pq, x)), Integer(i)), Add(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Sum(Mul(Coeff(Pq, x, Integer(i)), Mul(Pow(x, Add(Integer(i), Integer(1))), Pow(Add(Mul(n, p), Integer(i), Integer(1)), Integer(-1)))), List(Integer(i), Integer(0), Integer(q)))), Mul(a, n, p, Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(-1))), Sum(Mul(Coeff(Pq, x, Integer(i)), Mul(Pow(x, Integer(i)), Pow(Add(Mul(n, p), Integer(i), Integer(1)), Integer(-1)))), List(Integer(i), Integer(0), Integer(q)))), x)))))
    rubi.add(rule1109)

    pattern1110 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1))), (n, x, b, p, Pq, a)))
    rule1110 = ReplacementRule(pattern1110, lambda n, x, b, p, Pq, a : Module(List(Set(Integer(q), Expon(Pq, x)), Integer(i)), Condition(Add(Mul(Add(Mul(a, Coeff(Pq, x, Integer(q))), Mul(Integer(-1), Mul(b, x, ExpandToSum(Add(Pq, Mul(Integer(-1), Mul(Coeff(Pq, x, Integer(q)), Pow(x, Integer(q))))), x)))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, b, n, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1))), Integer(-1))), Int(Mul(Sum(Mul(Add(Mul(n, Add(p, Integer(1))), Integer(i), Integer(1)), Coeff(Pq, x, Integer(i)), Pow(x, Integer(i))), List(Integer(i), Integer(0), Add(Integer(q), Integer(-1)))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1)))), x))), Equal(Integer(q), Add(n, Integer(-1))))))
    rubi.add(rule1110)

    pattern1111 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1)), Less(Expon(Pq_, x_), Add(n_, Integer(-1)))), (n, x, b, p, Pq, a)))
    rule1111 = ReplacementRule(pattern1111, lambda n, x, b, p, Pq, a : Add(Mul(Mul(Integer(-1), x), Pq, Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, n, Add(p, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1))), Integer(-1))), Int(Mul(ExpandToSum(Add(Mul(n, Add(p, Integer(1)), Pq), D(Mul(x, Pq), x)), x), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1)))), x))))
    rubi.add(rule1111)

    pattern1112 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(ZeroQ(Add(Mul(b_, d_), Mul(a_, g_)))), (e, f, g, x, b, a, d)))
    rule1112 = ReplacementRule(pattern1112, lambda e, f, g, x, b, a, d : Mul(Mul(Integer(-1), Add(Mul(Integer(2), a, f), Mul(Integer(4), a, g, x), Mul(Integer(-1), Mul(Integer(2), b, e, Pow(x, Integer(2)))))), Pow(Mul(Integer(4), a, b, Sqrt(Add(a, Mul(b, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1112)

    pattern1113 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), cons(And(ZeroQ(Add(Mul(b_, d_), Mul(a_, g_)))), (f, x, g, b, a, d)))
    rule1113 = ReplacementRule(pattern1113, lambda f, x, g, b, a, d : Mul(Mul(Integer(-1), Add(f, Mul(Integer(2), g, x))), Pow(Mul(Integer(2), b, Sqrt(Add(a, Mul(b, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1113)

    pattern1114 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(g, x), cons(And(ZeroQ(Add(Mul(b_, d_), Mul(a_, g_)))), (e, x, g, b, a, d)))
    rule1114 = ReplacementRule(pattern1114, lambda e, x, g, b, a, d : Mul(Mul(Integer(-1), x), Mul(Add(Mul(Integer(2), a, g), Mul(Integer(-1), Mul(b, e, x))), Pow(Mul(Integer(2), a, b, Sqrt(Add(a, Mul(b, Pow(x, Integer(4)))))), Integer(-1)))))
    rubi.add(rule1114)

    pattern1115 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(e, x), FreeQ(f, x), FreeQ(h, x), cons(And(ZeroQ(Add(Mul(b_, e_), Mul(Integer(-1), Mul(Integer(3), a_, h_))))), (e, f, x, b, a, h)))
    rule1115 = ReplacementRule(pattern1115, lambda e, f, x, b, a, h : Mul(Mul(Integer(-1), Add(f, Mul(Integer(-1), Mul(Integer(2), h, Pow(x, Integer(3)))))), Pow(Mul(Integer(2), b, Sqrt(Add(a, Mul(b, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1115)

    pattern1116 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(e, x), FreeQ(h, x), cons(And(ZeroQ(Add(Mul(b_, e_), Mul(Integer(-1), Mul(Integer(3), a_, h_))))), (e, x, b, a, h)))
    rule1116 = ReplacementRule(pattern1116, lambda e, x, b, a, h : Mul(h, Mul(Pow(x, Integer(3)), Pow(Mul(b, Sqrt(Add(a, Mul(b, Pow(x, Integer(4)))))), Integer(-1)))))
    rubi.add(rule1116)

    pattern1117 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(4))), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Integer(6))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(ZeroQ(Add(Mul(b_, e_), Mul(Integer(-1), Mul(Integer(3), a_, h_)))), ZeroQ(Add(Mul(b_, d_), Mul(a_, g_)))), (e, f, g, x, b, a, h, d)))
    rule1117 = ReplacementRule(pattern1117, lambda e, f, g, x, b, a, h, d : Mul(Mul(Integer(-1), Add(Mul(a, f), Mul(Integer(-1), Mul(Integer(2), b, d, x)), Mul(Integer(-1), Mul(Integer(2), a, h, Pow(x, Integer(3)))))), Pow(Mul(Integer(2), a, b, Sqrt(Add(a, Mul(b, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1117)

    pattern1118 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(4))), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Integer(6))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(g, x), FreeQ(h, x), cons(And(ZeroQ(Add(Mul(b_, e_), Mul(Integer(-1), Mul(Integer(3), a_, h_)))), ZeroQ(Add(Mul(b_, d_), Mul(a_, g_)))), (e, g, x, b, a, h, d)))
    rule1118 = ReplacementRule(pattern1118, lambda e, g, x, b, a, h, d : Mul(x, Mul(Add(Mul(b, d), Mul(a, h, Pow(x, Integer(2)))), Pow(Mul(a, b, Sqrt(Add(a, Mul(b, Pow(x, Integer(4)))))), Integer(-1)))))
    rubi.add(rule1118)

    pattern1119 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1))), (n, x, b, p, Pq, a)))
    rule1119 = ReplacementRule(pattern1119, lambda n, x, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Condition(Module(List(Set(Integer(Q), PolynomialQuotient(Mul(Pow(b, Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1))), Pq), Add(a, Mul(b, Pow(x, n))), x)), Set(Integer(R), PolynomialRemainder(Mul(Pow(b, Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1))), Pq), Add(a, Mul(b, Pow(x, n))), x)), Integer(i)), Add(Mul(Mul(Integer(-1), x), Integer(R), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, n, Add(p, Integer(1)), Pow(b, Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Pow(b, Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), ExpandToSum(Add(Mul(a, n, Add(p, Integer(1)), Integer(Q)), Mul(n, Add(p, Integer(1)), Integer(R)), D(Mul(x, Integer(R)), x)), x)), x)))), GreaterEqual(Integer(q), n))))
    rubi.add(rule1119)

    pattern1120 = Pattern(Int(Mul(Pq_, Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1)), NegativeIntegerQ(m_)), (n, x, m, b, p, Pq, a)))
    rule1120 = ReplacementRule(pattern1120, lambda n, x, m, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Module(List(Set(Integer(Q), PolynomialQuotient(Mul(a, Pow(b, Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1))), Pow(x, m), Pq), Add(a, Mul(b, Pow(x, n))), x)), Set(Integer(R), PolynomialRemainder(Mul(a, Pow(b, Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1))), Pow(x, m), Pq), Add(a, Mul(b, Pow(x, n))), x)), Integer(i)), Add(Mul(Mul(Integer(-1), x), Integer(R), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(Pow(a, Integer(2)), n, Add(p, Integer(1)), Pow(b, Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Pow(b, Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1)))), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), ExpandToSum(Add(Mul(n, Add(p, Integer(1)), Pow(x, Mul(Integer(-1), m)), Integer(Q)), Sum(Mul(Mul(Add(Mul(n, Add(p, Integer(1))), Integer(i), Integer(1)), Pow(a, Integer(-1))), Coeff(Integer(R), x, Integer(i)), Pow(x, Add(Integer(i), Mul(Integer(-1), m)))), List(Integer(i), Integer(0), Add(n, Integer(-1))))), x)), x))))))
    rubi.add(rule1120)

    pattern1121 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), PositiveIntegerQ(n_), IntegerQ(m_)), (n, x, m, b, p, Pq, a)))
    rule1121 = ReplacementRule(pattern1121, lambda n, x, m, b, p, Pq, a : With(List(Set(Integer(g), GCD(Add(m, Integer(1)), n))), Condition(Mul(Mul(Integer(1), Pow(Integer(g), Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, Integer(1)), Pow(Integer(g), Integer(-1))), Integer(-1))), ReplaceAll(Pq, Rule(x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1)))))), Pow(Add(a, Mul(b, Pow(x, Mul(n, Pow(Integer(g), Integer(-1)))))), p)), x), x, Pow(x, Integer(g)))), Unequal(Integer(g), Integer(1)))))
    rubi.add(rule1121)

    pattern1122 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(Mul(a_, Pow(B_, Integer(3))), Mul(Integer(-1), Mul(b_, Pow(A_, Integer(3))))))), (B, x, A, b, a)))
    rule1122 = ReplacementRule(pattern1122, lambda B, x, A, b, a : Mul(Mul(Pow(B, Integer(3)), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(A, Integer(2)), Mul(Integer(-1), Mul(A, B, x)), Mul(Pow(B, Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x)))
    rubi.add(rule1122)

    pattern1123 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), cons(And(NonzeroQ(Add(Mul(a_, Pow(B_, Integer(3))), Mul(Integer(-1), Mul(b_, Pow(A_, Integer(3)))))), PosQ(Mul(a_, Pow(b_, Integer(-1))))), (B, x, A, b, a)))
    rule1123 = ReplacementRule(pattern1123, lambda B, x, A, b, a : With(List(Set(Integer(r), Numerator(Rt(Mul(a, Pow(b, Integer(-1))), Integer(3)))), Set(Integer(s), Denominator(Rt(Mul(a, Pow(b, Integer(-1))), Integer(3))))), Add(Mul(Mul(Integer(-1), Integer(r)), Mul(Add(Mul(B, Integer(r)), Mul(Integer(-1), Mul(A, Integer(s)))), Pow(Mul(Integer(3), a, Integer(s)), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(r), Mul(Integer(s), x)), Integer(-1))), x)), Mul(Mul(Integer(r), Pow(Mul(Integer(3), a, Integer(s)), Integer(-1))), Int(Mul(Add(Mul(Integer(r), Add(Mul(B, Integer(r)), Mul(Integer(2), A, Integer(s)))), Mul(Integer(s), Add(Mul(B, Integer(r)), Mul(Integer(-1), Mul(A, Integer(s)))), x)), Pow(Add(Pow(Integer(r), Integer(2)), Mul(Integer(-1), Mul(Integer(r), Integer(s), x)), Mul(Pow(Integer(s), Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x)))))
    rubi.add(rule1123)

    pattern1124 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), cons(And(NonzeroQ(Add(Mul(a_, Pow(B_, Integer(3))), Mul(Integer(-1), Mul(b_, Pow(A_, Integer(3)))))), NegQ(Mul(a_, Pow(b_, Integer(-1))))), (B, x, A, b, a)))
    rule1124 = ReplacementRule(pattern1124, lambda B, x, A, b, a : With(List(Set(Integer(r), Numerator(Rt(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Integer(3)))), Set(Integer(s), Denominator(Rt(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Integer(3))))), Add(Mul(Integer(r), Mul(Add(Mul(B, Integer(r)), Mul(A, Integer(s))), Pow(Mul(Integer(3), a, Integer(s)), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(r), Mul(Integer(-1), Mul(Integer(s), x))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(r), Pow(Mul(Integer(3), a, Integer(s)), Integer(-1))), Int(Mul(Add(Mul(Integer(r), Add(Mul(B, Integer(r)), Mul(Integer(-1), Mul(Integer(2), A, Integer(s))))), Mul(Integer(-1), Mul(Integer(s), Add(Mul(B, Integer(r)), Mul(A, Integer(s))), x))), Pow(Add(Pow(Integer(r), Integer(2)), Mul(Integer(r), Integer(s), x), Mul(Pow(Integer(s), Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x))))))
    rubi.add(rule1124)

    pattern1125 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Pow(B_, Integer(2)), Mul(Integer(-1), Mul(A_, C_)))), ZeroQ(Add(Mul(b_, Pow(B_, Integer(3))), Mul(a_, Pow(C_, Integer(3)))))), (x, A, b, B, C, a)))
    rule1125 = ReplacementRule(pattern1125, lambda x, A, b, B, C, a : Mul(Mul(Mul(Integer(-1), Pow(C, Integer(2))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(B, Mul(Integer(-1), Mul(C, x))), Integer(-1))), x)))
    rubi.add(rule1125)

    pattern1126 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(A_, Pow(b_, Mul(Integer(2), Pow(Integer(3), Integer(-1))))), Mul(Integer(-1), Mul(Pow(a_, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(b_, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_)), Mul(Integer(-1), Mul(Integer(2), Pow(a_, Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, B, C, a)))
    rule1126 = ReplacementRule(pattern1126, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Mul(Pow(a, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(b, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Add(B, Mul(C, Integer(q))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1126)

    pattern1127 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Pow(a_, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(b_, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_), Mul(Integer(2), Pow(a_, Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_)))), (B, x, b, a, C)))
    rule1127 = ReplacementRule(pattern1127, lambda B, x, b, a, C : With(List(Set(Integer(q), Mul(Pow(a, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(b, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Add(B, Mul(C, Integer(q))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1127)

    pattern1128 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(A_, Pow(b_, Mul(Integer(2), Pow(Integer(3), Integer(-1))))), Mul(Integer(-1), Mul(Integer(2), Pow(a_, Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, a, C)))
    rule1128 = ReplacementRule(pattern1128, lambda x, A, b, a, C : With(List(Set(Integer(q), Mul(Pow(a, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(b, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(C, Mul(Integer(q), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1128)

    pattern1129 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(A_, Pow(Mul(Integer(-1), b_), Mul(Integer(2), Pow(Integer(3), Integer(-1))))), Mul(Integer(-1), Mul(Pow(Mul(Integer(-1), a_), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Mul(Integer(-1), b_), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_)), Mul(Integer(-1), Mul(Integer(2), Pow(Mul(Integer(-1), a_), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, B, C, a)))
    rule1129 = ReplacementRule(pattern1129, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Mul(Pow(Mul(Integer(-1), a), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Mul(Integer(-1), b), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Add(B, Mul(C, Integer(q))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1129)

    pattern1130 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Pow(Mul(Integer(-1), a_), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Mul(Integer(-1), b_), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_), Mul(Integer(2), Pow(Mul(Integer(-1), a_), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_)))), (B, x, b, a, C)))
    rule1130 = ReplacementRule(pattern1130, lambda B, x, b, a, C : With(List(Set(Integer(q), Mul(Pow(Mul(Integer(-1), a), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Mul(Integer(-1), b), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Add(B, Mul(C, Integer(q))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1130)

    pattern1131 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(A_, Pow(Mul(Integer(-1), b_), Mul(Integer(2), Pow(Integer(3), Integer(-1))))), Mul(Integer(-1), Mul(Integer(2), Pow(Mul(Integer(-1), a_), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, a, C)))
    rule1131 = ReplacementRule(pattern1131, lambda x, A, b, a, C : With(List(Set(Integer(q), Mul(Pow(Mul(Integer(-1), a), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Mul(Integer(-1), b), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(C, Mul(Integer(q), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1131)

    pattern1132 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(A_, Pow(b_, Mul(Integer(2), Pow(Integer(3), Integer(-1))))), Mul(Pow(Mul(Integer(-1), a_), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(b_, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_), Mul(Integer(-1), Mul(Integer(2), Pow(Mul(Integer(-1), a_), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, B, C, a)))
    rule1132 = ReplacementRule(pattern1132, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Mul(Pow(Mul(Integer(-1), a), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(b, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Add(B, Mul(Integer(-1), Mul(C, Integer(q)))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1132)

    pattern1133 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Pow(Mul(Integer(-1), a_), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(b_, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_), Mul(Integer(-1), Mul(Integer(2), Pow(Mul(Integer(-1), a_), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (B, x, b, a, C)))
    rule1133 = ReplacementRule(pattern1133, lambda B, x, b, a, C : With(List(Set(Integer(q), Mul(Pow(Mul(Integer(-1), a), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(b, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Add(B, Mul(Integer(-1), Mul(C, Integer(q)))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1133)

    pattern1134 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(A_, Pow(b_, Mul(Integer(2), Pow(Integer(3), Integer(-1))))), Mul(Integer(-1), Mul(Integer(2), Pow(Mul(Integer(-1), a_), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, a, C)))
    rule1134 = ReplacementRule(pattern1134, lambda x, A, b, a, C : With(List(Set(Integer(q), Mul(Pow(Mul(Integer(-1), a), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(b, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Integer(-1), Mul(C, Mul(Integer(q), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))))))
    rubi.add(rule1134)

    pattern1135 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(A_, Pow(Mul(Integer(-1), b_), Mul(Integer(2), Pow(Integer(3), Integer(-1))))), Mul(Pow(a_, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Mul(Integer(-1), b_), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_), Mul(Integer(-1), Mul(Integer(2), Pow(a_, Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, B, C, a)))
    rule1135 = ReplacementRule(pattern1135, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Mul(Pow(a, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Mul(Integer(-1), b), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Add(B, Mul(Integer(-1), Mul(C, Integer(q)))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1135)

    pattern1136 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Pow(a_, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Mul(Integer(-1), b_), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_), Mul(Integer(-1), Mul(Integer(2), Pow(a_, Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (B, x, b, a, C)))
    rule1136 = ReplacementRule(pattern1136, lambda B, x, b, a, C : With(List(Set(Integer(q), Mul(Pow(a, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Mul(Integer(-1), b), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Add(B, Mul(Integer(-1), Mul(C, Integer(q)))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1136)

    pattern1137 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(A_, Pow(Mul(Integer(-1), b_), Mul(Integer(2), Pow(Integer(3), Integer(-1))))), Mul(Integer(-1), Mul(Integer(2), Pow(a_, Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, a, C)))
    rule1137 = ReplacementRule(pattern1137, lambda x, A, b, a, C : With(List(Set(Integer(q), Mul(Pow(a, Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Pow(Mul(Integer(-1), b), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Integer(-1))))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Integer(-1), Mul(C, Mul(Integer(q), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))))))
    rubi.add(rule1137)

    pattern1138 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(Integer(-1), Mul(Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_)), Mul(Integer(-1), Mul(Integer(2), Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, B, C, a)))
    rule1138 = ReplacementRule(pattern1138, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Pow(Mul(a, Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Add(B, Mul(C, Integer(q))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1138)

    pattern1139 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_), Mul(Integer(2), Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_)))), (B, x, b, a, C)))
    rule1139 = ReplacementRule(pattern1139, lambda B, x, b, a, C : With(List(Set(Integer(q), Pow(Mul(a, Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Add(B, Mul(C, Integer(q))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1139)

    pattern1140 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(Integer(-1), Mul(Integer(2), Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, a, C)))
    rule1140 = ReplacementRule(pattern1140, lambda x, A, b, a, C : With(List(Set(Integer(q), Pow(Mul(a, Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(C, Mul(Integer(q), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1140)

    pattern1141 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(Integer(-1), Mul(Rt(Mul(a_, Pow(b_, Integer(-1))), Integer(3)), B_)), Mul(Integer(-1), Mul(Integer(2), Pow(Rt(Mul(a_, Pow(b_, Integer(-1))), Integer(3)), Integer(2)), C_))))), (x, A, b, B, C, a)))
    rule1141 = ReplacementRule(pattern1141, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Rt(Mul(a, Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Add(B, Mul(C, Integer(q))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1141)

    pattern1142 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Rt(Mul(a_, Pow(b_, Integer(-1))), Integer(3)), B_), Mul(Integer(2), Pow(Rt(Mul(a_, Pow(b_, Integer(-1))), Integer(3)), Integer(2)), C_)))), (B, x, b, a, C)))
    rule1142 = ReplacementRule(pattern1142, lambda B, x, b, a, C : With(List(Set(Integer(q), Rt(Mul(a, Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Add(B, Mul(C, Integer(q))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1142)

    pattern1143 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(Integer(-1), Mul(Integer(2), Pow(Rt(Mul(a_, Pow(b_, Integer(-1))), Integer(3)), Integer(2)), C_))))), (x, A, b, a, C)))
    rule1143 = ReplacementRule(pattern1143, lambda x, A, b, a, C : With(List(Set(Integer(q), Rt(Mul(a, Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(C, Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(C, Mul(Integer(q), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1143)

    pattern1144 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_), Mul(Integer(-1), Mul(Integer(2), Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, B, C, a)))
    rule1144 = ReplacementRule(pattern1144, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Pow(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Add(B, Mul(Integer(-1), Mul(C, Integer(q)))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1144)

    pattern1145 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), B_), Mul(Integer(-1), Mul(Integer(2), Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (B, x, b, a, C)))
    rule1145 = ReplacementRule(pattern1145, lambda B, x, b, a, C : With(List(Set(Integer(q), Pow(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Add(B, Mul(Integer(-1), Mul(C, Integer(q)))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1145)

    pattern1146 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(Integer(-1), Mul(Integer(2), Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), C_))))), (x, A, b, a, C)))
    rule1146 = ReplacementRule(pattern1146, lambda x, A, b, a, C : With(List(Set(Integer(q), Pow(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Integer(-1), Mul(C, Mul(Integer(q), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))))))
    rubi.add(rule1146)

    pattern1147 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(Rt(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Integer(3)), B_), Mul(Integer(-1), Mul(Integer(2), Pow(Rt(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Integer(3)), Integer(2)), C_))))), (x, A, b, B, C, a)))
    rule1147 = ReplacementRule(pattern1147, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Add(B, Mul(Integer(-1), Mul(C, Integer(q)))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1147)

    pattern1148 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Rt(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Integer(3)), B_), Mul(Integer(-1), Mul(Integer(2), Pow(Rt(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Integer(3)), Integer(2)), C_))))), (B, x, b, a, C)))
    rule1148 = ReplacementRule(pattern1148, lambda B, x, b, a, C : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Add(B, Mul(Integer(-1), Mul(C, Integer(q)))), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x)))))
    rubi.add(rule1148)

    pattern1149 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(Integer(-1), Mul(Integer(2), Pow(Rt(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Integer(3)), Integer(2)), C_))))), (x, A, b, a, C)))
    rule1149 = ReplacementRule(pattern1149, lambda x, A, b, a, C : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Integer(3)))), Add(Mul(Mul(Mul(Integer(-1), C), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Integer(-1), Mul(C, Mul(Integer(q), Pow(b, Integer(-1))), Int(Mul(Integer(1), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))))))
    rubi.add(rule1149)

    pattern1150 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(Or(ZeroQ(Add(Mul(a_, Pow(B_, Integer(3))), Mul(Integer(-1), Mul(b_, Pow(A_, Integer(3)))))), Not(RationalQ(Mul(a_, Pow(b_, Integer(-1))))))), (x, A, b, B, C, a)))
    rule1150 = ReplacementRule(pattern1150, lambda x, A, b, B, C, a : Add(Int(Mul(Add(A, Mul(B, x)), Pow(Add(a, Mul(b, Pow(x, Integer(3)))), Integer(-1))), x), Mul(C, Int(Mul(Pow(x, Integer(2)), Pow(Add(a, Mul(b, Pow(x, Integer(3)))), Integer(-1))), x))))
    rubi.add(rule1150)

    pattern1151 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(Not(RationalQ(Mul(a_, Pow(b_, Integer(-1)))))), (B, x, b, a, C)))
    rule1151 = ReplacementRule(pattern1151, lambda B, x, b, a, C : Add(Mul(B, Int(Mul(x, Pow(Add(a, Mul(b, Pow(x, Integer(3)))), Integer(-1))), x)), Mul(C, Int(Mul(Pow(x, Integer(2)), Pow(Add(a, Mul(b, Pow(x, Integer(3)))), Integer(-1))), x))))
    rubi.add(rule1151)

    pattern1152 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(Not(RationalQ(a_, b_, A_, C_))), (x, A, b, a, C)))
    rule1152 = ReplacementRule(pattern1152, lambda x, A, b, a, C : Add(Mul(A, Int(Mul(Integer(1), Pow(Add(a, Mul(b, Pow(x, Integer(3)))), Integer(-1))), x)), Mul(C, Int(Mul(Pow(x, Integer(2)), Pow(Add(a, Mul(b, Pow(x, Integer(3)))), Integer(-1))), x))))
    rubi.add(rule1152)

    pattern1153 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(Integer(-1), Mul(B_, Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Mul(C_, Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))))))), (x, A, b, B, C, a)))
    rule1153 = ReplacementRule(pattern1153, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Pow(Mul(a, Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Mul(Mul(Pow(Integer(q), Integer(2)), Pow(a, Integer(-1))), Int(Mul(Add(A, Mul(C, Integer(q), x)), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x))))
    rubi.add(rule1153)

    pattern1154 = Pattern(Int(Mul(x_, Add(Wildcard.optional('B', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(B_, Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Mul(Integer(-1), Mul(C_, Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1))))))))), (B, x, b, a, C)))
    rule1154 = ReplacementRule(pattern1154, lambda B, x, b, a, C : With(List(Set(Integer(q), Pow(Mul(a, Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Mul(C, Mul(Pow(Integer(q), Integer(3)), Pow(a, Integer(-1))), Int(Mul(x, Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x))))
    rubi.add(rule1154)

    pattern1155 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(C_, Pow(Mul(a_, Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))))))), (x, A, b, a, C)))
    rule1155 = ReplacementRule(pattern1155, lambda x, A, b, a, C : With(List(Set(Integer(q), Pow(Mul(a, Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Mul(Mul(Pow(Integer(q), Integer(2)), Pow(a, Integer(-1))), Int(Mul(Add(A, Mul(C, Integer(q), x)), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x))))
    rubi.add(rule1155)

    pattern1156 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(B_, Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Mul(C_, Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))))))), (x, A, b, B, C, a)))
    rule1156 = ReplacementRule(pattern1156, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Pow(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Mul(Mul(Integer(q), Pow(a, Integer(-1))), Int(Mul(Add(Mul(A, Integer(q)), Mul(Add(A, Mul(B, Integer(q))), x)), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))))
    rubi.add(rule1156)

    pattern1157 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(B_, Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1))))), Mul(C_, Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))))))), (B, x, b, a, C)))
    rule1157 = ReplacementRule(pattern1157, lambda B, x, b, a, C : With(List(Set(Integer(q), Pow(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Mul(B, Mul(Pow(Integer(q), Integer(2)), Pow(a, Integer(-1))), Int(Mul(x, Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))))
    rubi.add(rule1157)

    pattern1158 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(A_, Mul(C_, Pow(Mul(Mul(Integer(-1), a_), Pow(b_, Integer(-1))), Mul(Integer(2), Pow(Integer(3), Integer(-1)))))))), (x, A, b, a, C)))
    rule1158 = ReplacementRule(pattern1158, lambda x, A, b, a, C : With(List(Set(Integer(q), Pow(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Mul(A, Mul(Integer(q), Pow(a, Integer(-1))), Int(Mul(Add(Integer(q), x), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))))
    rubi.add(rule1158)

    pattern1159 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Mul(a_, Pow(B_, Integer(3))), Mul(Integer(-1), Mul(b_, Pow(A_, Integer(3)))))), RationalQ(Mul(a_, Pow(b_, Integer(-1)))), Greater(Mul(a_, Pow(b_, Integer(-1))), Integer(0))), (x, A, b, B, C, a)))
    rule1159 = ReplacementRule(pattern1159, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Pow(Mul(a, Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Condition(Add(Mul(Integer(q), Mul(Add(A, Mul(Integer(-1), Mul(B, Integer(q))), Mul(C, Pow(Integer(q), Integer(2)))), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Integer(q), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Integer(q), Add(Mul(Integer(2), A), Mul(B, Integer(q)), Mul(Integer(-1), Mul(C, Pow(Integer(q), Integer(2)))))), Mul(Integer(-1), Mul(Add(A, Mul(Integer(-1), Mul(B, Integer(q))), Mul(Integer(-1), Mul(Integer(2), C, Pow(Integer(q), Integer(2))))), x))), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x))), NonzeroQ(Add(A, Mul(Integer(-1), Mul(B, Integer(q))), Mul(C, Pow(Integer(q), Integer(2))))))))
    rubi.add(rule1159)

    pattern1160 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(RationalQ(Mul(a_, Pow(b_, Integer(-1)))), Greater(Mul(a_, Pow(b_, Integer(-1))), Integer(0))), (B, x, b, a, C)))
    rule1160 = ReplacementRule(pattern1160, lambda B, x, b, a, C : With(List(Set(Integer(q), Pow(Mul(a, Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Condition(Add(Mul(Mul(Integer(-1), Integer(q)), Mul(Add(Mul(B, Integer(q)), Mul(Integer(-1), Mul(C, Pow(Integer(q), Integer(2))))), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Integer(q), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Integer(q), Add(Mul(B, Integer(q)), Mul(Integer(-1), Mul(C, Pow(Integer(q), Integer(2)))))), Mul(Add(Mul(B, Integer(q)), Mul(Integer(2), C, Pow(Integer(q), Integer(2)))), x)), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x))), NonzeroQ(Add(Mul(B, Integer(q)), Mul(Integer(-1), Mul(C, Pow(Integer(q), Integer(2)))))))))
    rubi.add(rule1160)

    pattern1161 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(RationalQ(Mul(a_, Pow(b_, Integer(-1)))), Greater(Mul(a_, Pow(b_, Integer(-1))), Integer(0))), (x, A, b, a, C)))
    rule1161 = ReplacementRule(pattern1161, lambda x, A, b, a, C : With(List(Set(Integer(q), Pow(Mul(a, Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Condition(Add(Mul(Integer(q), Mul(Add(A, Mul(C, Pow(Integer(q), Integer(2)))), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), x), Integer(-1))), x)), Mul(Mul(Integer(q), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Integer(q), Add(Mul(Integer(2), A), Mul(Integer(-1), Mul(C, Pow(Integer(q), Integer(2)))))), Mul(Integer(-1), Mul(Add(A, Mul(Integer(-1), Mul(Integer(2), C, Pow(Integer(q), Integer(2))))), x))), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(-1), Mul(Integer(q), x)), Pow(x, Integer(2))), Integer(-1))), x))), NonzeroQ(Add(A, Mul(C, Pow(Integer(q), Integer(2))))))))
    rubi.add(rule1161)

    pattern1162 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(NonzeroQ(Add(Mul(a_, Pow(B_, Integer(3))), Mul(Integer(-1), Mul(b_, Pow(A_, Integer(3)))))), RationalQ(Mul(a_, Pow(b_, Integer(-1)))), Less(Mul(a_, Pow(b_, Integer(-1))), Integer(0))), (x, A, b, B, C, a)))
    rule1162 = ReplacementRule(pattern1162, lambda x, A, b, B, C, a : With(List(Set(Integer(q), Pow(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Condition(Add(Mul(Integer(q), Mul(Add(A, Mul(B, Integer(q)), Mul(C, Pow(Integer(q), Integer(2)))), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Integer(q), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Integer(q), Add(Mul(Integer(2), A), Mul(Integer(-1), Mul(B, Integer(q))), Mul(Integer(-1), Mul(C, Pow(Integer(q), Integer(2)))))), Mul(Add(A, Mul(B, Integer(q)), Mul(Integer(-1), Mul(Integer(2), C, Pow(Integer(q), Integer(2))))), x)), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))), NonzeroQ(Add(A, Mul(B, Integer(q)), Mul(C, Pow(Integer(q), Integer(2))))))))
    rubi.add(rule1162)

    pattern1163 = Pattern(Int(Mul(x_, Add(B_, Mul(Wildcard.optional('C', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(B, x), FreeQ(C, x), cons(And(RationalQ(Mul(a_, Pow(b_, Integer(-1)))), Less(Mul(a_, Pow(b_, Integer(-1))), Integer(0))), (B, x, b, a, C)))
    rule1163 = ReplacementRule(pattern1163, lambda B, x, b, a, C : With(List(Set(Integer(q), Pow(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Condition(Add(Mul(Integer(q), Mul(Add(Mul(B, Integer(q)), Mul(C, Pow(Integer(q), Integer(2)))), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Integer(q), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Mul(Integer(-1), Integer(q)), Add(Mul(B, Integer(q)), Mul(C, Pow(Integer(q), Integer(2))))), Mul(Add(Mul(B, Integer(q)), Mul(Integer(-1), Mul(Integer(2), C, Pow(Integer(q), Integer(2))))), x)), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))), NonzeroQ(Add(Mul(B, Integer(q)), Mul(C, Pow(Integer(q), Integer(2))))))))
    rubi.add(rule1163)

    pattern1164 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(C, x), cons(And(RationalQ(Mul(a_, Pow(b_, Integer(-1)))), Less(Mul(a_, Pow(b_, Integer(-1))), Integer(0))), (x, A, b, a, C)))
    rule1164 = ReplacementRule(pattern1164, lambda x, A, b, a, C : With(List(Set(Integer(q), Pow(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Mul(Integer(1), Pow(Integer(3), Integer(-1)))))), Condition(Add(Mul(Integer(q), Mul(Add(A, Mul(C, Pow(Integer(q), Integer(2)))), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Add(Integer(q), Mul(Integer(-1), x)), Integer(-1))), x)), Mul(Mul(Integer(q), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Integer(q), Add(Mul(Integer(2), A), Mul(Integer(-1), Mul(C, Pow(Integer(q), Integer(2)))))), Mul(Add(A, Mul(Integer(-1), Mul(Integer(2), C, Pow(Integer(q), Integer(2))))), x)), Pow(Add(Pow(Integer(q), Integer(2)), Mul(Integer(q), x), Pow(x, Integer(2))), Integer(-1))), x))), NonzeroQ(Add(A, Mul(C, Pow(Integer(q), Integer(2))))))))
    rubi.add(rule1164)

    pattern1165 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), Less(Expon(Pq_, x_), n_)), (n, c, x, m, b, Pq, a)))
    rule1165 = ReplacementRule(pattern1165, lambda n, c, x, m, b, Pq, a : With(List(Set(Integer(v), Sum(Mul(Pow(Mul(c, x), Add(m, Integer(ii))), Mul(Add(Coeff(Pq, x, Integer(ii)), Mul(Coeff(Pq, x, Add(Mul(n, Pow(Integer(2), Integer(-1))), Integer(ii))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Mul(Pow(c, Integer(ii)), Add(a, Mul(b, Pow(x, n)))), Integer(-1)))), List(Integer(ii), Integer(0), Add(Mul(n, Pow(Integer(2), Integer(-1))), Integer(-1)))))), Condition(Int(Integer(v), x), SumQ(Integer(v)))))
    rubi.add(rule1165)

    pattern1166 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), Less(Expon(Pq_, x_), n_)), (n, x, b, Pq, a)))
    rule1166 = ReplacementRule(pattern1166, lambda n, x, b, Pq, a : With(List(Set(Integer(v), Sum(Mul(Pow(x, Integer(ii)), Mul(Add(Coeff(Pq, x, Integer(ii)), Mul(Coeff(Pq, x, Add(Mul(n, Pow(Integer(2), Integer(-1))), Integer(ii))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(Add(a, Mul(b, Pow(x, n))), Integer(-1)))), List(Integer(ii), Integer(0), Add(Mul(n, Pow(Integer(2), Integer(-1))), Integer(-1)))))), Condition(Int(Integer(v), x), SumQ(Integer(v)))))
    rubi.add(rule1166)

    pattern1167 = Pattern(Int(Mul(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(a_), ZeroQ(Add(Mul(c_, Rt(Mul(b_, Pow(a_, Integer(-1))), Integer(3))), Mul(Integer(-1), Mul(d_, Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))))))))), (c, x, b, a, d)))
    rule1167 = ReplacementRule(pattern1167, lambda c, x, b, a, d : With(List(Set(Integer(r), Numer(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Set(Integer(s), Denom(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3))))), Add(Mul(Integer(2), d, Pow(Integer(s), Integer(3)), Mul(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Pow(Mul(a, Pow(Integer(r), Integer(2)), Add(Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(s)), Mul(Integer(r), x))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(Integer(3), Mul(Integer(1), Pow(Integer(4), Integer(-1)))), Sqrt(Add(Integer(2), Mul(Integer(-1), Sqrt(Integer(3))))), d, Integer(s), Add(Integer(s), Mul(Integer(r), x)), Mul(Sqrt(Mul(Add(Pow(Integer(s), Integer(2)), Mul(Integer(-1), Mul(Integer(r), Integer(s), x)), Mul(Pow(Integer(r), Integer(2)), Pow(x, Integer(2)))), Pow(Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(s)), Mul(Integer(r), x)), Integer(2)), Integer(-1)))), Pow(Mul(Pow(Integer(r), Integer(2)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Sqrt(Mul(Integer(s), Mul(Add(Integer(s), Mul(Integer(r), x)), Pow(Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(s)), Mul(Integer(r), x)), Integer(2)), Integer(-1)))))), Integer(-1))), EllipticE(ArcSin(Mul(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), Integer(s)), Mul(Integer(r), x)), Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(s)), Mul(Integer(r), x)), Integer(-1)))), Add(Integer(-7), Mul(Integer(-1), Mul(Integer(4), Sqrt(Integer(3)))))))))))
    rubi.add(rule1167)

    pattern1168 = Pattern(Int(Mul(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(a_), NonzeroQ(Add(Mul(c_, Rt(Mul(b_, Pow(a_, Integer(-1))), Integer(3))), Mul(Integer(-1), Mul(d_, Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))))))))), (c, x, b, a, d)))
    rule1168 = ReplacementRule(pattern1168, lambda c, x, b, a, d : With(List(Set(Integer(r), Numer(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Set(Integer(s), Denom(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3))))), Add(Mul(Mul(Add(Mul(c, Integer(r)), Mul(Integer(-1), Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d, Integer(s)))), Pow(Integer(r), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(d, Pow(Integer(r), Integer(-1))), Int(Mul(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), Integer(s)), Mul(Integer(r), x)), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)))))
    rubi.add(rule1168)

    pattern1169 = Pattern(Int(Mul(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(a_), ZeroQ(Add(Mul(c_, Rt(Mul(b_, Pow(a_, Integer(-1))), Integer(3))), Mul(Integer(-1), Mul(d_, Add(Integer(1), Sqrt(Integer(3)))))))), (c, x, b, a, d)))
    rule1169 = ReplacementRule(pattern1169, lambda c, x, b, a, d : With(List(Set(Integer(r), Numer(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Set(Integer(s), Denom(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3))))), Add(Mul(Integer(2), d, Pow(Integer(s), Integer(3)), Mul(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Pow(Mul(a, Pow(Integer(r), Integer(2)), Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), Integer(s)), Mul(Integer(r), x))), Integer(-1)))), Mul(Pow(Integer(3), Mul(Integer(1), Pow(Integer(4), Integer(-1)))), Sqrt(Add(Integer(2), Sqrt(Integer(3)))), d, Integer(s), Add(Integer(s), Mul(Integer(r), x)), Mul(Sqrt(Mul(Add(Pow(Integer(s), Integer(2)), Mul(Integer(-1), Mul(Integer(r), Integer(s), x)), Mul(Pow(Integer(r), Integer(2)), Pow(x, Integer(2)))), Pow(Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), Integer(s)), Mul(Integer(r), x)), Integer(2)), Integer(-1)))), Pow(Mul(Pow(Integer(r), Integer(2)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Sqrt(Mul(Mul(Integer(-1), Integer(s)), Mul(Add(Integer(s), Mul(Integer(r), x)), Pow(Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), Integer(s)), Mul(Integer(r), x)), Integer(2)), Integer(-1)))))), Integer(-1))), EllipticE(ArcSin(Mul(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(s)), Mul(Integer(r), x)), Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), Integer(s)), Mul(Integer(r), x)), Integer(-1)))), Add(Integer(-7), Mul(Integer(4), Sqrt(Integer(3)))))))))
    rubi.add(rule1169)

    pattern1170 = Pattern(Int(Mul(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(a_), NonzeroQ(Add(Mul(c_, Rt(Mul(b_, Pow(a_, Integer(-1))), Integer(3))), Mul(Integer(-1), Mul(d_, Add(Integer(1), Sqrt(Integer(3)))))))), (c, x, b, a, d)))
    rule1170 = ReplacementRule(pattern1170, lambda c, x, b, a, d : With(List(Set(Integer(r), Numer(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Set(Integer(s), Denom(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3))))), Add(Mul(Mul(Add(Mul(c, Integer(r)), Mul(Integer(-1), Mul(Add(Integer(1), Sqrt(Integer(3))), d, Integer(s)))), Pow(Integer(r), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(d, Pow(Integer(r), Integer(-1))), Int(Mul(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(s)), Mul(Integer(r), x)), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)))))
    rubi.add(rule1170)

    pattern1171 = Pattern(Int(Mul(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(4)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(6)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(Integer(2), Pow(Rt(Mul(b_, Pow(a_, Integer(-1))), Integer(3)), Integer(2)), c_), Mul(Integer(-1), Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d_))))), (c, x, b, a, d)))
    rule1171 = ReplacementRule(pattern1171, lambda c, x, b, a, d : With(List(Set(Integer(r), Numer(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Set(Integer(s), Denom(Rt(Mul(b, Pow(a, Integer(-1))), Integer(3))))), Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d, Pow(Integer(s), Integer(3)), x, Mul(Sqrt(Add(a, Mul(b, Pow(x, Integer(6))))), Pow(Mul(Integer(2), a, Pow(Integer(r), Integer(2)), Add(Integer(s), Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(r), Pow(x, Integer(2))))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(Integer(3), Mul(Integer(1), Pow(Integer(4), Integer(-1)))), d, Integer(s), x, Add(Integer(s), Mul(Integer(r), Pow(x, Integer(2)))), Mul(Sqrt(Mul(Add(Pow(Integer(s), Integer(2)), Mul(Integer(-1), Mul(Integer(r), Integer(s), Pow(x, Integer(2)))), Mul(Pow(Integer(r), Integer(2)), Pow(x, Integer(4)))), Pow(Pow(Add(Integer(s), Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(r), Pow(x, Integer(2)))), Integer(2)), Integer(-1)))), Pow(Mul(Integer(2), Pow(Integer(r), Integer(2)), Sqrt(Mul(Mul(Integer(r), Pow(x, Integer(2)), Add(Integer(s), Mul(Integer(r), Pow(x, Integer(2))))), Pow(Pow(Add(Integer(s), Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(r), Pow(x, Integer(2)))), Integer(2)), Integer(-1)))), Sqrt(Add(a, Mul(b, Pow(x, Integer(6)))))), Integer(-1))), EllipticE(ArcCos(Mul(Add(Integer(s), Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), Integer(r), Pow(x, Integer(2)))), Pow(Add(Integer(s), Mul(Add(Integer(1), Sqrt(Integer(3))), Integer(r), Pow(x, Integer(2)))), Integer(-1)))), Mul(Add(Integer(2), Sqrt(Integer(3))), Pow(Integer(4), Integer(-1)))))))))
    rubi.add(rule1171)

    pattern1172 = Pattern(Int(Mul(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(4)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(6)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(Integer(2), Pow(Rt(Mul(b_, Pow(a_, Integer(-1))), Integer(3)), Integer(2)), c_), Mul(Integer(-1), Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d_))))), (c, x, b, a, d)))
    rule1172 = ReplacementRule(pattern1172, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Add(Mul(Mul(Add(Mul(Integer(2), c, Pow(Integer(q), Integer(2))), Mul(Integer(-1), Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d))), Pow(Mul(Integer(2), Pow(Integer(q), Integer(2))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(6))))), Integer(-1))), x)), Mul(Mul(d, Pow(Mul(Integer(2), Pow(Integer(q), Integer(2))), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(2), Pow(Integer(q), Integer(2)), Pow(x, Integer(4)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(6))))), Integer(-1))), x)))))
    rubi.add(rule1172)

    pattern1173 = Pattern(Int(Mul(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(8)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, Pow(c_, Integer(4))), Mul(Integer(-1), Mul(a_, Pow(d_, Integer(4))))))), (c, x, b, a, d)))
    rule1173 = ReplacementRule(pattern1173, lambda c, x, b, a, d : Mul(Mul(Integer(-1), c), d, Pow(x, Integer(3)), Sqrt(Mul(Mul(Integer(-1), Pow(Add(c, Mul(Integer(-1), Mul(d, Pow(x, Integer(2))))), Integer(2))), Pow(Mul(c, d, Pow(x, Integer(2))), Integer(-1)))), Mul(Sqrt(Mul(Mul(Integer(-1), Pow(d, Integer(2))), Mul(Add(a, Mul(b, Pow(x, Integer(8)))), Pow(Mul(b, Pow(c, Integer(2)), Pow(x, Integer(4))), Integer(-1))))), Pow(Mul(Sqrt(Add(Integer(2), Sqrt(Integer(2)))), Add(c, Mul(Integer(-1), Mul(d, Pow(x, Integer(2))))), Sqrt(Add(a, Mul(b, Pow(x, Integer(8)))))), Integer(-1))), EllipticF(ArcSin(Mul(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Sqrt(Mul(Add(Mul(Sqrt(Integer(2)), Pow(c, Integer(2))), Mul(Integer(2), c, d, Pow(x, Integer(2))), Mul(Sqrt(Integer(2)), Pow(d, Integer(2)), Pow(x, Integer(4)))), Pow(Mul(c, d, Pow(x, Integer(2))), Integer(-1)))))), Mul(Integer(-2), Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(2))))))))
    rubi.add(rule1173)

    pattern1174 = Pattern(Int(Mul(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(8)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, Pow(c_, Integer(4))), Mul(Integer(-1), Mul(a_, Pow(d_, Integer(4))))))), (c, x, b, a, d)))
    rule1174 = ReplacementRule(pattern1174, lambda c, x, b, a, d : Add(Mul(Mul(Add(d, Mul(Rt(Mul(b, Pow(a, Integer(-1))), Integer(4)), c)), Pow(Mul(Integer(2), Rt(Mul(b, Pow(a, Integer(-1))), Integer(4))), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Rt(Mul(b, Pow(a, Integer(-1))), Integer(4)), Pow(x, Integer(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(8))))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Add(d, Mul(Integer(-1), Mul(Rt(Mul(b, Pow(a, Integer(-1))), Integer(4)), c))), Pow(Mul(Integer(2), Rt(Mul(b, Pow(a, Integer(-1))), Integer(4))), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Rt(Mul(b, Pow(a, Integer(-1))), Integer(4)), Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(8))))), Integer(-1))), x)))))
    rubi.add(rule1174)

    pattern1175 = Pattern(Int(Mul(Pq_, Pow(x_, Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_), NonzeroQ(Coeff(Pq_, x_, Integer(0)))), (n, x, b, Pq, a)))
    rule1175 = ReplacementRule(pattern1175, lambda n, x, b, Pq, a : Add(Mul(Coeff(Pq, x, Integer(0)), Int(Mul(Integer(1), Pow(Mul(x, Sqrt(Add(a, Mul(b, Pow(x, n))))), Integer(-1))), x)), Int(Mul(ExpandToSum(Mul(Add(Pq, Mul(Integer(-1), Coeff(Pq, x, Integer(0)))), Pow(x, Integer(-1))), x), Pow(Sqrt(Add(a, Mul(b, Pow(x, n)))), Integer(-1))), x)))
    rubi.add(rule1175)

    pattern1176 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), Not(PolyQ(Pq_, Pow(x_, Mul(n_, Pow(Integer(2), Integer(-1))))))), (n, c, x, m, b, p, Pq, a)))
    rule1176 = ReplacementRule(pattern1176, lambda n, c, x, m, b, p, Pq, a : Module(List(Set(Integer(q), Expon(Pq, x)), Integer(j), Integer(k)), Int(Sum(Mul(Mul(Pow(Mul(c, x), Add(m, Integer(j))), Pow(Pow(c, Integer(j)), Integer(-1))), Sum(Mul(Coeff(Pq, x, Add(Integer(j), Mul(Integer(k), Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(x, Mul(Integer(k), Mul(n, Pow(Integer(2), Integer(-1)))))), List(Integer(k), Integer(0), Add(Mul(Integer(2), Mul(Add(Integer(q), Mul(Integer(-1), Integer(j))), Pow(n, Integer(-1)))), Integer(1)))), Pow(Add(a, Mul(b, Pow(x, n))), p)), List(Integer(j), Integer(0), Add(Mul(n, Pow(Integer(2), Integer(-1))), Integer(-1)))), x)))
    rubi.add(rule1176)

    pattern1177 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(Mul(n_, Pow(Integer(2), Integer(-1)))), Not(PolyQ(Pq_, Pow(x_, Mul(n_, Pow(Integer(2), Integer(-1))))))), (n, x, b, p, Pq, a)))
    rule1177 = ReplacementRule(pattern1177, lambda n, x, b, p, Pq, a : Module(List(Set(Integer(q), Expon(Pq, x)), Integer(j), Integer(k)), Int(Sum(Mul(Pow(x, Integer(j)), Sum(Mul(Coeff(Pq, x, Add(Integer(j), Mul(Integer(k), Mul(n, Pow(Integer(2), Integer(-1)))))), Pow(x, Mul(Integer(k), Mul(n, Pow(Integer(2), Integer(-1)))))), List(Integer(k), Integer(0), Add(Mul(Integer(2), Mul(Add(Integer(q), Mul(Integer(-1), Integer(j))), Pow(n, Integer(-1)))), Integer(1)))), Pow(Add(a, Mul(b, Pow(x, n))), p)), List(Integer(j), Integer(0), Add(Mul(n, Pow(Integer(2), Integer(-1))), Integer(-1)))), x)))
    rubi.add(rule1177)

    pattern1178 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_), Equal(Expon(Pq_, x_), Add(n_, Integer(-1)))), (n, x, b, p, Pq, a)))
    rule1178 = ReplacementRule(pattern1178, lambda n, x, b, p, Pq, a : Add(Mul(Coeff(Pq, x, Add(n, Integer(-1))), Int(Mul(Pow(x, Add(n, Integer(-1))), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)), Int(Mul(ExpandToSum(Add(Pq, Mul(Integer(-1), Mul(Coeff(Pq, x, Add(n, Integer(-1))), Pow(x, Add(n, Integer(-1)))))), x), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1178)

    pattern1179 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), cons(And(PolyQ(Pq_, x_), IntegerQ(n_)), (n, c, x, m, b, Pq, a)))
    rule1179 = ReplacementRule(pattern1179, lambda n, c, x, m, b, Pq, a : Int(ExpandIntegrand(Mul(Pow(Mul(c, x), m), Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n))), Integer(-1)))), x), x))
    rubi.add(rule1179)

    pattern1180 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PolyQ(Pq_, x_), IntegerQ(n_)), (n, x, b, Pq, a)))
    rule1180 = ReplacementRule(pattern1180, lambda n, x, b, Pq, a : Int(ExpandIntegrand(Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n))), Integer(-1))), x), x))
    rubi.add(rule1180)

    pattern1181 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_), RationalQ(m_), Less(m_, Integer(-1)), LessEqual(Add(n_, Integer(-1)), Expon(Pq_, x_))), (n, c, x, m, b, p, Pq, a)))
    rule1181 = ReplacementRule(pattern1181, lambda n, c, x, m, b, p, Pq, a : With(List(Set(Integer(Pq0), Coeff(Pq, x, Integer(0)))), Condition(Add(Mul(Integer(Pq0), Pow(Mul(c, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, c, Add(m, Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(Integer(2), a, c, Add(m, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Integer(1))), ExpandToSum(Add(Mul(Integer(2), a, Add(m, Integer(1)), Mul(Add(Pq, Mul(Integer(-1), Integer(Pq0))), Pow(x, Integer(-1)))), Mul(Integer(-1), Mul(Integer(2), b, Integer(Pq0), Add(m, Mul(n, Add(p, Integer(1))), Integer(1)), Pow(x, Add(n, Integer(-1)))))), x), Pow(Add(a, Mul(b, Pow(x, n))), p)), x))), NonzeroQ(Integer(Pq0)))))
    rubi.add(rule1181)

    pattern1182 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_)), (n, c, x, m, b, p, Pq, a)))
    rule1182 = ReplacementRule(pattern1182, lambda n, c, x, m, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Condition(With(List(Set(Integer(Pqq), Coeff(Pq, x, Integer(q)))), Add(Mul(Integer(Pqq), Pow(Mul(c, x), Add(m, Integer(q), Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(b, Pow(c, Add(Integer(q), Mul(Integer(-1), n), Integer(1))), Add(m, Integer(q), Mul(n, p), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(b, Add(m, Integer(q), Mul(n, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), m), ExpandToSum(Add(Mul(b, Add(m, Integer(q), Mul(n, p), Integer(1)), Add(Pq, Mul(Integer(-1), Mul(Integer(Pqq), Pow(x, Integer(q)))))), Mul(Integer(-1), Mul(a, Integer(Pqq), Add(m, Integer(q), Mul(Integer(-1), n), Integer(1)), Pow(x, Add(Integer(q), Mul(Integer(-1), n)))))), x), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))), And(NonzeroQ(Add(m, Integer(q), Mul(n, p), Integer(1))), GreaterEqual(Add(Integer(q), Mul(Integer(-1), n)), Integer(0)), Or(IntegerQ(Mul(Integer(2), p)), IntegerQ(Add(p, Mul(Add(Integer(q), Integer(1)), Pow(Mul(Integer(2), n), Integer(-1))))))))))
    rubi.add(rule1182)

    pattern1183 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), PositiveIntegerQ(n_)), (n, x, b, p, Pq, a)))
    rule1183 = ReplacementRule(pattern1183, lambda n, x, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Condition(With(List(Set(Integer(Pqq), Coeff(Pq, x, Integer(q)))), Add(Mul(Integer(Pqq), Pow(x, Add(Integer(q), Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(b, Add(Integer(q), Mul(n, p), Integer(1))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(b, Add(Integer(q), Mul(n, p), Integer(1))), Integer(-1))), Int(Mul(ExpandToSum(Add(Mul(b, Add(Integer(q), Mul(n, p), Integer(1)), Add(Pq, Mul(Integer(-1), Mul(Integer(Pqq), Pow(x, Integer(q)))))), Mul(Integer(-1), Mul(a, Integer(Pqq), Add(Integer(q), Mul(Integer(-1), n), Integer(1)), Pow(x, Add(Integer(q), Mul(Integer(-1), n)))))), x), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))), And(NonzeroQ(Add(Integer(q), Mul(n, p), Integer(1))), GreaterEqual(Add(Integer(q), Mul(Integer(-1), n)), Integer(0)), Or(IntegerQ(Mul(Integer(2), p)), IntegerQ(Add(p, Mul(Add(Integer(q), Integer(1)), Pow(Mul(Integer(2), n), Integer(-1))))))))))
    rubi.add(rule1183)

    pattern1184 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), NegativeIntegerQ(n_), IntegerQ(m_)), (n, x, m, b, p, Pq, a)))
    rule1184 = ReplacementRule(pattern1184, lambda n, x, m, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Mul(Integer(-1), Subst(Int(Mul(ExpandToSum(Mul(Pow(x, Integer(q)), ReplaceAll(Pq, Rule(x, Pow(x, Integer(-1))))), x), Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n)))), p), Pow(Pow(x, Add(m, Integer(q), Integer(2))), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1)))))))
    rubi.add(rule1184)

    pattern1185 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), NegativeIntegerQ(n_), FractionQ(m_)), (n, c, x, m, b, p, Pq, a)))
    rule1185 = ReplacementRule(pattern1185, lambda n, c, x, m, b, p, Pq, a : With(List(Set(Integer(g), Denominator(m)), Set(Integer(q), Expon(Pq, x))), Mul(Mul(Mul(Integer(-1), Integer(g)), Pow(c, Integer(-1))), Subst(Int(Mul(ExpandToSum(Mul(Pow(x, Mul(Integer(g), Integer(q))), ReplaceAll(Pq, Rule(x, Mul(Pow(c, Integer(-1)), Pow(x, Mul(Integer(-1), Integer(g))))))), x), Mul(Pow(Add(a, Mul(b, Pow(c, Mul(Integer(-1), n)), Pow(x, Mul(Mul(Integer(-1), Integer(g)), n)))), p), Pow(Pow(x, Add(Mul(Integer(g), Add(m, Integer(q), Integer(1))), Integer(1))), Integer(-1)))), x), x, Mul(Integer(1), Pow(Pow(Mul(c, x), Mul(Integer(1), Pow(Integer(g), Integer(-1)))), Integer(-1)))))))
    rubi.add(rule1185)

    pattern1186 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), NegativeIntegerQ(n_), Not(RationalQ(m_))), (n, c, x, m, b, p, Pq, a)))
    rule1186 = ReplacementRule(pattern1186, lambda n, c, x, m, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Mul(Mul(Integer(-1), Pow(Mul(c, x), m)), Pow(Pow(x, Integer(-1)), m), Subst(Int(Mul(ExpandToSum(Mul(Pow(x, Integer(q)), ReplaceAll(Pq, Rule(x, Pow(x, Integer(-1))))), x), Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n)))), p), Pow(Pow(x, Add(m, Integer(q), Integer(2))), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1)))))))
    rubi.add(rule1186)

    pattern1187 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), FractionQ(n_)), (n, x, m, b, p, Pq, a)))
    rule1187 = ReplacementRule(pattern1187, lambda n, x, m, b, p, Pq, a : With(List(Set(Integer(g), Denominator(n))), Mul(Integer(g), Subst(Int(Mul(Pow(x, Add(Mul(Integer(g), Add(m, Integer(1))), Integer(-1))), ReplaceAll(Pq, Rule(x, Pow(x, Integer(g)))), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(g), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1))))))))
    rubi.add(rule1187)

    pattern1188 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), FractionQ(n_)), (n, x, b, p, Pq, a)))
    rule1188 = ReplacementRule(pattern1188, lambda n, x, b, p, Pq, a : With(List(Set(Integer(g), Denominator(n))), Mul(Integer(g), Subst(Int(Mul(Pow(x, Add(Integer(g), Integer(-1))), ReplaceAll(Pq, Rule(x, Pow(x, Integer(g)))), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(g), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1))))))))
    rubi.add(rule1188)

    pattern1189 = Pattern(Int(Mul(Pq_, Pow(Mul(c_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), FractionQ(n_)), (n, c, x, m, b, p, Pq, a)))
    rule1189 = ReplacementRule(pattern1189, lambda n, c, x, m, b, p, Pq, a : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1189)

    pattern1190 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, x, m, b, p, Pq, a)))
    rule1190 = ReplacementRule(pattern1190, lambda n, x, m, b, p, Pq, a : Mul(Mul(Integer(1), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Mul(ReplaceAll(SubstFor(Pow(x, n), Pq, x), Rule(x, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), Pow(Add(a, Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), p)), x), x, Pow(x, Add(m, Integer(1))))))
    rubi.add(rule1190)

    pattern1191 = Pattern(Int(Mul(Pq_, Pow(Mul(c_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, c, x, m, b, p, Pq, a)))
    rule1191 = ReplacementRule(pattern1191, lambda n, c, x, m, b, p, Pq, a : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1191)

    pattern1192 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('m', Integer(1))))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(A, x), FreeQ(B, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), n_), Integer(1)))), (n, x, A, m, b, p, B, a)))
    rule1192 = ReplacementRule(pattern1192, lambda n, x, A, m, b, p, B, a : Add(Mul(A, Int(Pow(Add(a, Mul(b, Pow(x, n))), p), x)), Mul(B, Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x))))
    rubi.add(rule1192)

    pattern1193 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(PolyQ(Pq_, x_), PolyQ(Pq_, Pow(x_, n_)))), (n, c, x, m, b, p, Pq, a)))
    rule1193 = ReplacementRule(pattern1193, lambda n, c, x, m, b, p, Pq, a : Int(ExpandIntegrand(Mul(Pow(Mul(c, x), m), Pq, Pow(Add(a, Mul(b, Pow(x, n))), p)), x), x))
    rubi.add(rule1193)

    pattern1194 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(PolyQ(Pq_, x_), PolyQ(Pq_, Pow(x_, n_)))), (n, x, b, p, Pq, a)))
    rule1194 = ReplacementRule(pattern1194, lambda n, x, b, p, Pq, a : Int(ExpandIntegrand(Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n))), p)), x), x))
    rubi.add(rule1194)

    pattern1195 = Pattern(Int(Mul(Pq_, Pow(u_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(v_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearPairQ(u_, v_, x_), PolyQ(Pq_, Pow(v_, n_))), (n, x, m, u, b, p, Pq, a, v)))
    rule1195 = ReplacementRule(pattern1195, lambda n, x, m, u, b, p, Pq, a, v : Mul(Mul(Pow(u, m), Pow(Mul(Coeff(v, x, Integer(1)), Pow(v, m)), Integer(-1))), Subst(Int(Mul(Pow(x, m), SubstFor(v, Pq, x), Pow(Add(a, Mul(b, Pow(x, n))), p)), x), x, v)))
    rubi.add(rule1195)

    pattern1196 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(v_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(v_, x_), PolyQ(Pq_, Pow(v_, n_))), (n, x, b, p, Pq, a, v)))
    rule1196 = ReplacementRule(pattern1196, lambda n, x, b, p, Pq, a, v : Mul(Mul(Integer(1), Pow(Coeff(v, x, Integer(1)), Integer(-1))), Subst(Int(Mul(SubstFor(v, Pq, x), Pow(Add(a, Mul(b, Pow(x, n))), p)), x), x, v)))
    rubi.add(rule1196)

    pattern1197 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), Or(IntegerQ(p_), And(PositiveQ(a1_), PositiveQ(a2_)))), (b2, n, c, x, m, a1, a2, p, b1, Pq)))
    rule1197 = ReplacementRule(pattern1197, lambda b2, n, c, x, m, a1, a2, p, b1, Pq : Int(Mul(Pow(Mul(c, x), m), Pq, Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule1197)

    pattern1198 = Pattern(Int(Mul(Pq_, Pow(Add(a1_, Mul(Wildcard.optional('b1', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), Or(IntegerQ(p_), And(PositiveQ(a1_), PositiveQ(a2_)))), (b2, n, x, a1, a2, p, b1, Pq)))
    rule1198 = ReplacementRule(pattern1198, lambda b2, n, x, a1, a2, p, b1, Pq : Int(Mul(Pq, Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule1198)

    pattern1199 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_)))), (b2, n, c, x, m, a1, a2, p, b1, Pq)))
    rule1199 = ReplacementRule(pattern1199, lambda b2, n, c, x, m, a1, a2, p, b1, Pq : Mul(Pow(Add(a1, Mul(b1, Pow(x, n))), FracPart(p)), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), FracPart(p)), Pow(Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Integer(-1))), Int(Mul(Pow(Mul(c, x), m), Pq, Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule1199)

    pattern1200 = Pattern(Int(Mul(Pq_, Pow(Add(a1_, Mul(Wildcard.optional('b1', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_)))), (b2, n, x, a1, a2, p, b1, Pq)))
    rule1200 = ReplacementRule(pattern1200, lambda b2, n, x, a1, a2, p, b1, Pq : Mul(Pow(Add(a1, Mul(b1, Pow(x, n))), FracPart(p)), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), FracPart(p)), Pow(Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Integer(-1))), Int(Mul(Pq, Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule1200)

    pattern1201 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(e_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(a_, c_, f_), Mul(Integer(-1), Mul(e_, Add(Mul(b_, c_), Mul(a_, d_)), Add(Mul(n_, Add(p_, Integer(1))), Integer(1)))))), ZeroQ(Add(Mul(a_, c_, g_), Mul(Integer(-1), Mul(b_, d_, e_, Add(Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1))))))), (f, n, e, c, g, x, n2, b, p, a, d)))
    rule1201 = ReplacementRule(pattern1201, lambda f, n, e, c, g, x, n2, b, p, a, d : Mul(e, x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, c), Integer(-1)))))
    rubi.add(rule1201)

    pattern1202 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(e_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(n_, Add(p_, Integer(1))), Integer(1))), ZeroQ(Add(Mul(a_, c_, g_), Mul(Integer(-1), Mul(b_, d_, e_, Add(Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1))))))), (e, n, c, g, x, n2, b, p, a, d)))
    rule1202 = ReplacementRule(pattern1202, lambda e, n, c, g, x, n2, b, p, a, d : Mul(e, x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, c), Integer(-1)))))
    rubi.add(rule1202)

    pattern1203 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('h', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(e_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(a_, c_, f_, Add(m_, Integer(1))), Mul(Integer(-1), Mul(e_, Add(Mul(b_, c_), Mul(a_, d_)), Add(m_, Mul(n_, Add(p_, Integer(1))), Integer(1)))))), ZeroQ(Add(Mul(a_, c_, g_, Add(m_, Integer(1))), Mul(Integer(-1), Mul(b_, d_, e_, Add(m_, Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1)))))), NonzeroQ(Add(m_, Integer(1)))), (f, n, e, c, g, x, m, n2, b, p, a, h, d)))
    rule1203 = ReplacementRule(pattern1203, lambda f, n, e, c, g, x, m, n2, b, p, a, h, d : Mul(e, Pow(Mul(h, x), Add(m, Integer(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, c, h, Add(m, Integer(1))), Integer(-1)))))
    rubi.add(rule1203)

    pattern1204 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('h', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(e_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(m_, Mul(n_, Add(p_, Integer(1))), Integer(1))), ZeroQ(Add(Mul(a_, c_, g_, Add(m_, Integer(1))), Mul(Integer(-1), Mul(b_, d_, e_, Add(m_, Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1)))))), NonzeroQ(Add(m_, Integer(1)))), (e, n, c, g, x, m, n2, b, p, a, h, d)))
    rule1204 = ReplacementRule(pattern1204, lambda e, n, c, g, x, m, n2, b, p, a, h, d : Mul(e, Pow(Mul(h, x), Add(m, Integer(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Integer(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, c, h, Add(m, Integer(1))), Integer(-1)))))
    rubi.add(rule1204)

    pattern1205 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('m', Integer(1))))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(A, x), FreeQ(B, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), ZeroQ(Add(m_, Mul(Integer(-1), n_), Integer(1)))), (B, n, q, c, x, A, m, b, p, a, d)))
    rule1205 = ReplacementRule(pattern1205, lambda B, n, q, c, x, A, m, b, p, a, d : Add(Mul(A, Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)), Mul(B, Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x))))
    rubi.add(rule1205)

    pattern1206 = Pattern(Int(Mul(Pow(Px_, Wildcard.optional('q', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(PolynomialQ(Px_, x_), IntegerQ(q_), RationalQ(n_)), (n, q, c, x, Px, b, p, a, d)))
    rule1206 = ReplacementRule(pattern1206, lambda n, q, c, x, Px, b, p, a, d : With(List(Set(Integer(k), Denominator(n))), Mul(Mul(Integer(k), Pow(d, Integer(-1))), Subst(Int(SimplifyIntegrand(Mul(Pow(x, Add(Integer(k), Integer(-1))), Pow(ReplaceAll(Px, Rule(x, Add(Mul(Pow(x, Integer(k)), Pow(d, Integer(-1))), Mul(Integer(-1), Mul(c, Pow(d, Integer(-1))))))), q), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(k), n)))), p)), x), x), x, Pow(Add(c, Mul(d, x)), Mul(Integer(1), Pow(Integer(k), Integer(-1))))))))
    rubi.add(rule1206)

    pattern1207 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), ZeroQ(Simplify(Add(m_, Mul(Integer(-1), n_), Integer(1))))), (n, c, x, m, n2, b, p, Pq, a)))
    rule1207 = ReplacementRule(pattern1207, lambda n, c, x, m, n2, b, p, Pq, a : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(SubstFor(Pow(x, n), Pq, x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule1207)

    pattern1208 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), PositiveIntegerQ(p_)), (n, c, x, m, n2, b, p, Pq, a, d)))
    rule1208 = ReplacementRule(pattern1208, lambda n, c, x, m, n2, b, p, Pq, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(d, x), m), Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule1208)

    pattern1209 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), PositiveIntegerQ(p_)), (n, c, x, n2, b, p, Pq, a)))
    rule1209 = ReplacementRule(pattern1209, lambda n, c, x, n2, b, p, Pq, a : Int(ExpandIntegrand(Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule1209)

    pattern1210 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(a_, e_), Mul(Integer(-1), Mul(b_, d_, Add(Mul(n_, Add(p_, Integer(1))), Integer(1)))))), ZeroQ(Add(Mul(a_, f_), Mul(Integer(-1), Mul(c_, d_, Add(Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1))))))), (e, n, f, c, x, n2, b, p, a, d)))
    rule1210 = ReplacementRule(pattern1210, lambda e, n, f, c, x, n2, b, p, a, d : Mul(d, x, Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(a, Integer(-1)))))
    rubi.add(rule1210)

    pattern1211 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(n_, Add(p_, Integer(1))), Integer(1))), ZeroQ(Add(Mul(c_, d_), Mul(a_, f_)))), (f, n, c, x, n2, b, p, a, d)))
    rule1211 = ReplacementRule(pattern1211, lambda f, n, c, x, n2, b, p, a, d : Mul(d, x, Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(a, Integer(-1)))))
    rubi.add(rule1211)

    pattern1212 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(a_, e_, Add(m_, Integer(1))), Mul(Integer(-1), Mul(b_, d_, Add(m_, Mul(n_, Add(p_, Integer(1))), Integer(1)))))), ZeroQ(Add(Mul(a_, f_, Add(m_, Integer(1))), Mul(Integer(-1), Mul(c_, d_, Add(m_, Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1)))))), NonzeroQ(Add(m_, Integer(1)))), (e, n, f, c, g, x, m, n2, b, p, a, d)))
    rule1212 = ReplacementRule(pattern1212, lambda e, n, f, c, g, x, m, n2, b, p, a, d : Mul(d, Pow(Mul(g, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, g, Add(m, Integer(1))), Integer(-1)))))
    rubi.add(rule1212)

    pattern1213 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(m_, Mul(n_, Add(p_, Integer(1))), Integer(1))), ZeroQ(Add(Mul(c_, d_), Mul(a_, f_))), NonzeroQ(Add(m_, Integer(1)))), (f, n, c, g, x, m, n2, b, p, a, d)))
    rule1213 = ReplacementRule(pattern1213, lambda f, n, c, g, x, m, n2, b, p, a, d : Mul(d, Pow(Mul(g, x), Add(m, Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, g, Add(m, Integer(1))), Integer(-1)))))
    rubi.add(rule1213)

    pattern1214 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(Mul(Integer(2), p_)))), (n, c, x, m, n2, b, p, Pq, a, d)))
    rule1214 = ReplacementRule(pattern1214, lambda n, c, x, m, n2, b, p, Pq, a, d : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Pq, Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), p))), x)))
    rubi.add(rule1214)

    pattern1215 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Not(IntegerQ(Mul(Integer(2), p_)))), (n, c, x, n2, b, p, Pq, a)))
    rule1215 = ReplacementRule(pattern1215, lambda n, c, x, n2, b, p, Pq, a : Mul(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), FracPart(p)), Pow(Mul(Pow(Mul(Integer(4), c), IntPart(p)), Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), FracPart(p)))), Integer(-1))), Int(Mul(Pq, Pow(Add(b, Mul(Integer(2), c, Pow(x, n))), Mul(Integer(2), p))), x)))
    rubi.add(rule1215)

    pattern1216 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, c, x, m, n2, b, p, Pq, a)))
    rule1216 = ReplacementRule(pattern1216, lambda n, c, x, m, n2, b, p, Pq, a : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), SubstFor(Pow(x, n), Pq, x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x), x, Pow(x, n))))
    rubi.add(rule1216)

    pattern1217 = Pattern(Int(Mul(Pq_, Pow(Mul(d_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, c, x, m, n2, b, p, Pq, a, d)))
    rule1217 = ReplacementRule(pattern1217, lambda n, c, x, m, n2, b, p, Pq, a, d : Mul(Mul(Pow(Mul(d, x), m), Pow(Pow(x, m), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule1217)

    pattern1218 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), ZeroQ(Coeff(Pq_, x_, Integer(0)))), (n, c, x, m, n2, b, p, Pq, a, d)))
    rule1218 = ReplacementRule(pattern1218, lambda n, c, x, m, n2, b, p, Pq, a, d : Mul(Mul(Integer(1), Pow(d, Integer(-1))), Int(Mul(Pow(Mul(d, x), Add(m, Integer(1))), ExpandToSum(Mul(Pq, Pow(x, Integer(-1))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule1218)

    pattern1219 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), ZeroQ(Coeff(Pq_, x_, Integer(0))), SumQ(Pq_)), (n, c, x, n2, b, p, Pq, a)))
    rule1219 = ReplacementRule(pattern1219, lambda n, c, x, n2, b, p, Pq, a : Int(Mul(x, ExpandToSum(Mul(Pq, Pow(x, Integer(-1))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))
    rubi.add(rule1219)

    pattern1220 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('n3', Integer(1)))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Pow(a_, Integer(2)), g_, Add(n_, Integer(1))), Mul(Integer(-1), Mul(c_, Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(3))), Integer(1)), Add(Mul(a_, e_), Mul(Integer(-1), Mul(b_, d_, Add(Mul(n_, Add(p_, Integer(1))), Integer(1))))))))), ZeroQ(Add(Mul(Pow(a_, Integer(2)), f_, Add(n_, Integer(1))), Mul(Integer(-1), Mul(a_, c_, d_, Add(n_, Integer(1)), Add(Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1)))), Mul(Integer(-1), Mul(b_, Add(Mul(n_, Add(p_, Integer(2))), Integer(1)), Add(Mul(a_, e_), Mul(Integer(-1), Mul(b_, d_, Add(Mul(n_, Add(p_, Integer(1))), Integer(1)))))))))), (n3, f, e, n, c, g, x, n2, b, p, a, d)))
    rule1220 = ReplacementRule(pattern1220, lambda n3, f, e, n, c, g, x, n2, b, p, a, d : Mul(x, Add(Mul(Integer(3), a, d), Mul(Integer(-1), Mul(Add(Mul(Integer(3), b, d), Mul(Integer(-1), Mul(a, e)), Mul(Integer(2), b, d, p)), Pow(x, Integer(2))))), Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Add(p, Integer(1))), Pow(Mul(Integer(3), Pow(a, Integer(2))), Integer(-1)))))
    rubi.add(rule1220)

    pattern1221 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('n3', Integer(1))))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Pow(a_, Integer(2)), g_, Add(n_, Integer(1))), Mul(c_, b_, d_, Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(3))), Integer(1)), Add(Mul(n_, Add(p_, Integer(1))), Integer(1))))), ZeroQ(Add(Mul(Pow(a_, Integer(2)), f_, Add(n_, Integer(1))), Mul(Integer(-1), Mul(a_, c_, d_, Add(n_, Integer(1)), Add(Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1)))), Mul(Pow(b_, Integer(2)), d_, Add(Mul(n_, Add(p_, Integer(2))), Integer(1)), Add(Mul(n_, Add(p_, Integer(1))), Integer(1)))))), (n3, f, n, c, g, x, n2, b, p, a, d)))
    rule1221 = ReplacementRule(pattern1221, lambda n3, f, n, c, g, x, n2, b, p, a, d : Mul(x, Add(Mul(Integer(3), a, d), Mul(Integer(-1), Mul(Add(Mul(Integer(3), b, d), Mul(Integer(2), b, d, p)), Pow(x, Integer(2))))), Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Add(p, Integer(1))), Pow(Mul(Integer(3), Pow(a, Integer(2))), Integer(-1)))))
    rubi.add(rule1221)

    pattern1222 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1))), Add(d_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('n3', Integer(1)))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Pow(a_, Integer(2)), g_, Add(n_, Integer(1))), Mul(Integer(-1), Mul(c_, Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(3))), Integer(1)), Add(Mul(a_, e_), Mul(Integer(-1), Mul(b_, d_, Add(Mul(n_, Add(p_, Integer(1))), Integer(1))))))))), ZeroQ(Add(Mul(a_, c_, d_, Add(n_, Integer(1)), Add(Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1))), Mul(b_, Add(Mul(n_, Add(p_, Integer(2))), Integer(1)), Add(Mul(a_, e_), Mul(Integer(-1), Mul(b_, d_, Add(Mul(n_, Add(p_, Integer(1))), Integer(1))))))))), (n3, e, n, c, g, x, n2, b, p, a, d)))
    rule1222 = ReplacementRule(pattern1222, lambda n3, e, n, c, g, x, n2, b, p, a, d : Mul(x, Add(Mul(Integer(3), a, d), Mul(Integer(-1), Mul(Add(Mul(Integer(3), b, d), Mul(Integer(-1), Mul(a, e)), Mul(Integer(2), b, d, p)), Pow(x, Integer(2))))), Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Add(p, Integer(1))), Pow(Mul(Integer(3), Pow(a, Integer(2))), Integer(-1)))))
    rubi.add(rule1222)

    pattern1223 = Pattern(Int(Mul(Add(d_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('n3', Integer(1))))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(g, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Pow(a_, Integer(2)), g_, Add(n_, Integer(1))), Mul(c_, b_, d_, Add(Mul(n_, Add(Mul(Integer(2), p_), Integer(3))), Integer(1)), Add(Mul(n_, Add(p_, Integer(1))), Integer(1))))), ZeroQ(Add(Mul(a_, c_, d_, Add(n_, Integer(1)), Add(Mul(Integer(2), n_, Add(p_, Integer(1))), Integer(1))), Mul(Integer(-1), Mul(Pow(b_, Integer(2)), d_, Add(Mul(n_, Add(p_, Integer(2))), Integer(1)), Add(Mul(n_, Add(p_, Integer(1))), Integer(1))))))), (n3, n, c, g, x, n2, b, p, a, d)))
    rule1223 = ReplacementRule(pattern1223, lambda n3, n, c, g, x, n2, b, p, a, d : Mul(x, Add(Mul(Integer(3), a, d), Mul(Integer(-1), Mul(Add(Mul(Integer(3), b, d), Mul(Integer(2), b, d, p)), Pow(x, Integer(2))))), Mul(Pow(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))), Add(p, Integer(1))), Pow(Mul(Integer(3), Pow(a, Integer(2))), Integer(-1)))))
    rubi.add(rule1223)

    pattern1224 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Rational(Integer(-3), Integer(2))), Add(e_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Wildcard.optional('s', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(q_, Mul(Integer(-1), Mul(n_, Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(r_, Mul(Integer(-1), Mul(Integer(3), Mul(n_, Pow(Integer(2), Integer(-1))))))), ZeroQ(Add(s_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), m_), Mul(Integer(-1), n_), Integer(2))), ZeroQ(Add(Mul(c_, e_), Mul(a_, h_)))), (f, n, q, c, g, x, e, m, n2, b, a, s, h, r)))
    rule1224 = ReplacementRule(pattern1224, lambda f, n, q, c, g, x, e, m, n2, b, a, s, h, r : Mul(Mul(Integer(-1), Add(Mul(Integer(2), c, Add(Mul(b, f), Mul(Integer(-1), Mul(Integer(2), a, g)))), Mul(Integer(2), h, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Mul(Integer(2), c, Add(Mul(Integer(2), c, f), Mul(Integer(-1), Mul(b, g))), Pow(x, n)))), Pow(Mul(c, n, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))))), Integer(-1))))
    rubi.add(rule1224)

    pattern1225 = Pattern(Int(Mul(Pow(Mul(d_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Rational(Integer(-3), Integer(2))), Add(e_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Wildcard.optional('q', Integer(1)))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Wildcard.optional('r', Integer(1)))), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Wildcard.optional('s', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(q_, Mul(Integer(-1), Mul(n_, Pow(Integer(2), Integer(-1)))))), ZeroQ(Add(r_, Mul(Integer(-1), Mul(Integer(3), Mul(n_, Pow(Integer(2), Integer(-1))))))), ZeroQ(Add(s_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(Integer(2), m_), Mul(Integer(-1), n_), Integer(2))), ZeroQ(Add(Mul(c_, e_), Mul(a_, h_)))), (f, n, q, c, g, x, e, m, n2, b, a, s, h, d, r)))
    rule1225 = ReplacementRule(pattern1225, lambda f, n, q, c, g, x, e, m, n2, b, a, s, h, d, r : Mul(Mul(Pow(Mul(d, x), m), Pow(Pow(x, m), Integer(-1))), Int(Mul(Pow(x, m), Mul(Add(e, Mul(f, Pow(x, Mul(n, Pow(Integer(2), Integer(-1))))), Mul(g, Pow(x, Mul(Mul(Integer(3), n), Pow(Integer(2), Integer(-1))))), Mul(h, Pow(x, Mul(Integer(2), n)))), Pow(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Mul(Integer(3), Pow(Integer(2), Integer(-1)))), Integer(-1)))), x)))
    rubi.add(rule1225)

    pattern1226 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1))), (n, c, x, n2, b, p, Pq, a)))
    rule1226 = ReplacementRule(pattern1226, lambda n, c, x, n2, b, p, Pq, a : Module(List(Set(Integer(q), Expon(Pq, x)), Integer(i)), Condition(Add(Mul(Mul(Integer(-1), x), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Sum(Add(Mul(Add(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c))), Coeff(Pq, x, Integer(i))), Mul(Integer(-1), Mul(a, b, Coeff(Pq, x, Add(n, Integer(i)))))), Pow(x, Integer(i))), Mul(c, Add(Mul(b, Coeff(Pq, x, Integer(i))), Mul(Integer(-1), Mul(Integer(2), a, Coeff(Pq, x, Add(n, Integer(i)))))), Pow(x, Add(n, Integer(i))))), List(Integer(i), Integer(0), Add(n, Integer(-1))))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Sum(Add(Mul(Add(Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(n, Add(p, Integer(1))), Integer(i), Integer(1))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(i), Integer(1))))), Coeff(Pq, x, Integer(i))), Mul(Integer(-1), Mul(a, b, Add(Integer(i), Integer(1)), Coeff(Pq, x, Add(n, Integer(i)))))), Pow(x, Integer(i))), Mul(c, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(i), Integer(1)), Add(Mul(b, Coeff(Pq, x, Integer(i))), Mul(Integer(-1), Mul(Integer(2), a, Coeff(Pq, x, Add(n, Integer(i)))))), Pow(x, Add(n, Integer(i))))), List(Integer(i), Integer(0), Add(n, Integer(-1))))), x))), Less(Integer(q), Mul(Integer(2), n)))))
    rubi.add(rule1226)

    pattern1227 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, d_), Mul(a_, g_)))), (e, f, c, g, x, b, a, d)))
    rule1227 = ReplacementRule(pattern1227, lambda e, f, c, g, x, b, a, d : Mul(Mul(Integer(-1), Add(Mul(c, Add(Mul(b, e), Mul(Integer(-1), Mul(Integer(2), a, f)))), Mul(g, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), x), Mul(c, Add(Mul(Integer(2), c, e), Mul(Integer(-1), Mul(b, f))), Pow(x, Integer(2))))), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1227)

    pattern1228 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, d_), Mul(a_, g_)))), (f, c, g, x, b, a, d)))
    rule1228 = ReplacementRule(pattern1228, lambda f, c, g, x, b, a, d : Mul(Add(Mul(Integer(2), a, c, f), Mul(Integer(-1), Mul(g, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), x)), Mul(b, c, f, Pow(x, Integer(2)))), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1228)

    pattern1229 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(g, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, d_), Mul(a_, g_)))), (e, c, g, x, b, a, d)))
    rule1229 = ReplacementRule(pattern1229, lambda e, c, g, x, b, a, d : Mul(Mul(Integer(-1), Add(Mul(b, c, e), Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), g, x), Mul(Integer(2), Pow(c, Integer(2)), e, Pow(x, Integer(2))))), Pow(Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1229)

    pattern1230 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(Integer(3), a_, h_)))), ZeroQ(Add(Mul(c_, g_), Mul(Integer(-1), Mul(Integer(2), b_, h_))))), (e, f, c, g, x, b, a, h)))
    rule1230 = ReplacementRule(pattern1230, lambda e, f, c, g, x, b, a, h : Mul(Add(Mul(Integer(2), Pow(a, Integer(2)), c, f), Mul(a, b, c, f, Pow(x, Integer(2))), Mul(a, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), h, Pow(x, Integer(3)))), Pow(Mul(a, c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1230)

    pattern1231 = Pattern(Int(Mul(Pow(x_, Integer(2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Integer(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(e, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(Integer(3), a_, h_)))), ZeroQ(Add(Mul(c_, g_), Mul(Integer(-1), Mul(Integer(2), b_, h_))))), (e, c, g, x, b, a, h)))
    rule1231 = ReplacementRule(pattern1231, lambda e, c, g, x, b, a, h : Mul(h, Mul(Pow(x, Integer(3)), Pow(Mul(c, Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1)))))
    rubi.add(rule1231)

    pattern1232 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(4))), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Integer(6))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(Integer(3), a_, h_)))), ZeroQ(Add(Mul(Integer(3), c_, d_), Mul(Integer(-1), Mul(Integer(2), b_, e_)), Mul(Integer(3), a_, g_)))), (e, f, c, g, x, b, a, h, d)))
    rule1232 = ReplacementRule(pattern1232, lambda e, f, c, g, x, b, a, h, d : Mul(Add(Mul(Integer(2), Pow(a, Integer(2)), c, f), Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), d, x), Mul(a, b, c, f, Pow(x, Integer(2))), Mul(a, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), h, Pow(x, Integer(3)))), Pow(Mul(a, c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1232)

    pattern1233 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-3), Integer(2))), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('h', Integer(1)), Pow(x_, Integer(6))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(h, x), cons(And(NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), ZeroQ(Add(Mul(c_, e_), Mul(Integer(-1), Mul(Integer(3), a_, h_)))), ZeroQ(Add(Mul(Integer(3), c_, d_), Mul(Integer(-1), Mul(Integer(2), b_, e_))))), (e, f, c, x, b, a, h, d)))
    rule1233 = ReplacementRule(pattern1233, lambda e, f, c, x, b, a, h, d : Mul(Add(Mul(Integer(2), Pow(a, Integer(2)), c, f), Mul(c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), d, x), Mul(a, b, c, f, Pow(x, Integer(2))), Mul(a, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), h, Pow(x, Integer(3)))), Pow(Mul(a, c, Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))))
    rubi.add(rule1233)

    pattern1234 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1))), (n, c, x, n2, b, p, Pq, a)))
    rule1234 = ReplacementRule(pattern1234, lambda n, c, x, n2, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Condition(Module(List(Set(Integer(Q), PolynomialQuotient(Mul(Pow(Mul(b, c), Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1))), Pq), Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), x)), Set(Integer(R), PolynomialRemainder(Mul(Pow(Mul(b, c), Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1))), Pq), Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), x)), Integer(i)), Add(Mul(Mul(Integer(-1), x), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(Mul(b, c), Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1)))), Integer(-1))), Sum(Add(Mul(Add(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c))), Coeff(Integer(R), x, Integer(i))), Mul(Integer(-1), Mul(a, b, Coeff(Integer(R), x, Add(n, Integer(i)))))), Pow(x, Integer(i))), Mul(c, Add(Mul(b, Coeff(Integer(R), x, Integer(i))), Mul(Integer(-1), Mul(Integer(2), a, Coeff(Integer(R), x, Add(n, Integer(i)))))), Pow(x, Add(n, Integer(i))))), List(Integer(i), Integer(0), Add(n, Integer(-1))))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(Mul(b, c), Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), ExpandToSum(Add(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(Q)), Sum(Add(Mul(Add(Mul(Add(Mul(Pow(b, Integer(2)), Add(Mul(n, Add(p, Integer(1))), Integer(i), Integer(1))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(i), Integer(1))))), Coeff(Integer(R), x, Integer(i))), Mul(Integer(-1), Mul(a, b, Add(Integer(i), Integer(1)), Coeff(Integer(R), x, Add(n, Integer(i)))))), Pow(x, Integer(i))), Mul(c, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(i), Integer(1)), Add(Mul(b, Coeff(Integer(R), x, Integer(i))), Mul(Integer(-1), Mul(Integer(2), a, Coeff(Integer(R), x, Add(n, Integer(i)))))), Pow(x, Add(n, Integer(i))))), List(Integer(i), Integer(0), Add(n, Integer(-1))))), x)), x)))), GreaterEqual(Integer(q), Mul(Integer(2), n)))))
    rubi.add(rule1234)

    pattern1235 = Pattern(Int(Mul(Pq_, Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, Integer(-1)), NegativeIntegerQ(m_)), (n, c, x, m, n2, b, p, Pq, a)))
    rule1235 = ReplacementRule(pattern1235, lambda n, c, x, m, n2, b, p, Pq, a : Module(List(Set(Integer(q), Expon(Pq, x))), Condition(Module(List(Set(Integer(Q), PolynomialQuotient(Mul(a, Pow(Mul(b, c), Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1))), Pow(x, m), Pq), Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), x)), Set(Integer(R), PolynomialRemainder(Mul(a, Pow(Mul(b, c), Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1))), Pow(x, m), Pq), Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), x)), Integer(i)), Add(Mul(Mul(Integer(-1), x), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(Pow(a, Integer(2)), n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(Mul(b, c), Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1)))), Integer(-1))), Sum(Add(Mul(Add(Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c))), Coeff(Integer(R), x, Integer(i))), Mul(Integer(-1), Mul(a, b, Coeff(Integer(R), x, Add(n, Integer(i)))))), Pow(x, Integer(i))), Mul(c, Add(Mul(b, Coeff(Integer(R), x, Integer(i))), Mul(Integer(-1), Mul(Integer(2), a, Coeff(Integer(R), x, Add(n, Integer(i)))))), Pow(x, Add(n, Integer(i))))), List(Integer(i), Integer(0), Add(n, Integer(-1))))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(Mul(b, c), Add(Floor(Mul(Add(Integer(q), Integer(-1)), Pow(n, Integer(-1)))), Integer(1)))), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), ExpandToSum(Add(Mul(n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(x, Mul(Integer(-1), m)), Integer(Q)), Sum(Add(Mul(Add(Mul(Add(Mul(Pow(b, Integer(2)), Mul(Add(Mul(n, Add(p, Integer(1))), Integer(i), Integer(1)), Pow(a, Integer(-1)))), Mul(Integer(-1), Mul(Integer(2), c, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(i), Integer(1))))), Coeff(Integer(R), x, Integer(i))), Mul(Integer(-1), Mul(b, Add(Integer(i), Integer(1)), Coeff(Integer(R), x, Add(n, Integer(i)))))), Pow(x, Add(Integer(i), Mul(Integer(-1), m)))), Mul(c, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(i), Integer(1)), Add(Mul(Mul(b, Pow(a, Integer(-1))), Coeff(Integer(R), x, Integer(i))), Mul(Integer(-1), Mul(Integer(2), Coeff(Integer(R), x, Add(n, Integer(i)))))), Pow(x, Add(n, Integer(i), Mul(Integer(-1), m))))), List(Integer(i), Integer(0), Add(n, Integer(-1))))), x)), x)))), GreaterEqual(Integer(q), Mul(Integer(2), n)))))
    rubi.add(rule1235)

    pattern1236 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), IntegerQ(m_)), (n, c, x, m, n2, b, p, Pq, a)))
    rule1236 = ReplacementRule(pattern1236, lambda n, c, x, m, n2, b, p, Pq, a : With(List(Set(Integer(g), GCD(Add(m, Integer(1)), n))), Condition(Mul(Mul(Integer(1), Pow(Integer(g), Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, Integer(1)), Pow(Integer(g), Integer(-1))), Integer(-1))), ReplaceAll(Pq, Rule(x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1)))))), Pow(Add(a, Mul(b, Pow(x, Mul(n, Pow(Integer(g), Integer(-1))))), Mul(c, Pow(x, Mul(Integer(2), Mul(n, Pow(Integer(g), Integer(-1))))))), p)), x), x, Pow(x, Integer(g)))), Unequal(Integer(g), Integer(1)))))
    rubi.add(rule1236)

    pattern1237 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), NiceSqrtQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, c, x, m, n2, b, Pq, a, d)))
    rule1237 = ReplacementRule(pattern1237, lambda n, c, x, m, n2, b, Pq, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(d, x), m), Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x), x))
    rubi.add(rule1237)

    pattern1238 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Or(NiceSqrtQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), Less(Expon(Pq_, x_), n_))), (n, c, x, n2, b, Pq, a)))
    rule1238 = ReplacementRule(pattern1238, lambda n, c, x, n2, b, Pq, a : Int(ExpandIntegrand(Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule1238)

    pattern1239 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(p_)), (c, x, b, p, Pq, a)))
    rule1239 = ReplacementRule(pattern1239, lambda c, x, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Condition(With(List(Set(Integer(Pqq), Coeff(Pq, x, Integer(q)))), Add(Mul(Pow(c, p), Integer(Pqq), Mul(Log(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Pow(Integer(2), Integer(-1)))), Mul(Mul(Integer(1), Pow(Integer(2), Integer(-1))), Int(Mul(ExpandToSum(Add(Mul(Integer(2), Pq), Mul(Integer(-1), Mul(Pow(c, p), Integer(Pqq), Mul(Add(b, Mul(Integer(2), c, x)), Pow(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Integer(1))), Integer(-1)))))), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x)))), Equal(Add(Integer(q), Mul(Integer(2), p), Integer(1)), Integer(0)))))
    rubi.add(rule1239)

    pattern1240 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), PosQ(c_)), (c, x, b, p, Pq, a)))
    rule1240 = ReplacementRule(pattern1240, lambda c, x, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Condition(With(List(Set(Integer(Pqq), Coeff(Pq, x, Integer(q)))), Add(Mul(Pow(c, p), Integer(Pqq), ArcTanh(Mul(Add(b, Mul(Integer(2), c, x)), Pow(Mul(Integer(2), Rt(c, Integer(2)), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1))))), Int(Mul(ExpandToSum(Add(Pq, Mul(Integer(-1), Mul(Pow(c, Add(p, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Mul(Integer(Pqq), Pow(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Integer(-1)))))), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))), Equal(Add(Integer(q), Mul(Integer(2), p), Integer(1)), Integer(0)))))
    rubi.add(rule1240)

    pattern1241 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), NegQ(c_)), (c, x, b, p, Pq, a)))
    rule1241 = ReplacementRule(pattern1241, lambda c, x, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Condition(With(List(Set(Integer(Pqq), Coeff(Pq, x, Integer(q)))), Add(Mul(Mul(Integer(-1), Pow(Mul(Integer(-1), c), p)), Integer(Pqq), ArcTan(Mul(Add(b, Mul(Integer(2), c, x)), Pow(Mul(Integer(2), Rt(Mul(Integer(-1), c), Integer(2)), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))), Integer(-1))))), Int(Mul(ExpandToSum(Add(Pq, Mul(Integer(-1), Mul(Pow(Mul(Integer(-1), c), Add(p, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Mul(Integer(Pqq), Pow(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), Add(p, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Integer(-1)))))), x), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), p)), x))), Equal(Add(Integer(q), Mul(Integer(2), p), Integer(1)), Integer(0)))))
    rubi.add(rule1241)

    pattern1242 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_)), (n, c, x, m, n2, b, p, Pq, a, d)))
    rule1242 = ReplacementRule(pattern1242, lambda n, c, x, m, n2, b, p, Pq, a, d : With(List(Set(Integer(q), Expon(Pq, x))), Condition(With(List(Set(Integer(Pqq), Coeff(Pq, x, Integer(q)))), Add(Mul(Integer(Pqq), Pow(Mul(d, x), Add(m, Integer(q), Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(c, Pow(d, Add(Integer(q), Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Add(m, Integer(q), Mul(Integer(2), n, p), Integer(1))), Integer(-1)))), Int(Mul(Pow(Mul(d, x), m), ExpandToSum(Add(Pq, Mul(Integer(-1), Mul(Integer(Pqq), Pow(x, Integer(q)))), Mul(Integer(-1), Mul(Integer(Pqq), Mul(Add(Mul(a, Add(m, Integer(q), Mul(Integer(-1), Mul(Integer(2), n)), Integer(1)), Pow(x, Add(Integer(q), Mul(Integer(-1), Mul(Integer(2), n))))), Mul(b, Add(m, Integer(q), Mul(n, Add(p, Integer(-1))), Integer(1)), Pow(x, Add(Integer(q), Mul(Integer(-1), n))))), Pow(Mul(c, Add(m, Integer(q), Mul(Integer(2), n, p), Integer(1))), Integer(-1)))))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))), And(GreaterEqual(Integer(q), Mul(Integer(2), n)), Unequal(Add(m, Integer(q), Mul(Integer(2), n, p), Integer(1)), Integer(0)), Or(IntegerQ(Mul(Integer(2), p)), And(Equal(n, Integer(1)), IntegerQ(Mul(Integer(4), p))), IntegerQ(Add(p, Mul(Add(Integer(q), Integer(1)), Pow(Mul(Integer(2), n), Integer(-1))))))))))
    rubi.add(rule1242)

    pattern1243 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_)), (n, c, x, n2, b, p, Pq, a)))
    rule1243 = ReplacementRule(pattern1243, lambda n, c, x, n2, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Condition(With(List(Set(Integer(Pqq), Coeff(Pq, x, Integer(q)))), Add(Mul(Integer(Pqq), Pow(x, Add(Integer(q), Mul(Integer(-1), Mul(Integer(2), n)), Integer(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(c, Add(Integer(q), Mul(Integer(2), n, p), Integer(1))), Integer(-1)))), Int(Mul(ExpandToSum(Add(Pq, Mul(Integer(-1), Mul(Integer(Pqq), Pow(x, Integer(q)))), Mul(Integer(-1), Mul(Integer(Pqq), Mul(Add(Mul(a, Add(Integer(q), Mul(Integer(-1), Mul(Integer(2), n)), Integer(1)), Pow(x, Add(Integer(q), Mul(Integer(-1), Mul(Integer(2), n))))), Mul(b, Add(Integer(q), Mul(n, Add(p, Integer(-1))), Integer(1)), Pow(x, Add(Integer(q), Mul(Integer(-1), n))))), Pow(Mul(c, Add(Integer(q), Mul(Integer(2), n, p), Integer(1))), Integer(-1)))))), x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x))), And(GreaterEqual(Integer(q), Mul(Integer(2), n)), Unequal(Add(Integer(q), Mul(Integer(2), n, p), Integer(1)), Integer(0)), Or(IntegerQ(Mul(Integer(2), p)), And(Equal(n, Integer(1)), IntegerQ(Mul(Integer(4), p))), IntegerQ(Add(p, Mul(Add(Integer(q), Integer(1)), Pow(Mul(Integer(2), n), Integer(-1))))))))))
    rubi.add(rule1243)

    pattern1244 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(PolyQ(Pq_, Pow(x_, n_)))), (n, c, x, m, n2, b, p, Pq, a, d)))
    rule1244 = ReplacementRule(pattern1244, lambda n, c, x, m, n2, b, p, Pq, a, d : Module(List(Set(Integer(q), Expon(Pq, x)), Integer(j), Integer(k)), Int(Sum(Mul(Mul(Integer(1), Pow(Pow(d, Integer(j)), Integer(-1))), Pow(Mul(d, x), Add(m, Integer(j))), Sum(Mul(Coeff(Pq, x, Add(Integer(j), Mul(Integer(k), n))), Pow(x, Mul(Integer(k), n))), List(Integer(k), Integer(0), Add(Mul(Add(Integer(q), Mul(Integer(-1), Integer(j))), Pow(n, Integer(-1))), Integer(1)))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), List(Integer(j), Integer(0), Add(n, Integer(-1)))), x)))
    rubi.add(rule1244)

    pattern1245 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_), Not(PolyQ(Pq_, Pow(x_, n_)))), (n, c, x, n2, b, p, Pq, a)))
    rule1245 = ReplacementRule(pattern1245, lambda n, c, x, n2, b, p, Pq, a : Module(List(Set(Integer(q), Expon(Pq, x)), Integer(j), Integer(k)), Int(Sum(Mul(Pow(x, Integer(j)), Sum(Mul(Coeff(Pq, x, Add(Integer(j), Mul(Integer(k), n))), Pow(x, Mul(Integer(k), n))), List(Integer(k), Integer(0), Add(Mul(Add(Integer(q), Mul(Integer(-1), Integer(j))), Pow(n, Integer(-1))), Integer(1)))), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), List(Integer(j), Integer(0), Add(n, Integer(-1)))), x)))
    rubi.add(rule1245)

    pattern1246 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_)), (n, c, x, m, n2, b, Pq, a, d)))
    rule1246 = ReplacementRule(pattern1246, lambda n, c, x, m, n2, b, Pq, a, d : Int(RationalFunctionExpand(Mul(Pow(Mul(d, x), m), Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1)))), x), x))
    rubi.add(rule1246)

    pattern1247 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), PositiveIntegerQ(n_)), (n, c, x, n2, b, Pq, a)))
    rule1247 = ReplacementRule(pattern1247, lambda n, c, x, n2, b, Pq, a : Int(RationalFunctionExpand(Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Integer(-1))), x), x))
    rubi.add(rule1247)

    pattern1248 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), IntegerQ(m_)), (n, c, x, m, n2, b, p, Pq, a)))
    rule1248 = ReplacementRule(pattern1248, lambda n, c, x, m, n2, b, p, Pq, a : With(List(Set(Integer(q), Expon(Pq, x))), Mul(Integer(-1), Subst(Int(Mul(ExpandToSum(Mul(Pow(x, Integer(q)), ReplaceAll(Pq, Rule(x, Pow(x, Integer(-1))))), x), Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(q), Integer(2))), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1)))))))
    rubi.add(rule1248)

    pattern1249 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), FractionQ(m_)), (n, c, x, m, n2, b, p, Pq, a, d)))
    rule1249 = ReplacementRule(pattern1249, lambda n, c, x, m, n2, b, p, Pq, a, d : With(List(Set(Integer(g), Denominator(m)), Set(Integer(q), Expon(Pq, x))), Mul(Mul(Mul(Integer(-1), Integer(g)), Pow(d, Integer(-1))), Subst(Int(Mul(ExpandToSum(Mul(Pow(x, Mul(Integer(g), Integer(q))), ReplaceAll(Pq, Rule(x, Mul(Pow(d, Integer(-1)), Pow(x, Mul(Integer(-1), Integer(g))))))), x), Mul(Pow(Add(a, Mul(b, Pow(d, Mul(Integer(-1), n)), Pow(x, Mul(Mul(Integer(-1), Integer(g)), n))), Mul(c, Pow(d, Mul(Integer(-2), n)), Pow(x, Mul(Integer(-2), Integer(g), n)))), p), Pow(Pow(x, Add(Mul(Integer(g), Add(m, Integer(q), Integer(1))), Integer(1))), Integer(-1)))), x), x, Mul(Integer(1), Pow(Pow(Mul(d, x), Mul(Integer(1), Pow(Integer(g), Integer(-1)))), Integer(-1)))))))
    rubi.add(rule1249)

    pattern1250 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(n_), Not(RationalQ(m_))), (n, c, x, n2, m, b, p, Pq, a, d)))
    rule1250 = ReplacementRule(pattern1250, lambda n, c, x, n2, m, b, p, Pq, a, d : With(List(Set(Integer(q), Expon(Pq, x))), Mul(Mul(Integer(-1), Pow(Mul(d, x), m)), Pow(Pow(x, Integer(-1)), m), Subst(Int(Mul(ExpandToSum(Mul(Pow(x, Integer(q)), ReplaceAll(Pq, Rule(x, Pow(x, Integer(-1))))), x), Mul(Pow(Add(a, Mul(b, Pow(x, Mul(Integer(-1), n))), Mul(c, Pow(x, Mul(Integer(-2), n)))), p), Pow(Pow(x, Add(m, Integer(q), Integer(2))), Integer(-1)))), x), x, Mul(Integer(1), Pow(x, Integer(-1)))))))
    rubi.add(rule1250)

    pattern1251 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(n_)), (n, c, x, m, n2, b, p, Pq, a)))
    rule1251 = ReplacementRule(pattern1251, lambda n, c, x, m, n2, b, p, Pq, a : With(List(Set(Integer(g), Denominator(n))), Mul(Integer(g), Subst(Int(Mul(Pow(x, Add(Mul(Integer(g), Add(m, Integer(1))), Integer(-1))), ReplaceAll(Pq, Rule(x, Pow(x, Integer(g)))), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(g), n))), Mul(c, Pow(x, Mul(Integer(2), Integer(g), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1))))))))
    rubi.add(rule1251)

    pattern1252 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(n_)), (n, c, x, n2, b, p, Pq, a)))
    rule1252 = ReplacementRule(pattern1252, lambda n, c, x, n2, b, p, Pq, a : With(List(Set(Integer(g), Denominator(n))), Mul(Integer(g), Subst(Int(Mul(Pow(x, Add(Integer(g), Integer(-1))), ReplaceAll(Pq, Rule(x, Pow(x, Integer(g)))), Pow(Add(a, Mul(b, Pow(x, Mul(Integer(g), n))), Mul(c, Pow(x, Mul(Integer(2), Integer(g), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1))))))))
    rubi.add(rule1252)

    pattern1253 = Pattern(Int(Mul(Pq_, Pow(Mul(d_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(n_), PositiveIntegerQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), (n, c, x, n2, m, b, p, Pq, a, d)))
    rule1253 = ReplacementRule(pattern1253, lambda n, c, x, n2, m, b, p, Pq, a, d : Mul(Pow(d, Add(m, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), Mul(Sqrt(Mul(d, x)), Pow(Sqrt(x), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule1253)

    pattern1254 = Pattern(Int(Mul(Pq_, Pow(Mul(d_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(n_), NegativeIntegerQ(Add(m_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1))))))), (n, c, x, n2, m, b, p, Pq, a, d)))
    rule1254 = ReplacementRule(pattern1254, lambda n, c, x, n2, m, b, p, Pq, a, d : Mul(Pow(d, Add(m, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Mul(Sqrt(x), Pow(Sqrt(Mul(d, x)), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule1254)

    pattern1255 = Pattern(Int(Mul(Pq_, Pow(Mul(d_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), FractionQ(n_)), (n, c, x, n2, m, b, p, Pq, a, d)))
    rule1255 = ReplacementRule(pattern1255, lambda n, c, x, n2, m, b, p, Pq, a, d : Mul(Mul(Pow(Mul(d, x), m), Pow(Pow(x, m), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule1255)

    pattern1256 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, c, x, m, n2, b, p, Pq, a)))
    rule1256 = ReplacementRule(pattern1256, lambda n, c, x, m, n2, b, p, Pq, a : Mul(Mul(Integer(1), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Mul(ReplaceAll(SubstFor(Pow(x, n), Pq, x), Rule(x, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), Pow(Add(a, Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1)))))), Mul(c, Pow(x, Simplify(Mul(Integer(2), Mul(n, Pow(Add(m, Integer(1)), Integer(-1)))))))), p)), x), x, Pow(x, Add(m, Integer(1))))))
    rubi.add(rule1256)

    pattern1257 = Pattern(Int(Mul(Pq_, Pow(Mul(d_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, Pow(x_, n_)), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, c, x, n2, m, b, p, Pq, a, d)))
    rule1257 = ReplacementRule(pattern1257, lambda n, c, x, n2, m, b, p, Pq, a, d : Mul(Mul(Pow(Mul(d, x), m), Pow(Pow(x, m), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x)))
    rubi.add(rule1257)

    pattern1258 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, c, x, m, n2, b, Pq, a, d)))
    rule1258 = ReplacementRule(pattern1258, lambda n, c, x, m, n2, b, Pq, a, d : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Mul(Pq, Pow(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, n))), Integer(-1)))), x)), Mul(Integer(-1), Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Pow(Mul(d, x), m), Mul(Pq, Pow(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, n))), Integer(-1)))), x))))))
    rubi.add(rule1258)

    pattern1259 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_))))), (n, c, x, n2, b, Pq, a)))
    rule1259 = ReplacementRule(pattern1259, lambda n, c, x, n2, b, Pq, a : With(List(Set(Integer(q), Rt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Integer(2)))), Add(Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Pq, Pow(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, n))), Integer(-1))), x)), Mul(Integer(-1), Mul(Integer(2), Mul(c, Pow(Integer(q), Integer(-1))), Int(Mul(Pq, Pow(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, n))), Integer(-1))), x))))))
    rubi.add(rule1259)

    pattern1260 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NegativeIntegerQ(Add(p_, Integer(1)))), (n, c, x, m, n2, b, p, Pq, a, d)))
    rule1260 = ReplacementRule(pattern1260, lambda n, c, x, m, n2, b, p, Pq, a, d : Int(ExpandIntegrand(Mul(Pow(Mul(d, x), m), Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule1260)

    pattern1261 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), PolyQ(Pq_, x_), NegativeIntegerQ(Add(p_, Integer(1)))), (n, c, x, n2, b, p, Pq, a)))
    rule1261 = ReplacementRule(pattern1261, lambda n, c, x, n2, b, p, Pq, a : Int(ExpandIntegrand(Mul(Pq, Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x))
    rubi.add(rule1261)

    pattern1262 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('d', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), cons((Mul(Pow(Mul(d_, x_), m_), Pq_, Pow(Add(a_, Mul(b_, Pow(x_, n_)), Mul(c_, Pow(x_, Mul(Integer(2), n_)))), p_)), x_), (n, c, x, m, n2, b, p, Pq, a, d)))
    rule1262 = ReplacementRule(pattern1262, lambda n, c, x, m, n2, b, p, Pq, a, d : Defer(Integer(Int)))
    rubi.add(rule1262)

    pattern1263 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n2', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), cons((Mul(Pq_, Pow(Add(a_, Mul(b_, Pow(x_, n_)), Mul(c_, Pow(x_, Mul(Integer(2), n_)))), p_)), x_), (n, c, x, n2, b, p, Pq, a)))
    rule1263 = ReplacementRule(pattern1263, lambda n, c, x, n2, b, p, Pq, a : Defer(Integer(Int)))
    rubi.add(rule1263)

    pattern1264 = Pattern(Int(Mul(Pq_, Pow(u_, Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(v_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(v_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), LinearPairQ(u_, v_, x_), PolyQ(Pq_, Pow(v_, n_))), (n, c, x, m, n2, u, b, p, Pq, a, v)))
    rule1264 = ReplacementRule(pattern1264, lambda n, c, x, m, n2, u, b, p, Pq, a, v : Mul(Mul(Pow(u, m), Pow(Mul(Coefficient(v, x, Integer(1)), Pow(v, m)), Integer(-1))), Subst(Int(Mul(Pow(x, m), SubstFor(v, Pq, x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x, v)))
    rubi.add(rule1264)

    pattern1265 = Pattern(Int(Mul(Pq_, Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(v_, Wildcard.optional('n2', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(v_, n_))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), LinearQ(v_, x_), PolyQ(Pq_, Pow(v_, n_))), (n, c, x, n2, b, p, Pq, a, v)))
    rule1265 = ReplacementRule(pattern1265, lambda n, c, x, n2, b, p, Pq, a, v : Mul(Mul(Integer(1), Pow(Coefficient(v, x, Integer(1)), Integer(-1))), Subst(Int(Mul(SubstFor(v, Pq, x), Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), p)), x), x, v)))
    rubi.add(rule1265)

    pattern1266 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), ZeroQ(Add(Mul(j_, p_), Mul(Integer(-1), n_), j_, Integer(1)))), (n, x, j, b, p, a)))
    rule1266 = ReplacementRule(pattern1266, lambda n, x, j, b, p, a : Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(b, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1)), Pow(x, Add(n, Integer(-1)))), Integer(-1))))
    rubi.add(rule1266)

    pattern1267 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), NegativeIntegerQ(Simplify(Mul(Add(Mul(n_, p_), n_, Mul(Integer(-1), j_), Integer(1)), Pow(Add(n_, Mul(Integer(-1), j_)), Integer(-1))))), RationalQ(p_), Less(p_, Integer(-1))), (n, x, j, b, p, a)))
    rule1267 = ReplacementRule(pattern1267, lambda n, x, j, b, p, a : Add(Mul(Mul(Integer(-1), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1)))), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1)), Pow(x, Add(j, Integer(-1)))), Integer(-1))), Mul(Mul(Add(Mul(n, p), n, Mul(Integer(-1), j), Integer(1)), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Pow(x, j), Integer(-1))), x))))
    rubi.add(rule1267)

    pattern1268 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), NegativeIntegerQ(Simplify(Mul(Add(Mul(n_, p_), n_, Mul(Integer(-1), j_), Integer(1)), Pow(Add(n_, Mul(Integer(-1), j_)), Integer(-1))))), NonzeroQ(Add(Mul(j_, p_), Integer(1)))), (n, x, j, b, p, a)))
    rule1268 = ReplacementRule(pattern1268, lambda n, x, j, b, p, a : Add(Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, Add(Mul(j, p), Integer(1)), Pow(x, Add(j, Integer(-1)))), Integer(-1))), Mul(Integer(-1), Mul(b, Mul(Add(Mul(n, p), n, Mul(Integer(-1), j), Integer(1)), Pow(Mul(a, Add(Mul(j, p), Integer(1))), Integer(-1))), Int(Mul(Pow(x, Add(n, Mul(Integer(-1), j))), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule1268)

    pattern1269 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, n_, p_), Less(Integer(0), j_, n_), Greater(p_, Integer(0)), Less(Add(Mul(j_, p_), Integer(1)), Integer(0))), (n, x, j, b, p, a)))
    rule1269 = ReplacementRule(pattern1269, lambda n, x, j, b, p, a : Add(Mul(x, Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p), Pow(Add(Mul(j, p), Integer(1)), Integer(-1)))), Mul(Integer(-1), Mul(b, Add(n, Mul(Integer(-1), j)), Mul(p, Pow(Add(Mul(j, p), Integer(1)), Integer(-1))), Int(Mul(Pow(x, n), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule1269)

    pattern1270 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, n_, p_), Less(Integer(0), j_, n_), Greater(p_, Integer(0)), NonzeroQ(Add(Mul(n_, p_), Integer(1)))), (n, x, j, b, p, a)))
    rule1270 = ReplacementRule(pattern1270, lambda n, x, j, b, p, a : Add(Mul(x, Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p), Pow(Add(Mul(n, p), Integer(1)), Integer(-1)))), Mul(a, Add(n, Mul(Integer(-1), j)), Mul(p, Pow(Add(Mul(n, p), Integer(1)), Integer(-1))), Int(Mul(Pow(x, j), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1270)

    pattern1271 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, n_, p_), Less(Integer(0), j_, n_), Less(p_, Integer(-1)), Greater(Add(Mul(j_, p_), Integer(1)), Add(n_, Mul(Integer(-1), j_)))), (n, x, j, b, p, a)))
    rule1271 = ReplacementRule(pattern1271, lambda n, x, j, b, p, a : Add(Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(b, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1)), Pow(x, Add(n, Integer(-1)))), Integer(-1))), Mul(Integer(-1), Mul(Mul(Add(Mul(j, p), Mul(Integer(-1), n), j, Integer(1)), Pow(Mul(b, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Pow(x, n), Integer(-1))), x)))))
    rubi.add(rule1271)

    pattern1272 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, n_, p_), Less(Integer(0), j_, n_), Less(p_, Integer(-1))), (n, x, j, b, p, a)))
    rule1272 = ReplacementRule(pattern1272, lambda n, x, j, b, p, a : Add(Mul(Mul(Integer(-1), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1)))), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1)), Pow(x, Add(j, Integer(-1)))), Integer(-1))), Mul(Mul(Add(Mul(n, p), n, Mul(Integer(-1), j), Integer(1)), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Pow(x, j), Integer(-1))), x))))
    rubi.add(rule1272)

    pattern1273 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), cons(And(PositiveIntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), ZeroQ(Simplify(Add(Mul(j_, p_), Integer(1))))), (n, x, j, b, p, a)))
    rule1273 = ReplacementRule(pattern1273, lambda n, x, j, b, p, a : Add(Mul(x, Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p), Pow(Mul(p, Add(n, Mul(Integer(-1), j))), Integer(-1)))), Mul(a, Int(Mul(Pow(x, j), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1273)

    pattern1274 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), cons(And(NonzeroQ(Add(n_, Integer(-2)))), (b, n, x, a)))
    rule1274 = ReplacementRule(pattern1274, lambda b, n, x, a : Mul(Mul(Integer(2), Pow(Add(Integer(2), Mul(Integer(-1), n)), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Integer(1), Mul(Integer(-1), Mul(a, Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(Mul(a, Pow(x, Integer(2))), Mul(b, Pow(x, n)))), Integer(-1))))))
    rubi.add(rule1274)

    pattern1275 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), cons(And(NegativeIntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), ZeroQ(Simplify(Add(Mul(j_, p_), Integer(1))))), (n, x, j, b, p, a)))
    rule1275 = ReplacementRule(pattern1275, lambda n, x, j, b, p, a : Add(Mul(Mul(Integer(-1), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1)))), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1)), Pow(x, Add(j, Integer(-1)))), Integer(-1))), Mul(Mul(Add(Mul(n, p), n, Mul(Integer(-1), j), Integer(1)), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Pow(x, j), Integer(-1))), x))))
    rubi.add(rule1275)

    pattern1276 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Rational(Integer(-1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(RationalQ(j_, n_), Less(Mul(Integer(2), Add(n_, Integer(-1))), j_, n_)), (n, x, j, b, a)))
    rule1276 = ReplacementRule(pattern1276, lambda n, x, j, b, a : Add(Mul(Integer(-2), Mul(Sqrt(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n)))), Pow(Mul(b, Add(n, Integer(-2)), Pow(x, Add(n, Integer(-1)))), Integer(-1)))), Mul(Integer(-1), Mul(a, Mul(Add(Mul(Integer(2), n), Mul(Integer(-1), j), Integer(-2)), Pow(Mul(b, Add(n, Integer(-2))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Pow(x, Add(n, Mul(Integer(-1), j))), Sqrt(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))))), Integer(-1))), x)))))
    rubi.add(rule1276)

    pattern1277 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), PosQ(Add(n_, Mul(Integer(-1), j_)))), (n, x, j, b, p, a)))
    rule1277 = ReplacementRule(pattern1277, lambda n, x, j, b, p, a : Mul(Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), FracPart(p)), Pow(Mul(Pow(x, Mul(j, FracPart(p))), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), j))))), FracPart(p))), Integer(-1))), Int(Mul(Pow(x, Mul(j, p)), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), j))))), p)), x)))
    rubi.add(rule1277)

    pattern1278 = Pattern(Int(Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(u_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(u_, Wildcard.optional('n', Integer(1))))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(Integer(-1), x_)))), (n, x, u, j, b, p, a)))
    rule1278 = ReplacementRule(pattern1278, lambda n, x, u, j, b, p, a : Mul(Mul(Integer(1), Pow(Coefficient(u, x, Integer(1)), Integer(-1))), Subst(Int(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p), x), x, u)))
    rubi.add(rule1278)

    pattern1279 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), ZeroQ(Simplify(Add(m_, Mul(Integer(-1), n_), Integer(1))))), (n, x, m, j, b, p, a)))
    rule1279 = ReplacementRule(pattern1279, lambda n, x, m, j, b, p, a : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Pow(Add(Mul(a, Pow(x, Simplify(Mul(j, Pow(n, Integer(-1)))))), Mul(b, x)), p), x), x, Pow(x, n))))
    rubi.add(rule1279)

    pattern1280 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), ZeroQ(Add(m_, Mul(n_, p_), n_, Mul(Integer(-1), j_), Integer(1))), Or(IntegerQ(j_), PositiveQ(c_))), (n, c, x, m, j, b, p, a)))
    rule1280 = ReplacementRule(pattern1280, lambda n, c, x, m, j, b, p, a : Mul(Mul(Integer(-1), Pow(c, Add(j, Integer(-1)))), Pow(Mul(c, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1)))))
    rubi.add(rule1280)

    pattern1281 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), NegativeIntegerQ(Simplify(Mul(Add(m_, Mul(n_, p_), n_, Mul(Integer(-1), j_), Integer(1)), Pow(Add(n_, Mul(Integer(-1), j_)), Integer(-1))))), RationalQ(p_), Less(p_, Integer(-1)), Or(IntegerQ(j_), PositiveQ(c_))), (n, c, x, m, j, b, p, a)))
    rule1281 = ReplacementRule(pattern1281, lambda n, c, x, m, j, b, p, a : Add(Mul(Mul(Integer(-1), Pow(c, Add(j, Integer(-1)))), Pow(Mul(c, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1)))), Mul(Pow(c, j), Mul(Add(m, Mul(n, p), n, Mul(Integer(-1), j), Integer(1)), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(Integer(-1), j))), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1)))), x))))
    rubi.add(rule1281)

    pattern1282 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), NegativeIntegerQ(Simplify(Mul(Add(m_, Mul(n_, p_), n_, Mul(Integer(-1), j_), Integer(1)), Pow(Add(n_, Mul(Integer(-1), j_)), Integer(-1))))), NonzeroQ(Add(m_, Mul(j_, p_), Integer(1))), Or(IntegersQ(j_, n_), PositiveQ(c_))), (n, c, x, m, j, b, p, a)))
    rule1282 = ReplacementRule(pattern1282, lambda n, c, x, m, j, b, p, a : Add(Mul(Pow(c, Add(j, Integer(-1))), Pow(Mul(c, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, Add(m, Mul(j, p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(b, Mul(Add(m, Mul(n, p), n, Mul(Integer(-1), j), Integer(1)), Pow(Mul(a, Pow(c, Add(n, Mul(Integer(-1), j))), Add(m, Mul(j, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, n, Mul(Integer(-1), j))), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule1282)

    pattern1283 = Pattern(Int(Mul(Pow(Mul(c_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), NegativeIntegerQ(Simplify(Mul(Add(m_, Mul(n_, p_), n_, Mul(Integer(-1), j_), Integer(1)), Pow(Add(n_, Mul(Integer(-1), j_)), Integer(-1)))))), (n, c, x, m, j, b, p, a)))
    rule1283 = ReplacementRule(pattern1283, lambda n, c, x, m, j, b, p, a : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1283)

    pattern1284 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))), NonzeroQ(Add(Pow(n_, Integer(2)), Integer(-1)))), (n, x, m, j, b, p, a)))
    rule1284 = ReplacementRule(pattern1284, lambda n, x, m, j, b, p, a : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), Pow(Add(Mul(a, Pow(x, Simplify(Mul(j, Pow(n, Integer(-1)))))), Mul(b, x)), p)), x), x, Pow(x, n))))
    rubi.add(rule1284)

    pattern1285 = Pattern(Int(Mul(Pow(Mul(c_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))), NonzeroQ(Add(Pow(n_, Integer(2)), Integer(-1)))), (n, c, x, m, j, b, p, a)))
    rule1285 = ReplacementRule(pattern1285, lambda n, c, x, m, j, b, p, a : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1285)

    pattern1286 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), m_), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, m_, n_, p_), Less(Integer(0), j_, n_), Or(IntegersQ(j_, n_), PositiveQ(c_)), Greater(p_, Integer(0)), Less(Add(m_, Mul(j_, p_), Integer(1)), Integer(0))), (n, c, x, m, j, b, p, a)))
    rule1286 = ReplacementRule(pattern1286, lambda n, c, x, m, j, b, p, a : Add(Mul(Pow(Mul(c, x), Add(m, Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p), Pow(Mul(c, Add(m, Mul(j, p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(b, p, Mul(Add(n, Mul(Integer(-1), j)), Pow(Mul(Pow(c, n), Add(m, Mul(j, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, n)), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(-1)))), x)))))
    rubi.add(rule1286)

    pattern1287 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, n_, p_), Less(Integer(0), j_, n_), Or(IntegersQ(j_, n_), PositiveQ(c_)), Greater(p_, Integer(0)), NonzeroQ(Add(m_, Mul(n_, p_), Integer(1)))), (n, c, x, m, j, b, p, a)))
    rule1287 = ReplacementRule(pattern1287, lambda n, c, x, m, j, b, p, a : Add(Mul(Pow(Mul(c, x), Add(m, Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p), Pow(Mul(c, Add(m, Mul(n, p), Integer(1))), Integer(-1)))), Mul(a, Add(n, Mul(Integer(-1), j)), Mul(p, Pow(Mul(Pow(c, j), Add(m, Mul(n, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, j)), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1287)

    pattern1288 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, m_, n_, p_), Less(Integer(0), j_, n_), Or(IntegersQ(j_, n_), PositiveQ(c_)), Less(p_, Integer(-1)), Greater(Add(m_, Mul(j_, p_), Integer(1)), Add(n_, Mul(Integer(-1), j_)))), (n, c, x, m, j, b, p, a)))
    rule1288 = ReplacementRule(pattern1288, lambda n, c, x, m, j, b, p, a : Add(Mul(Pow(c, Add(n, Integer(-1))), Pow(Mul(c, x), Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(b, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(c, n), Mul(Add(m, Mul(j, p), Mul(Integer(-1), n), j, Integer(1)), Pow(Mul(b, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(Integer(-1), n))), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1)))), x)))))
    rubi.add(rule1288)

    pattern1289 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, n_, p_), Less(Integer(0), j_, n_), Or(IntegersQ(j_, n_), PositiveQ(c_)), Less(p_, Integer(-1))), (n, c, x, m, j, b, p, a)))
    rule1289 = ReplacementRule(pattern1289, lambda n, c, x, m, j, b, p, a : Add(Mul(Mul(Integer(-1), Pow(c, Add(j, Integer(-1)))), Pow(Mul(c, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1)))), Mul(Pow(c, j), Mul(Add(m, Mul(n, p), n, Mul(Integer(-1), j), Integer(1)), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(Integer(-1), j))), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1)))), x))))
    rubi.add(rule1289)

    pattern1290 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, n_), Less(Integer(0), j_, n_), Or(IntegersQ(j_, n_), PositiveQ(c_)), PositiveQ(Add(m_, Mul(j_, p_), Integer(1), Mul(Integer(-1), n_), j_)), NonzeroQ(Add(m_, Mul(n_, p_), Integer(1)))), (n, c, x, m, j, b, p, a)))
    rule1290 = ReplacementRule(pattern1290, lambda n, c, x, m, j, b, p, a : Add(Mul(Pow(c, Add(n, Integer(-1))), Pow(Mul(c, x), Add(m, Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(b, Add(m, Mul(n, p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(a, Pow(c, Add(n, Mul(Integer(-1), j))), Mul(Add(m, Mul(j, p), Mul(Integer(-1), n), j, Integer(1)), Pow(Mul(b, Add(m, Mul(n, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(Integer(-1), Add(n, Mul(Integer(-1), j))))), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule1290)

    pattern1291 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), RationalQ(j_, n_), Less(Integer(0), j_, n_), Or(IntegersQ(j_, n_), PositiveQ(c_)), NegativeQ(Add(m_, Mul(j_, p_), Integer(1)))), (n, c, x, m, j, b, p, a)))
    rule1291 = ReplacementRule(pattern1291, lambda n, c, x, m, j, b, p, a : Add(Mul(Pow(c, Add(j, Integer(-1))), Pow(Mul(c, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, Add(m, Mul(j, p), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(b, Mul(Add(m, Mul(n, p), n, Mul(Integer(-1), j), Integer(1)), Pow(Mul(a, Pow(c, Add(n, Mul(Integer(-1), j))), Add(m, Mul(j, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, n, Mul(Integer(-1), j))), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule1291)

    pattern1292 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), NonzeroQ(Add(m_, Integer(1))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, x, m, j, b, p, a)))
    rule1292 = ReplacementRule(pattern1292, lambda n, x, m, j, b, p, a : Mul(Mul(Integer(1), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Pow(Add(Mul(a, Pow(x, Simplify(Mul(j, Pow(Add(m, Integer(1)), Integer(-1)))))), Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), p), x), x, Pow(x, Add(m, Integer(1))))))
    rubi.add(rule1292)

    pattern1293 = Pattern(Int(Mul(Pow(Mul(c_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), NonzeroQ(Add(m_, Integer(1))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, c, x, m, j, b, p, a)))
    rule1293 = ReplacementRule(pattern1293, lambda n, c, x, m, j, b, p, a : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1293)

    pattern1294 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), cons(And(PositiveIntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), ZeroQ(Simplify(Add(m_, Mul(j_, p_), Integer(1)))), Or(IntegerQ(j_), PositiveQ(c_))), (n, c, x, m, j, b, p, a)))
    rule1294 = ReplacementRule(pattern1294, lambda n, c, x, m, j, b, p, a : Add(Mul(Pow(Mul(c, x), Add(m, Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p), Pow(Mul(c, p, Add(n, Mul(Integer(-1), j))), Integer(-1)))), Mul(Mul(a, Pow(Pow(c, j), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, j)), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(-1)))), x))))
    rubi.add(rule1294)

    pattern1295 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), cons(And(ZeroQ(Add(m_, Mul(Integer(-1), Mul(j_, Pow(Integer(2), Integer(-1)))), Integer(1))), NonzeroQ(Add(n_, Mul(Integer(-1), j_)))), (n, x, m, j, b, a)))
    rule1295 = ReplacementRule(pattern1295, lambda n, x, m, j, b, a : Mul(Mul(Integer(-2), Pow(Add(n, Mul(Integer(-1), j)), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Integer(1), Mul(Integer(-1), Mul(a, Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(Pow(x, Mul(j, Pow(Integer(2), Integer(-1)))), Pow(Sqrt(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n)))), Integer(-1))))))
    rubi.add(rule1295)

    pattern1296 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), cons(And(NegativeIntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), ZeroQ(Simplify(Add(m_, Mul(j_, p_), Integer(1)))), Or(IntegerQ(j_), PositiveQ(c_))), (n, c, x, m, j, b, p, a)))
    rule1296 = ReplacementRule(pattern1296, lambda n, c, x, m, j, b, p, a : Add(Mul(Mul(Integer(-1), Pow(c, Add(j, Integer(-1)))), Pow(Mul(c, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1)))), Mul(Pow(c, j), Mul(Add(m, Mul(n, p), n, Mul(Integer(-1), j), Integer(1)), Pow(Mul(a, Add(n, Mul(Integer(-1), j)), Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(Integer(-1), j))), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1)))), x))))
    rubi.add(rule1296)

    pattern1297 = Pattern(Int(Mul(Pow(Mul(c_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Add(p_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), ZeroQ(Simplify(Add(m_, Mul(j_, p_), Integer(1))))), (n, c, x, m, j, b, p, a)))
    rule1297 = ReplacementRule(pattern1297, lambda n, c, x, m, j, b, p, a : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1297)

    pattern1298 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), PosQ(Add(n_, Mul(Integer(-1), j_)))), (n, c, x, m, j, b, p, a)))
    rule1298 = ReplacementRule(pattern1298, lambda n, c, x, m, j, b, p, a : Mul(Pow(c, IntPart(m)), Pow(Mul(c, x), FracPart(m)), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), FracPart(p)), Pow(Mul(Pow(x, Add(FracPart(m), Mul(j, FracPart(p)))), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), j))))), FracPart(p))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(j, p))), Pow(Add(a, Mul(b, Pow(x, Add(n, Mul(Integer(-1), j))))), p)), x)))
    rubi.add(rule1298)

    pattern1299 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(v_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(v_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearPairQ(u_, v_, x_)), (n, x, m, u, j, b, p, a, v)))
    rule1299 = ReplacementRule(pattern1299, lambda n, x, m, u, j, b, p, a, v : Mul(Mul(Pow(u, m), Pow(Mul(Coefficient(v, x, Integer(1)), Pow(v, m)), Integer(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x), x, v)))
    rubi.add(rule1299)

    pattern1300 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('k', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, j_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, n_))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(j, x), FreeQ(k, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(k_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(k_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))), NonzeroQ(Add(Pow(n_, Integer(2)), Integer(-1)))), (n, q, c, x, m, b, j, p, a, d, k)))
    rule1300 = ReplacementRule(pattern1300, lambda n, q, c, x, m, b, j, p, a, d, k : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), Pow(Add(Mul(a, Pow(x, Simplify(Mul(j, Pow(n, Integer(-1)))))), Mul(b, Pow(x, Simplify(Mul(k, Pow(n, Integer(-1))))))), p), Pow(Add(c, Mul(d, x)), q)), x), x, Pow(x, n))))
    rubi.add(rule1300)

    pattern1301 = Pattern(Int(Mul(Pow(Mul(e_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('k', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, j_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(j, x), FreeQ(k, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(k_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(k_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))), NonzeroQ(Add(Pow(n_, Integer(2)), Integer(-1)))), (e, n, q, c, x, m, b, j, p, a, d, k)))
    rule1301 = ReplacementRule(pattern1301, lambda e, n, q, c, x, m, b, j, p, a, d, k : Mul(Pow(e, IntPart(m)), Mul(Pow(Mul(e, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, k))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule1301)

    pattern1302 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('jn', Integer(1))))), p_), Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(jn_, Mul(Integer(-1), j_), Mul(Integer(-1), n_))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(a_, d_, Add(m_, Mul(j_, p_), Integer(1))), Mul(Integer(-1), Mul(b_, c_, Add(m_, n_, Mul(p_, Add(j_, n_)), Integer(1)))))), Or(PositiveQ(e_), IntegersQ(j_)), NonzeroQ(Add(m_, Mul(j_, p_), Integer(1)))), (e, jn, n, c, x, m, b, j, p, a, d)))
    rule1302 = ReplacementRule(pattern1302, lambda e, jn, n, c, x, m, b, j, p, a, d : Mul(c, Pow(e, Add(j, Integer(-1))), Pow(Mul(e, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, Add(j, n)))), Add(p, Integer(1))), Pow(Mul(a, Add(m, Mul(j, p), Integer(1))), Integer(-1)))))
    rubi.add(rule1302)

    pattern1303 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('jn', Integer(1))))), p_), Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(jn_, Mul(Integer(-1), j_), Mul(Integer(-1), n_))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(j_, m_, p_), Less(p_, Integer(-1)), Inequality(Integer(0), Integer(Less), j_, Integer(LessEqual), m_), Or(PositiveQ(e_), IntegerQ(j_))), (e, jn, n, c, x, m, b, j, p, a, d)))
    rule1303 = ReplacementRule(pattern1303, lambda e, jn, n, c, x, m, b, j, p, a, d : Add(Mul(Mul(Integer(-1), Pow(e, Add(j, Integer(-1)))), Add(Mul(b, c), Mul(Integer(-1), Mul(a, d))), Pow(Mul(e, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, Add(j, n)))), Add(p, Integer(1))), Pow(Mul(a, b, n, Add(p, Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Pow(e, j), Mul(Add(Mul(a, d, Add(m, Mul(j, p), Integer(1))), Mul(Integer(-1), Mul(b, c, Add(m, n, Mul(p, Add(j, n)), Integer(1))))), Pow(Mul(a, b, n, Add(p, Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Mul(Integer(-1), j))), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, Add(j, n)))), Add(p, Integer(1)))), x)))))
    rubi.add(rule1303)

    pattern1304 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('jn', Integer(1))))), p_), Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(j, x), FreeQ(p, x), cons(And(ZeroQ(Add(jn_, Mul(Integer(-1), j_), Mul(Integer(-1), n_))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), RationalQ(m_, n_), Greater(n_, Integer(0)), Or(Less(Add(m_, Mul(j_, p_)), Integer(-1)), And(IntegersQ(Add(m_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Add(p_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), Less(p_, Integer(0)), Less(m_, Add(Mul(Mul(Integer(-1), n_), p_), Integer(-1))))), Or(PositiveQ(e_), IntegersQ(j_, n_)), NonzeroQ(Add(m_, Mul(j_, p_), Integer(1))), NonzeroQ(Add(m_, Mul(Integer(-1), n_), Mul(j_, p_), Integer(1)))), (e, jn, n, c, x, m, b, j, p, a, d)))
    rule1304 = ReplacementRule(pattern1304, lambda e, jn, n, c, x, m, b, j, p, a, d : Add(Mul(c, Pow(e, Add(j, Integer(-1))), Pow(Mul(e, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, Add(j, n)))), Add(p, Integer(1))), Pow(Mul(a, Add(m, Mul(j, p), Integer(1))), Integer(-1)))), Mul(Mul(Add(Mul(a, d, Add(m, Mul(j, p), Integer(1))), Mul(Integer(-1), Mul(b, c, Add(m, n, Mul(p, Add(j, n)), Integer(1))))), Pow(Mul(a, Pow(e, n), Add(m, Mul(j, p), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(e, x), Add(m, n)), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, Add(j, n)))), p)), x))))
    rubi.add(rule1304)

    pattern1305 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('jn', Integer(1))))), p_), Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(jn_, Mul(Integer(-1), j_), Mul(Integer(-1), n_))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), NonzeroQ(Add(m_, n_, Mul(p_, Add(j_, n_)), Integer(1))), Or(PositiveQ(e_), IntegerQ(j_))), (e, jn, n, c, x, m, b, j, p, a, d)))
    rule1305 = ReplacementRule(pattern1305, lambda e, jn, n, c, x, m, b, j, p, a, d : Add(Mul(d, Pow(e, Add(j, Integer(-1))), Pow(Mul(e, x), Add(m, Mul(Integer(-1), j), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, Add(j, n)))), Add(p, Integer(1))), Pow(Mul(b, Add(m, n, Mul(p, Add(j, n)), Integer(1))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Add(Mul(a, d, Add(m, Mul(j, p), Integer(1))), Mul(Integer(-1), Mul(b, c, Add(m, n, Mul(p, Add(j, n)), Integer(1))))), Pow(Mul(b, Add(m, n, Mul(p, Add(j, n)), Integer(1))), Integer(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, Add(j, n)))), p)), x)))))
    rubi.add(rule1305)

    pattern1306 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('k', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, j_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(j, x), FreeQ(k, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(k_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(k_, Pow(n_, Integer(-1))))), NonzeroQ(Add(m_, Integer(1))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, q, c, x, m, b, j, p, a, d, k)))
    rule1306 = ReplacementRule(pattern1306, lambda n, q, c, x, m, b, j, p, a, d, k : Mul(Mul(Integer(1), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Mul(Pow(Add(Mul(a, Pow(x, Simplify(Mul(j, Pow(Add(m, Integer(1)), Integer(-1)))))), Mul(b, Pow(x, Simplify(Mul(k, Pow(Add(m, Integer(1)), Integer(-1))))))), p), Pow(Add(c, Mul(d, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), q)), x), x, Pow(x, Add(m, Integer(1))))))
    rubi.add(rule1306)

    pattern1307 = Pattern(Int(Mul(Pow(Mul(e_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('q', Integer(1))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('k', Integer(1)))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, j_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(j, x), FreeQ(k, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(k_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(k_, Pow(n_, Integer(-1))))), NonzeroQ(Add(m_, Integer(1))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (e, n, q, c, x, m, b, j, p, a, d, k)))
    rule1307 = ReplacementRule(pattern1307, lambda e, n, q, c, x, m, b, j, p, a, d, k : Mul(Pow(e, IntPart(m)), Mul(Pow(Mul(e, x), FracPart(m)), Pow(Pow(x, FracPart(m)), Integer(-1))), Int(Mul(Pow(x, m), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, k))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule1307)

    pattern1308 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('jn', Integer(1))))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('q', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(jn_, Mul(Integer(-1), j_), Mul(Integer(-1), n_))), Not(IntegerQ(p_)), NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), Not(And(ZeroQ(Add(n_, Integer(-1))), ZeroQ(Add(j_, Integer(-1)))))), (e, jn, n, q, x, c, m, b, j, p, a, d)))
    rule1308 = ReplacementRule(pattern1308, lambda e, jn, n, q, x, c, m, b, j, p, a, d : Mul(Pow(e, IntPart(m)), Pow(Mul(e, x), FracPart(m)), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, Add(j, n)))), FracPart(p)), Pow(Mul(Pow(x, Add(FracPart(m), Mul(j, FracPart(p)))), Pow(Add(a, Mul(b, Pow(x, n))), FracPart(p))), Integer(-1))), Int(Mul(Pow(x, Add(m, Mul(j, p))), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule1308)

    pattern1309 = Pattern(Int(Mul(Pq_, Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), RationalQ(j_, n_), IntegerQ(Mul(j_, Pow(n_, Integer(-1)))), Less(Integer(-1), n_, Integer(1))), (n, x, j, b, Pq, p, a)))
    rule1309 = ReplacementRule(pattern1309, lambda n, x, j, b, Pq, p, a : With(List(Set(Integer(d), Denominator(n))), Mul(Integer(d), Subst(Int(Mul(Pow(x, Add(Integer(d), Integer(-1))), ReplaceAll(SubstFor(Pow(x, n), Pq, x), Rule(x, Pow(x, Mul(Integer(d), n)))), Pow(Add(Mul(a, Pow(x, Mul(Integer(d), j))), Mul(b, Pow(x, Mul(Integer(d), n)))), p)), x), x, Pow(x, Mul(Integer(1), Pow(Integer(d), Integer(-1))))))))
    rubi.add(rule1309)

    pattern1310 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, x, m, j, b, Pq, p, a)))
    rule1310 = ReplacementRule(pattern1310, lambda n, x, m, j, b, Pq, p, a : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, Integer(1)), Pow(n, Integer(-1)))), Integer(-1))), SubstFor(Pow(x, n), Pq, x), Pow(Add(Mul(a, Pow(x, Simplify(Mul(j, Pow(n, Integer(-1)))))), Mul(b, x)), p)), x), x, Pow(x, n))))
    rubi.add(rule1310)

    pattern1311 = Pattern(Int(Mul(Pq_, Pow(Mul(c_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))), RationalQ(m_), Greater(Pow(m_, Integer(2)), Integer(1))), (n, c, x, m, j, b, Pq, p, a)))
    rule1311 = ReplacementRule(pattern1311, lambda n, c, x, m, j, b, Pq, p, a : Mul(Pow(c, Mul(Sign(m), Quotient(m, Sign(m)))), Mul(Pow(Mul(c, x), Mod(m, Sign(m))), Pow(Pow(x, Mod(m, Sign(m))), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1311)

    pattern1312 = Pattern(Int(Mul(Pq_, Pow(Mul(c_, x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1)))))), (n, c, x, m, j, b, Pq, p, a)))
    rule1312 = ReplacementRule(pattern1312, lambda n, c, x, m, j, b, Pq, p, a : Mul(Mul(Pow(Mul(c, x), m), Pow(Pow(x, m), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1312)

    pattern1313 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), Not(IntegerQ(p_)), PositiveIntegerQ(j_, n_, Mul(j_, Pow(n_, Integer(-1)))), IntegerQ(m_)), (n, x, m, j, b, Pq, p, a)))
    rule1313 = ReplacementRule(pattern1313, lambda n, x, m, j, b, Pq, p, a : With(List(Set(Integer(g), GCD(Add(m, Integer(1)), n))), Condition(Mul(Mul(Integer(1), Pow(Integer(g), Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, Integer(1)), Pow(Integer(g), Integer(-1))), Integer(-1))), ReplaceAll(Pq, Rule(x, Pow(x, Mul(Integer(1), Pow(Integer(g), Integer(-1)))))), Pow(Add(Mul(a, Pow(x, Mul(j, Pow(Integer(g), Integer(-1))))), Mul(b, Pow(x, Mul(n, Pow(Integer(g), Integer(-1)))))), p)), x), x, Pow(x, Integer(g)))), Unequal(Integer(g), Integer(1)))))
    rubi.add(rule1313)

    pattern1314 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(PolyQ(Pq_, x_), Not(IntegerQ(p_)), PositiveIntegerQ(j_, n_), Less(j_, n_)), (n, c, x, m, j, b, Pq, p, a)))
    rule1314 = ReplacementRule(pattern1314, lambda n, c, x, m, j, b, Pq, p, a : With(List(Set(Integer(q), Expon(Pq, x))), Condition(With(List(Set(Integer(Pqq), Coeff(Pq, x, Integer(q)))), Add(Mul(Integer(Pqq), Pow(Mul(c, x), Add(m, Integer(q), Mul(Integer(-1), n), Integer(1))), Mul(Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), Add(p, Integer(1))), Pow(Mul(b, Pow(c, Add(Integer(q), Mul(Integer(-1), n), Integer(1))), Add(m, Integer(q), Mul(n, p), Integer(1))), Integer(-1)))), Int(Mul(Pow(Mul(c, x), m), ExpandToSum(Add(Pq, Mul(Integer(-1), Mul(Integer(Pqq), Pow(x, Integer(q)))), Mul(Integer(-1), Mul(a, Integer(Pqq), Add(m, Integer(q), Mul(Integer(-1), n), Integer(1)), Mul(Pow(x, Add(Integer(q), Mul(Integer(-1), n))), Pow(Mul(b, Add(m, Integer(q), Mul(n, p), Integer(1))), Integer(-1)))))), x), Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x))), And(Greater(Integer(q), Add(n, Integer(-1))), Unequal(Add(m, Integer(q), Mul(n, p), Integer(1)), Integer(0)), Or(IntegerQ(Mul(Integer(2), p)), IntegerQ(Add(p, Mul(Add(Integer(q), Integer(1)), Pow(Mul(Integer(2), n), Integer(-1))))))))))
    rubi.add(rule1314)

    pattern1315 = Pattern(Int(Mul(Pq_, Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, x, m, j, b, Pq, p, a)))
    rule1315 = ReplacementRule(pattern1315, lambda n, x, m, j, b, Pq, p, a : Mul(Mul(Integer(1), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Mul(ReplaceAll(SubstFor(Pow(x, n), Pq, x), Rule(x, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), Pow(Add(Mul(a, Pow(x, Simplify(Mul(j, Pow(Add(m, Integer(1)), Integer(-1)))))), Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, Integer(1)), Integer(-1))))))), p)), x), x, Pow(x, Add(m, Integer(1))))))
    rubi.add(rule1315)

    pattern1316 = Pattern(Int(Mul(Pq_, Pow(Mul(c_, x_), m_), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_)), RationalQ(m_), Greater(Pow(m_, Integer(2)), Integer(1))), (n, c, x, m, j, b, Pq, p, a)))
    rule1316 = ReplacementRule(pattern1316, lambda n, c, x, m, j, b, Pq, p, a : Mul(Pow(c, Mul(Sign(m), Quotient(m, Sign(m)))), Mul(Pow(Mul(c, x), Mod(m, Sign(m))), Pow(Pow(x, Mod(m, Sign(m))), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1316)

    pattern1317 = Pattern(Int(Mul(Pq_, Pow(Mul(c_, x_), m_), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PolyQ(Pq_, Pow(x_, n_)), Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_))), IntegerQ(Simplify(Mul(j_, Pow(n_, Integer(-1))))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, Integer(1)), Integer(-1))))), Not(IntegerQ(n_))), (n, c, x, m, j, b, Pq, p, a)))
    rule1317 = ReplacementRule(pattern1317, lambda n, c, x, m, j, b, Pq, p, a : Mul(Mul(Pow(Mul(c, x), m), Pow(Pow(x, m), Integer(-1))), Int(Mul(Pow(x, m), Pq, Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule1317)

    pattern1318 = Pattern(Int(Mul(Pq_, Pow(Mul(Wildcard.optional('c', Integer(1)), x_), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(j, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(PolyQ(Pq_, x_), PolyQ(Pq_, Pow(x_, n_))), Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_)))), (n, c, x, m, j, b, Pq, p, a)))
    rule1318 = ReplacementRule(pattern1318, lambda n, c, x, m, j, b, Pq, p, a : Int(ExpandIntegrand(Mul(Pow(Mul(c, x), m), Pq, Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x), x))
    rubi.add(rule1318)

    pattern1319 = Pattern(Int(Mul(Pq_, Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Wildcard.optional('j', Integer(1)))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(j, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(PolyQ(Pq_, x_), PolyQ(Pq_, Pow(x_, n_))), Not(IntegerQ(p_)), NonzeroQ(Add(n_, Mul(Integer(-1), j_)))), (n, x, j, b, Pq, p, a)))
    rule1319 = ReplacementRule(pattern1319, lambda n, x, j, b, Pq, p, a : Int(ExpandIntegrand(Mul(Pq, Pow(Add(Mul(a, Pow(x, j)), Mul(b, Pow(x, n))), p)), x), x))
    rubi.add(rule1319)

    pattern1320 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), cons(And(IntegerQ(p_), ZeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (x, b, p, a, d)))
    rule1320 = ReplacementRule(pattern1320, lambda x, b, p, a, d : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(a, Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(Mul(Integer(3), a), Mul(Integer(-1), Mul(b, x))), p), Pow(Add(Mul(Integer(3), a), Mul(Integer(2), b, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule1320)

    pattern1321 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), cons(And(PositiveIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (x, b, p, a, d)))
    rule1321 = ReplacementRule(pattern1321, lambda x, b, p, a, d : Int(ExpandToSum(Pow(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3)))), p), x), x))
    rubi.add(rule1321)

    pattern1322 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (x, b, p, a, d)))
    rule1322 = ReplacementRule(pattern1322, lambda x, b, p, a, d : With(List(Set(Integer(u), Factor(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3))))))), Condition(Mul(Pow(FreeFactors(Integer(u), x), p), Int(DistributeDegree(NonfreeFactors(Integer(u), x), p), x)), ProductQ(NonfreeFactors(Integer(u), x)))))
    rubi.add(rule1322)

    pattern1323 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (x, b, p, a, d)))
    rule1323 = ReplacementRule(pattern1323, lambda x, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-27), a, Pow(d, Integer(2))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Integer(4), Pow(b, Integer(3)), d), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(d, Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(Mul(Add(Mul(Integer(6), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p)), x))))
    rubi.add(rule1323)

    pattern1324 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), ZeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (x, b, p, a, d)))
    rule1324 = ReplacementRule(pattern1324, lambda x, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(Mul(Integer(3), a), Mul(Integer(-1), Mul(b, x))), p), Pow(Add(Mul(Integer(3), a), Mul(Integer(2), b, x)), Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(Mul(Integer(3), a), Mul(Integer(-1), Mul(b, x))), p), Pow(Add(Mul(Integer(3), a), Mul(Integer(2), b, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule1324)

    pattern1325 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (x, b, p, a, d)))
    rule1325 = ReplacementRule(pattern1325, lambda x, b, p, a, d : With(List(Set(Integer(u), NonfreeFactors(Factor(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3))))), x))), Condition(Mul(Mul(Pow(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3)))), p), Pow(DistributeDegree(Integer(u), p), Integer(-1))), Int(DistributeDegree(Integer(u), p), x)), ProductQ(Integer(u)))))
    rubi.add(rule1325)

    pattern1326 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (x, b, p, a, d)))
    rule1326 = ReplacementRule(pattern1326, lambda x, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-27), a, Pow(d, Integer(2))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Integer(4), Pow(b, Integer(3)), d), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(Mul(Add(Mul(Integer(6), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p)), Integer(-1))), Int(Mul(Pow(Add(Mul(Add(Mul(Integer(6), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p)), x))))
    rubi.add(rule1326)

    pattern1327 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(IntegerQ(p_), ZeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (e, f, x, m, b, p, a, d)))
    rule1327 = ReplacementRule(pattern1327, lambda e, f, x, m, b, p, a, d : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(a, Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(Mul(Integer(3), a), Mul(Integer(-1), Mul(b, x))), p), Pow(Add(Mul(Integer(3), a), Mul(Integer(2), b, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule1327)

    pattern1328 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(PositiveIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (e, f, x, m, b, p, a, d)))
    rule1328 = ReplacementRule(pattern1328, lambda e, f, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3)))), p)), x), x))
    rubi.add(rule1328)

    pattern1329 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (e, f, x, m, b, p, a, d)))
    rule1329 = ReplacementRule(pattern1329, lambda e, f, x, m, b, p, a, d : With(List(Set(Integer(u), Factor(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3))))))), Condition(Mul(Pow(FreeFactors(Integer(u), x), p), Int(Mul(Pow(Add(e, Mul(f, x)), m), DistributeDegree(NonfreeFactors(Integer(u), x), p)), x)), ProductQ(NonfreeFactors(Integer(u), x)))))
    rubi.add(rule1329)

    pattern1330 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (e, f, x, m, b, p, a, d)))
    rule1330 = ReplacementRule(pattern1330, lambda e, f, x, m, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-27), a, Pow(d, Integer(2))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Integer(4), Pow(b, Integer(3)), d), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(d, Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(Mul(Add(Mul(Integer(6), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p)), x))))
    rubi.add(rule1330)

    pattern1331 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), ZeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (e, f, x, m, b, p, a, d)))
    rule1331 = ReplacementRule(pattern1331, lambda e, f, x, m, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(Mul(Integer(3), a), Mul(Integer(-1), Mul(b, x))), p), Pow(Add(Mul(Integer(3), a), Mul(Integer(2), b, x)), Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(Mul(Integer(3), a), Mul(Integer(-1), Mul(b, x))), p), Pow(Add(Mul(Integer(3), a), Mul(Integer(2), b, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule1331)

    pattern1332 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (e, f, x, m, b, p, a, d)))
    rule1332 = ReplacementRule(pattern1332, lambda e, f, x, m, b, p, a, d : With(List(Set(Integer(u), NonfreeFactors(Factor(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3))))), x))), Condition(Mul(Mul(Pow(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3)))), p), Pow(DistributeDegree(Integer(u), p), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), DistributeDegree(Integer(u), p)), x)), ProductQ(Integer(u)))))
    rubi.add(rule1332)

    pattern1333 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(4), Pow(b_, Integer(3))), Mul(Integer(27), Pow(a_, Integer(2)), d_)))), (e, f, x, m, b, p, a, d)))
    rule1333 = ReplacementRule(pattern1333, lambda e, f, x, m, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-27), a, Pow(d, Integer(2))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Integer(4), Pow(b, Integer(3)), d), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(b, x), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(Mul(Add(Mul(Integer(6), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p)), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(Mul(Add(Mul(Integer(6), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Add(Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d), Mul(Integer(-1), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(-1), Mul(Integer(3), d, x))), p)), x))))
    rubi.add(rule1333)

    pattern1334 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), cons(And(IntegerQ(p_), ZeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (c, x, p, a, d)))
    rule1334 = ReplacementRule(pattern1334, lambda c, x, p, a, d : Mul(Mul(Integer(-1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(d, Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Integer(2), c), Mul(Integer(3), d, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule1334)

    pattern1335 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), cons(And(PositiveIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (c, x, p, a, d)))
    rule1335 = ReplacementRule(pattern1335, lambda c, x, p, a, d : Int(ExpandToSum(Pow(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), x), x))
    rubi.add(rule1335)

    pattern1336 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (c, x, p, a, d)))
    rule1336 = ReplacementRule(pattern1336, lambda c, x, p, a, d : With(List(Set(Integer(u), Factor(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))))))), Condition(Mul(Pow(FreeFactors(Integer(u), x), p), Int(DistributeDegree(NonfreeFactors(Integer(u), x), p), x)), ProductQ(NonfreeFactors(Integer(u), x)))))
    rubi.add(rule1336)

    pattern1337 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (c, x, p, a, d)))
    rule1337 = ReplacementRule(pattern1337, lambda c, x, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-2), Pow(c, Integer(3))), Mul(Integer(-1), Mul(Integer(27), a, Pow(d, Integer(2)))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Integer(4), a, Pow(c, Integer(3))), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(d, Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), x))))
    rubi.add(rule1337)

    pattern1338 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), ZeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (c, x, p, a, d)))
    rule1338 = ReplacementRule(pattern1338, lambda c, x, p, a, d : Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Integer(2), c), Mul(Integer(3), d, x)), Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Integer(2), c), Mul(Integer(3), d, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule1338)

    pattern1339 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (c, x, p, a, d)))
    rule1339 = ReplacementRule(pattern1339, lambda c, x, p, a, d : With(List(Set(Integer(u), NonfreeFactors(Factor(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))))), x))), Condition(Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(DistributeDegree(Integer(u), p), Integer(-1))), Int(DistributeDegree(Integer(u), p), x)), ProductQ(Integer(u)))))
    rubi.add(rule1339)

    pattern1340 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (c, x, p, a, d)))
    rule1340 = ReplacementRule(pattern1340, lambda c, x, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-2), Pow(c, Integer(3))), Mul(Integer(-1), Mul(Integer(27), a, Pow(d, Integer(2)))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Integer(4), a, Pow(c, Integer(3))), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), Integer(-1))), Int(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), x))))
    rubi.add(rule1340)

    pattern1341 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(IntegerQ(p_), ZeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (e, f, c, x, m, p, a, d)))
    rule1341 = ReplacementRule(pattern1341, lambda e, f, c, x, m, p, a, d : Mul(Mul(Integer(-1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(d, Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(c, Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Integer(2), c), Mul(Integer(3), d, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule1341)

    pattern1342 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(PositiveIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (e, f, c, x, m, p, a, d)))
    rule1342 = ReplacementRule(pattern1342, lambda e, f, c, x, m, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p)), x), x))
    rubi.add(rule1342)

    pattern1343 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (e, f, c, x, m, p, a, d)))
    rule1343 = ReplacementRule(pattern1343, lambda e, f, c, x, m, p, a, d : With(List(Set(Integer(u), Factor(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))))))), Condition(Mul(Pow(FreeFactors(Integer(u), x), p), Int(Mul(Pow(Add(e, Mul(f, x)), m), DistributeDegree(NonfreeFactors(Integer(u), x), p)), x)), ProductQ(NonfreeFactors(Integer(u), x)))))
    rubi.add(rule1343)

    pattern1344 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (e, f, c, x, m, p, a, d)))
    rule1344 = ReplacementRule(pattern1344, lambda e, f, c, x, m, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-2), Pow(c, Integer(3))), Mul(Integer(-1), Mul(Integer(27), a, Pow(d, Integer(2)))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Integer(4), a, Pow(c, Integer(3))), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(d, Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), x))))
    rubi.add(rule1344)

    pattern1345 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), ZeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (e, f, c, x, m, p, a, d)))
    rule1345 = ReplacementRule(pattern1345, lambda e, f, c, x, m, p, a, d : Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Integer(2), c), Mul(Integer(3), d, x)), Mul(Integer(2), p))), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(c, Mul(Integer(-1), Mul(Integer(3), d, x))), p), Pow(Add(Mul(Integer(2), c), Mul(Integer(3), d, x)), Mul(Integer(2), p))), x)))
    rubi.add(rule1345)

    pattern1346 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (e, f, c, x, m, p, a, d)))
    rule1346 = ReplacementRule(pattern1346, lambda e, f, c, x, m, p, a, d : With(List(Set(Integer(u), NonfreeFactors(Factor(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))))), x))), Condition(Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(DistributeDegree(Integer(u), p), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), DistributeDegree(Integer(u), p)), x)), ProductQ(Integer(u)))))
    rubi.add(rule1346)

    pattern1347 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Mul(Integer(4), Pow(c_, Integer(3))), Mul(Integer(27), a_, Pow(d_, Integer(2)))))), (e, f, c, x, m, p, a, d)))
    rule1347 = ReplacementRule(pattern1347, lambda e, f, c, x, m, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-2), Pow(c, Integer(3))), Mul(Integer(-1), Mul(Integer(27), a, Pow(d, Integer(2)))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Integer(4), a, Pow(c, Integer(3))), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), x))))
    rubi.add(rule1347)

    pattern1348 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(IntegerQ(p_), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1348 = ReplacementRule(pattern1348, lambda c, x, b, p, a, d : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), p), Pow(b, p), Pow(c, p)), Integer(-1))), Int(Pow(Add(b, Mul(c, x)), Mul(Integer(3), p)), x)))
    rubi.add(rule1348)

    pattern1349 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(IntegerQ(p_), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1349 = ReplacementRule(pattern1349, lambda c, x, b, p, a, d : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), p), Pow(b, p), Pow(c, p)), Integer(-1))), Subst(Int(Pow(Add(Mul(Integer(3), a, b, c), Mul(Integer(-1), Pow(b, Integer(3))), Mul(Pow(c, Integer(3)), Pow(x, Integer(3)))), p), x), x, Add(x, Mul(c, Pow(Mul(Integer(3), d), Integer(-1)))))))
    rubi.add(rule1349)

    pattern1350 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(IntegerQ(p_), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1350 = ReplacementRule(pattern1350, lambda c, x, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Pow(c, Integer(3)), Mul(Integer(-1), Mul(Integer(3), b, c, d))), Integer(3)))), Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), p), Pow(b, p), Pow(c, p)), Integer(-1))), Int(Mul(Pow(Add(b, Mul(Add(c, Mul(Integer(-1), Integer(r))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p)), x))))
    rubi.add(rule1350)

    pattern1351 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PositiveIntegerQ(p_), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1351 = ReplacementRule(pattern1351, lambda c, x, b, p, a, d : Int(ExpandToSum(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), x), x))
    rubi.add(rule1351)

    pattern1352 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1352 = ReplacementRule(pattern1352, lambda c, x, b, p, a, d : With(List(Set(Integer(u), Factor(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))))))), Condition(Mul(Pow(FreeFactors(Integer(u), x), p), Int(DistributeDegree(NonfreeFactors(Integer(u), x), p), x)), ProductQ(NonfreeFactors(Integer(u), x)))))
    rubi.add(rule1352)

    pattern1353 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1353 = ReplacementRule(pattern1353, lambda c, x, b, p, a, d : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(d, Mul(Integer(2), p))), Integer(-1))), Subst(Int(Pow(Add(Mul(Integer(2), Pow(c, Integer(3))), Mul(Integer(-1), Mul(Integer(9), b, c, d)), Mul(Integer(27), a, Pow(d, Integer(2))), Mul(Integer(-1), Mul(Integer(9), d, Add(Pow(c, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b, d))), x)), Mul(Integer(27), Pow(d, Integer(3)), Pow(x, Integer(3)))), p), x), x, Add(x, Mul(c, Pow(Mul(Integer(3), d), Integer(-1)))))))
    rubi.add(rule1353)

    pattern1354 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1354 = ReplacementRule(pattern1354, lambda c, x, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Pow(Add(b, Mul(c, x)), Mul(Integer(3), p)), Integer(-1))), Int(Pow(Add(b, Mul(c, x)), Mul(Integer(3), p)), x)))
    rubi.add(rule1354)

    pattern1355 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1355 = ReplacementRule(pattern1355, lambda c, x, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Pow(b, Integer(3)), Mul(Integer(-1), Mul(Integer(3), a, b, c))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(b, Mul(Integer(-1), Integer(r)), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p)), Integer(-1))), Int(Mul(Pow(Add(b, Mul(Integer(-1), Integer(r)), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p)), x))))
    rubi.add(rule1355)

    pattern1356 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1356 = ReplacementRule(pattern1356, lambda c, x, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Pow(c, Integer(3)), Mul(Integer(-1), Mul(Integer(3), b, c, d))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(b, Mul(Add(c, Mul(Integer(-1), Integer(r))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p)), Integer(-1))), Int(Mul(Pow(Add(b, Mul(Add(c, Mul(Integer(-1), Integer(r))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p)), x))))
    rubi.add(rule1356)

    pattern1357 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1357 = ReplacementRule(pattern1357, lambda c, x, b, p, a, d : With(List(Set(Integer(u), NonfreeFactors(Factor(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))))), x))), Condition(Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(DistributeDegree(Integer(u), p), Integer(-1))), Int(DistributeDegree(Integer(u), p), x)), ProductQ(Integer(u)))))
    rubi.add(rule1357)

    pattern1358 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (c, x, b, p, a, d)))
    rule1358 = ReplacementRule(pattern1358, lambda c, x, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-2), Pow(c, Integer(3))), Mul(Integer(9), b, c, d), Mul(Integer(-1), Mul(Integer(27), a, Pow(d, Integer(2)))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Mul(Integer(-1), Pow(b, Integer(2))), Pow(c, Integer(2))), Mul(Integer(4), a, Pow(c, Integer(3))), Mul(Integer(4), Pow(b, Integer(3)), d), Mul(Integer(-1), Mul(Integer(18), a, b, c, d)), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), b, d)), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d)), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(\(Integer(ImaginaryI)), Sqrt(Integer(3))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d)), Mul(\(Integer(ImaginaryI)), Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Mul(Integer(-1), \(Integer(ImaginaryI))), Sqrt(Integer(3))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), Integer(-1))), Int(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), b, d)), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d)), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(\(Integer(ImaginaryI)), Sqrt(Integer(3))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d)), Mul(\(Integer(ImaginaryI)), Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Mul(Integer(-1), \(Integer(ImaginaryI))), Sqrt(Integer(3))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), x))))
    rubi.add(rule1358)

    pattern1359 = Pattern(Int(Pow(u_, p_), x_), FreeQ(p, x), cons(And(PolyQ(u_, x_, Integer(3)), Not(CubicMatchQ(u_, x_))), (p, u, x)))
    rule1359 = ReplacementRule(pattern1359, lambda p, u, x : Int(Pow(ExpandToSum(u, x), p), x))
    rubi.add(rule1359)

    pattern1360 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(IntegerQ(p_), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1360 = ReplacementRule(pattern1360, lambda e, f, c, x, m, b, p, a, d : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), p), Pow(b, p), Pow(c, p)), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(b, Mul(c, x)), Mul(Integer(3), p))), x)))
    rubi.add(rule1360)

    pattern1361 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(IntegerQ(p_), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1361 = ReplacementRule(pattern1361, lambda e, f, c, x, m, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Pow(b, Integer(3)), Mul(Integer(-1), Mul(Integer(3), a, b, c))), Integer(3)))), Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), p), Pow(b, p), Pow(c, p)), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(b, Mul(Integer(-1), Integer(r)), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p)), x))))
    rubi.add(rule1361)

    pattern1362 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(IntegerQ(p_), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1362 = ReplacementRule(pattern1362, lambda e, f, c, x, m, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Pow(c, Integer(3)), Mul(Integer(-1), Mul(Integer(3), b, c, d))), Integer(3)))), Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), p), Pow(b, p), Pow(c, p)), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(b, Mul(Add(c, Mul(Integer(-1), Integer(r))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p)), x))))
    rubi.add(rule1362)

    pattern1363 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(PositiveIntegerQ(p_), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1363 = ReplacementRule(pattern1363, lambda e, f, c, x, m, b, p, a, d : Int(ExpandIntegrand(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p)), x), x))
    rubi.add(rule1363)

    pattern1364 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1364 = ReplacementRule(pattern1364, lambda e, f, c, x, m, b, p, a, d : With(List(Set(Integer(u), Factor(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))))))), Condition(Mul(Pow(FreeFactors(Integer(u), x), p), Int(Mul(Pow(Add(e, Mul(f, x)), m), DistributeDegree(NonfreeFactors(Integer(u), x), p)), x)), ProductQ(NonfreeFactors(Integer(u), x)))))
    rubi.add(rule1364)

    pattern1365 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), cons(And(NegativeIntegerQ(p_), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1365 = ReplacementRule(pattern1365, lambda e, f, c, x, m, b, p, a, d : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(3), Mul(Integer(3), p)), Pow(d, Mul(Integer(2), p))), Integer(-1))), Subst(Int(Pow(Add(Mul(Integer(2), Pow(c, Integer(3))), Mul(Integer(-1), Mul(Integer(9), b, c, d)), Mul(Integer(27), a, Pow(d, Integer(2))), Mul(Integer(-1), Mul(Integer(9), d, Add(Pow(c, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b, d))), x)), Mul(Integer(27), Pow(d, Integer(3)), Pow(x, Integer(3)))), p), x), x, Add(x, Mul(c, Pow(Mul(Integer(3), d), Integer(-1)))))))
    rubi.add(rule1365)

    pattern1366 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1366 = ReplacementRule(pattern1366, lambda e, f, c, x, m, b, p, a, d : Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Pow(Add(b, Mul(c, x)), Mul(Integer(3), p)), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(b, Mul(c, x)), Mul(Integer(3), p))), x)))
    rubi.add(rule1366)

    pattern1367 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1367 = ReplacementRule(pattern1367, lambda e, f, c, x, m, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Pow(b, Integer(3)), Mul(Integer(-1), Mul(Integer(3), a, b, c))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(b, Mul(Integer(-1), Integer(r)), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p)), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(b, Mul(Integer(-1), Integer(r)), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p), Pow(Add(b, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1)))), Mul(c, x)), p)), x))))
    rubi.add(rule1367)

    pattern1368 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), ZeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1368 = ReplacementRule(pattern1368, lambda e, f, c, x, m, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Pow(c, Integer(3)), Mul(Integer(-1), Mul(Integer(3), b, c, d))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(b, Mul(Add(c, Mul(Integer(-1), Integer(r))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p)), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(b, Mul(Add(c, Mul(Integer(-1), Integer(r))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p), Pow(Add(b, Mul(Add(c, Mul(Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Mul(Integer(r), Pow(Integer(2), Integer(-1))))), x)), p)), x))))
    rubi.add(rule1368)

    pattern1369 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1369 = ReplacementRule(pattern1369, lambda e, f, c, x, m, b, p, a, d : With(List(Set(Integer(u), NonfreeFactors(Factor(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))))), x))), Condition(Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(DistributeDegree(Integer(u), p), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), DistributeDegree(Integer(u), p)), x)), ProductQ(Integer(u)))))
    rubi.add(rule1369)

    pattern1370 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_)), NonzeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), b_, d_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(3), a_, c_))))), (e, f, c, x, m, b, p, a, d)))
    rule1370 = ReplacementRule(pattern1370, lambda e, f, c, x, m, b, p, a, d : With(List(Set(Integer(r), Rt(Add(Mul(Integer(-2), Pow(c, Integer(3))), Mul(Integer(9), b, c, d), Mul(Integer(-1), Mul(Integer(27), a, Pow(d, Integer(2)))), Mul(Integer(3), Sqrt(Integer(3)), d, Sqrt(Add(Mul(Mul(Integer(-1), Pow(b, Integer(2))), Pow(c, Integer(2))), Mul(Integer(4), a, Pow(c, Integer(3))), Mul(Integer(4), Pow(b, Integer(3)), d), Mul(Integer(-1), Mul(Integer(18), a, b, c, d)), Mul(Integer(27), Pow(a, Integer(2)), Pow(d, Integer(2))))))), Integer(3)))), Mul(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3)))), p), Pow(Mul(Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), b, d)), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d)), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(\(Integer(ImaginaryI)), Sqrt(Integer(3))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d)), Mul(\(Integer(ImaginaryI)), Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Mul(Integer(-1), \(Integer(ImaginaryI))), Sqrt(Integer(3))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), Integer(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), m), Pow(Add(c, Mul(Integer(-1), Mul(Add(Mul(Integer(2), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), b, d)), Mul(Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Pow(Integer(r), Integer(2)))), Pow(Mul(Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1)))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), Add(Integer(1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3)))), b, d)), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(\(Integer(ImaginaryI)), Sqrt(Integer(3))), Pow(Integer(r), Integer(2))))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p), Pow(Add(c, Mul(Add(Mul(Integer(2), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), Pow(c, Integer(2))), Mul(Integer(-1), Mul(Integer(6), Add(Integer(1), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), Sqrt(Integer(3))))), b, d)), Mul(\(Integer(ImaginaryI)), Pow(Integer(2), Mul(Integer(1), Pow(Integer(3), Integer(-1)))), Add(Mul(Integer(-1), \(Integer(ImaginaryI))), Sqrt(Integer(3))), Pow(Integer(r), Integer(2)))), Pow(Mul(Integer(2), Pow(Integer(2), Mul(Integer(2), Pow(Integer(3), Integer(-1)))), Integer(r)), Integer(-1))), Mul(Integer(3), d, x)), p)), x))))
    rubi.add(rule1370)

    pattern1371 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', Integer(1))), Pow(v_, Wildcard.optional('p', Integer(1)))), x_), FreeQ(m, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), PolyQ(v_, x_, Integer(3)), Not(And(LinearMatchQ(u_, x_), CubicMatchQ(v_, x_)))), (x, m, u, p, v)))
    rule1371 = ReplacementRule(pattern1371, lambda x, m, u, p, v : Int(Mul(Pow(ExpandToSum(u, x), m), Pow(ExpandToSum(v, x), p)), x))
    rubi.add(rule1371)

    pattern1372 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(f_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), ZeroQ(Add(f_, g_)), PosQ(Mul(Pow(a_, Integer(2)), Add(Mul(Integer(2), a_), Mul(Integer(-1), c_))))), (e, f, c, g, x, b, a, d)))
    rule1372 = ReplacementRule(pattern1372, lambda e, f, c, g, x, b, a, d : Mul(a, Mul(f, Pow(Mul(d, Rt(Mul(Pow(a, Integer(2)), Add(Mul(Integer(2), a), Mul(Integer(-1), c))), Integer(2))), Integer(-1))), ArcTan(Mul(Add(Mul(a, b), Mul(Add(Mul(Integer(4), Pow(a, Integer(2))), Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c))), x), Mul(a, b, Pow(x, Integer(2)))), Pow(Mul(Integer(2), Rt(Mul(Pow(a, Integer(2)), Add(Mul(Integer(2), a), Mul(Integer(-1), c))), Integer(2)), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(b, Pow(x, Integer(3))), Mul(a, Pow(x, Integer(4)))))), Integer(-1))))))
    rubi.add(rule1372)

    pattern1373 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Add(f_, Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(ZeroQ(Add(Mul(b_, d_), Mul(Integer(-1), Mul(a_, e_)))), ZeroQ(Add(f_, g_)), NegQ(Mul(Pow(a_, Integer(2)), Add(Mul(Integer(2), a_), Mul(Integer(-1), c_))))), (e, f, c, g, x, b, a, d)))
    rule1373 = ReplacementRule(pattern1373, lambda e, f, c, g, x, b, a, d : Mul(Mul(Integer(-1), a), Mul(f, Pow(Mul(d, Rt(Mul(Mul(Integer(-1), Pow(a, Integer(2))), Add(Mul(Integer(2), a), Mul(Integer(-1), c))), Integer(2))), Integer(-1))), ArcTanh(Mul(Add(Mul(a, b), Mul(Add(Mul(Integer(4), Pow(a, Integer(2))), Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(2), a, c))), x), Mul(a, b, Pow(x, Integer(2)))), Pow(Mul(Integer(2), Rt(Mul(Mul(Integer(-1), Pow(a, Integer(2))), Add(Mul(Integer(2), a), Mul(Integer(-1), c))), Integer(2)), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(b, Pow(x, Integer(3))), Mul(a, Pow(x, Integer(4)))))), Integer(-1))))))
    rubi.add(rule1373)

    pattern1374 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(ZeroQ(Add(Pow(d_, Integer(3)), Mul(Integer(-1), Mul(Integer(4), c_, d_, e_)), Mul(Integer(8), b_, Pow(e_, Integer(2))))), UnsameQ(p_, Integer(2)), UnsameQ(p_, Integer(3))), (e, c, x, b, p, a, d)))
    rule1374 = ReplacementRule(pattern1374, lambda e, c, x, b, p, a, d : Subst(Int(SimplifyIntegrand(Pow(Add(a, Mul(Pow(d, Integer(4)), Pow(Mul(Integer(256), Pow(e, Integer(3))), Integer(-1))), Mul(Integer(-1), Mul(b, Mul(d, Pow(Mul(Integer(8), e), Integer(-1))))), Mul(Add(c, Mul(Integer(-1), Mul(Integer(3), Mul(Pow(d, Integer(2)), Pow(Mul(Integer(8), e), Integer(-1)))))), Pow(x, Integer(2))), Mul(e, Pow(x, Integer(4)))), p), x), x), x, Add(Mul(d, Pow(Mul(Integer(4), e), Integer(-1))), x)))
    rubi.add(rule1374)

    pattern1375 = Pattern(Int(Pow(v_, p_), x_), FreeQ(p, x), cons(And(PolynomialQ(v_, x_), Equal(Exponent(v_, x_), Integer(4)), UnsameQ(p_, Integer(2)), UnsameQ(p_, Integer(3))), (p, x, v)))
    rule1375 = ReplacementRule(pattern1375, lambda p, x, v : With(List(Set(Integer(a), Coefficient(v, x, Integer(0))), Set(Integer(b), Coefficient(v, x, Integer(1))), Set(Integer(c), Coefficient(v, x, Integer(2))), Set(Integer(d), Coefficient(v, x, Integer(3))), Set(Integer(e), Coefficient(v, x, Integer(4)))), Condition(Subst(Int(SimplifyIntegrand(Pow(Add(Integer(a), Mul(Pow(Integer(d), Integer(4)), Pow(Mul(Integer(256), Pow(Integer(e), Integer(3))), Integer(-1))), Mul(Integer(-1), Mul(Integer(b), Mul(Integer(d), Pow(Mul(Integer(8), Integer(e)), Integer(-1))))), Mul(Add(Integer(c), Mul(Integer(-1), Mul(Integer(3), Mul(Pow(Integer(d), Integer(2)), Pow(Mul(Integer(8), Integer(e)), Integer(-1)))))), Pow(x, Integer(2))), Mul(Integer(e), Pow(x, Integer(4)))), p), x), x), x, Add(Mul(Integer(d), Pow(Mul(Integer(4), Integer(e)), Integer(-1))), x)), And(ZeroQ(Add(Pow(Integer(d), Integer(3)), Mul(Integer(-1), Mul(Integer(4), Integer(c), Integer(d), Integer(e))), Mul(Integer(8), Integer(b), Pow(Integer(e), Integer(2))))), NonzeroQ(Integer(d))))))
    rubi.add(rule1375)

    pattern1376 = Pattern(Int(Mul(u_, Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(PolynomialQ(u_, x_), ZeroQ(Add(Pow(d_, Integer(3)), Mul(Integer(-1), Mul(Integer(4), c_, d_, e_)), Mul(Integer(8), b_, Pow(e_, Integer(2))))), Not(PositiveIntegerQ(p_))), (e, c, x, u, b, p, a, d)))
    rule1376 = ReplacementRule(pattern1376, lambda e, c, x, u, b, p, a, d : Subst(Int(SimplifyIntegrand(Mul(ReplaceAll(u, Rule(x, Add(Mul(Mul(Integer(-1), d), Pow(Mul(Integer(4), e), Integer(-1))), x))), Pow(Add(a, Mul(Pow(d, Integer(4)), Pow(Mul(Integer(256), Pow(e, Integer(3))), Integer(-1))), Mul(Integer(-1), Mul(b, Mul(d, Pow(Mul(Integer(8), e), Integer(-1))))), Mul(Add(c, Mul(Integer(-1), Mul(Integer(3), Mul(Pow(d, Integer(2)), Pow(Mul(Integer(8), e), Integer(-1)))))), Pow(x, Integer(2))), Mul(e, Pow(x, Integer(4)))), p)), x), x), x, Add(Mul(d, Pow(Mul(Integer(4), e), Integer(-1))), x)))
    rubi.add(rule1376)

    pattern1377 = Pattern(Int(Mul(u_, Pow(v_, p_)), x_), FreeQ(p, x), cons(And(PolynomialQ(u_, x_), PolynomialQ(v_, x_), Equal(Exponent(v_, x_), Integer(4)), Not(PositiveIntegerQ(p_))), (p, u, x, v)))
    rule1377 = ReplacementRule(pattern1377, lambda p, u, x, v : With(List(Set(Integer(a), Coefficient(v, x, Integer(0))), Set(Integer(b), Coefficient(v, x, Integer(1))), Set(Integer(c), Coefficient(v, x, Integer(2))), Set(Integer(d), Coefficient(v, x, Integer(3))), Set(Integer(e), Coefficient(v, x, Integer(4)))), Condition(Subst(Int(SimplifyIntegrand(Mul(ReplaceAll(u, Rule(x, Add(Mul(Mul(Integer(-1), Integer(d)), Pow(Mul(Integer(4), Integer(e)), Integer(-1))), x))), Pow(Add(Integer(a), Mul(Pow(Integer(d), Integer(4)), Pow(Mul(Integer(256), Pow(Integer(e), Integer(3))), Integer(-1))), Mul(Integer(-1), Mul(Integer(b), Mul(Integer(d), Pow(Mul(Integer(8), Integer(e)), Integer(-1))))), Mul(Add(Integer(c), Mul(Integer(-1), Mul(Integer(3), Mul(Pow(Integer(d), Integer(2)), Pow(Mul(Integer(8), Integer(e)), Integer(-1)))))), Pow(x, Integer(2))), Mul(Integer(e), Pow(x, Integer(4)))), p)), x), x), x, Add(Mul(Integer(d), Pow(Mul(Integer(4), Integer(e)), Integer(-1))), x)), And(ZeroQ(Add(Pow(Integer(d), Integer(3)), Mul(Integer(-1), Mul(Integer(4), Integer(c), Integer(d), Integer(e))), Mul(Integer(8), Integer(b), Pow(Integer(e), Integer(2))))), NonzeroQ(Integer(d))))))
    rubi.add(rule1377)

    pattern1378 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Pow(b_, Integer(3)), Mul(Integer(-1), Mul(Integer(4), a_, b_, c_)), Mul(Integer(8), Pow(a_, Integer(2)), d_))), IntegerQ(Mul(Integer(2), p_))), (e, c, x, b, p, a, d)))
    rule1378 = ReplacementRule(pattern1378, lambda e, c, x, b, p, a, d : Mul(Integer(-16), Pow(a, Integer(2)), Subst(Int(Mul(Mul(Integer(1), Pow(Pow(Add(b, Mul(Integer(-1), Mul(Integer(4), a, x))), Integer(2)), Integer(-1))), Pow(Mul(a, Mul(Add(Mul(Integer(-3), Pow(b, Integer(4))), Mul(Integer(16), a, Pow(b, Integer(2)), c), Mul(Integer(-1), Mul(Integer(64), Pow(a, Integer(2)), b, d)), Mul(Integer(256), Pow(a, Integer(3)), e), Mul(Integer(-1), Mul(Integer(32), Pow(a, Integer(2)), Add(Mul(Integer(3), Pow(b, Integer(2))), Mul(Integer(-1), Mul(Integer(8), a, c))), Pow(x, Integer(2)))), Mul(Integer(256), Pow(a, Integer(4)), Pow(x, Integer(4)))), Pow(Pow(Add(b, Mul(Integer(-1), Mul(Integer(4), a, x))), Integer(4)), Integer(-1)))), p)), x), x, Add(Mul(b, Pow(Mul(Integer(4), a), Integer(-1))), Mul(Integer(1), Pow(x, Integer(-1)))))))
    rubi.add(rule1378)

    pattern1379 = Pattern(Int(Pow(v_, p_), x_), FreeQ(p, x), cons(And(PolynomialQ(v_, x_), Equal(Exponent(v_, x_), Integer(4)), IntegerQ(Mul(Integer(2), p_))), (p, x, v)))
    rule1379 = ReplacementRule(pattern1379, lambda p, x, v : With(List(Set(Integer(a), Coefficient(v, x, Integer(0))), Set(Integer(b), Coefficient(v, x, Integer(1))), Set(Integer(c), Coefficient(v, x, Integer(2))), Set(Integer(d), Coefficient(v, x, Integer(3))), Set(Integer(e), Coefficient(v, x, Integer(4)))), Condition(Mul(Integer(-16), Pow(Integer(a), Integer(2)), Subst(Int(Mul(Mul(Integer(1), Pow(Pow(Add(Integer(b), Mul(Integer(-1), Mul(Integer(4), Integer(a), x))), Integer(2)), Integer(-1))), Pow(Mul(Integer(a), Mul(Add(Mul(Integer(-3), Pow(Integer(b), Integer(4))), Mul(Integer(16), Integer(a), Pow(Integer(b), Integer(2)), Integer(c)), Mul(Integer(-1), Mul(Integer(64), Pow(Integer(a), Integer(2)), Integer(b), Integer(d))), Mul(Integer(256), Pow(Integer(a), Integer(3)), Integer(e)), Mul(Integer(-1), Mul(Integer(32), Pow(Integer(a), Integer(2)), Add(Mul(Integer(3), Pow(Integer(b), Integer(2))), Mul(Integer(-1), Mul(Integer(8), Integer(a), Integer(c)))), Pow(x, Integer(2)))), Mul(Integer(256), Pow(Integer(a), Integer(4)), Pow(x, Integer(4)))), Pow(Pow(Add(Integer(b), Mul(Integer(-1), Mul(Integer(4), Integer(a), x))), Integer(4)), Integer(-1)))), p)), x), x, Add(Mul(Integer(b), Pow(Mul(Integer(4), Integer(a)), Integer(-1))), Mul(Integer(1), Pow(x, Integer(-1)))))), And(NonzeroQ(Integer(a)), NonzeroQ(Integer(b)), ZeroQ(Add(Pow(Integer(b), Integer(3)), Mul(Integer(-1), Mul(Integer(4), Integer(a), Integer(b), Integer(c))), Mul(Integer(8), Pow(Integer(a), Integer(2)), Integer(d))))))))
    rubi.add(rule1379)

    pattern1380 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('D', Integer(1)), Pow(x_, Integer(3)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(D, x), cons(And(ZeroQ(Add(d_, Mul(Integer(-1), b_))), ZeroQ(Add(e_, Mul(Integer(-1), a_))), SumQ(Factor(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2))), Mul(b_, Pow(x_, Integer(3))), Mul(a_, Pow(x_, Integer(4))))))), (e, c, x, A, b, D, B, C, d, a)))
    rule1380 = ReplacementRule(pattern1380, lambda e, c, x, A, b, D, B, C, d, a : With(List(Set(Integer(q), Sqrt(Add(Mul(Integer(8), Pow(a, Integer(2))), Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))))), Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(b, A), Mul(Integer(-1), Mul(Integer(2), a, B)), Mul(Integer(2), a, D), Mul(A, Integer(q)), Mul(Add(Mul(Integer(2), a, A), Mul(Integer(-1), Mul(Integer(2), a, C)), Mul(b, D), Mul(D, Integer(q))), x)), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), x), Mul(Integer(2), a, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(b, A), Mul(Integer(-1), Mul(Integer(2), a, B)), Mul(Integer(2), a, D), Mul(Integer(-1), Mul(A, Integer(q))), Mul(Add(Mul(Integer(2), a, A), Mul(Integer(-1), Mul(Integer(2), a, C)), Mul(b, D), Mul(Integer(-1), Mul(D, Integer(q)))), x)), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), x), Mul(Integer(2), a, Pow(x, Integer(2)))), Integer(-1))), x))))))
    rubi.add(rule1380)

    pattern1381 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('D', Integer(1)), Pow(x_, Integer(3)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(D, x), cons(And(ZeroQ(Add(d_, Mul(Integer(-1), b_))), ZeroQ(Add(e_, Mul(Integer(-1), a_))), SumQ(Factor(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2))), Mul(b_, Pow(x_, Integer(3))), Mul(a_, Pow(x_, Integer(4))))))), (e, c, x, A, b, D, B, d, a)))
    rule1381 = ReplacementRule(pattern1381, lambda e, c, x, A, b, D, B, d, a : With(List(Set(Integer(q), Sqrt(Add(Mul(Integer(8), Pow(a, Integer(2))), Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))))), Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(b, A), Mul(Integer(-1), Mul(Integer(2), a, B)), Mul(Integer(2), a, D), Mul(A, Integer(q)), Mul(Add(Mul(Integer(2), a, A), Mul(b, D), Mul(D, Integer(q))), x)), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), x), Mul(Integer(2), a, Pow(x, Integer(2)))), Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Add(Mul(b, A), Mul(Integer(-1), Mul(Integer(2), a, B)), Mul(Integer(2), a, D), Mul(Integer(-1), Mul(A, Integer(q))), Mul(Add(Mul(Integer(2), a, A), Mul(b, D), Mul(Integer(-1), Mul(D, Integer(q)))), x)), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), x), Mul(Integer(2), a, Pow(x, Integer(2)))), Integer(-1))), x))))))
    rubi.add(rule1381)

    pattern1382 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('D', Integer(1)), Pow(x_, Integer(3)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(D, x), FreeQ(m, x), cons(And(ZeroQ(Add(d_, Mul(Integer(-1), b_))), ZeroQ(Add(e_, Mul(Integer(-1), a_))), SumQ(Factor(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2))), Mul(b_, Pow(x_, Integer(3))), Mul(a_, Pow(x_, Integer(4))))))), (e, c, x, A, m, b, D, B, C, d, a)))
    rule1382 = ReplacementRule(pattern1382, lambda e, c, x, A, m, b, D, B, C, d, a : With(List(Set(Integer(q), Sqrt(Add(Mul(Integer(8), Pow(a, Integer(2))), Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))))), Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Pow(x, m), Mul(Add(Mul(b, A), Mul(Integer(-1), Mul(Integer(2), a, B)), Mul(Integer(2), a, D), Mul(A, Integer(q)), Mul(Add(Mul(Integer(2), a, A), Mul(Integer(-1), Mul(Integer(2), a, C)), Mul(b, D), Mul(D, Integer(q))), x)), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), x), Mul(Integer(2), a, Pow(x, Integer(2)))), Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Pow(x, m), Mul(Add(Mul(b, A), Mul(Integer(-1), Mul(Integer(2), a, B)), Mul(Integer(2), a, D), Mul(Integer(-1), Mul(A, Integer(q))), Mul(Add(Mul(Integer(2), a, A), Mul(Integer(-1), Mul(Integer(2), a, C)), Mul(b, D), Mul(Integer(-1), Mul(D, Integer(q)))), x)), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), x), Mul(Integer(2), a, Pow(x, Integer(2)))), Integer(-1)))), x))))))
    rubi.add(rule1382)

    pattern1383 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('D', Integer(1)), Pow(x_, Integer(3)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(A, x), FreeQ(B, x), FreeQ(D, x), FreeQ(m, x), cons(And(ZeroQ(Add(d_, Mul(Integer(-1), b_))), ZeroQ(Add(e_, Mul(Integer(-1), a_))), SumQ(Factor(Add(a_, Mul(b_, x_), Mul(c_, Pow(x_, Integer(2))), Mul(b_, Pow(x_, Integer(3))), Mul(a_, Pow(x_, Integer(4))))))), (e, c, x, A, m, b, D, B, d, a)))
    rule1383 = ReplacementRule(pattern1383, lambda e, c, x, A, m, b, D, B, d, a : With(List(Set(Integer(q), Sqrt(Add(Mul(Integer(8), Pow(a, Integer(2))), Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))))), Add(Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Pow(x, m), Mul(Add(Mul(b, A), Mul(Integer(-1), Mul(Integer(2), a, B)), Mul(Integer(2), a, D), Mul(A, Integer(q)), Mul(Add(Mul(Integer(2), a, A), Mul(b, D), Mul(D, Integer(q))), x)), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Integer(q)), x), Mul(Integer(2), a, Pow(x, Integer(2)))), Integer(-1)))), x)), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Integer(q), Integer(-1))), Int(Mul(Pow(x, m), Mul(Add(Mul(b, A), Mul(Integer(-1), Mul(Integer(2), a, B)), Mul(Integer(2), a, D), Mul(Integer(-1), Mul(A, Integer(q))), Mul(Add(Mul(Integer(2), a, A), Mul(b, D), Mul(Integer(-1), Mul(D, Integer(q)))), x)), Pow(Add(Mul(Integer(2), a), Mul(Add(b, Mul(Integer(-1), Integer(q))), x), Mul(Integer(2), a, Pow(x, Integer(2)))), Integer(-1)))), x))))))
    rubi.add(rule1383)

    pattern1384 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Pow(B_, Integer(2)), d_), Mul(Integer(2), C_, Add(Mul(b_, C_), Mul(A_, d_))), Mul(Integer(-1), Mul(Integer(2), B_, Add(Mul(c_, C_), Mul(Integer(2), A_, e_)))))), ZeroQ(Add(Mul(Integer(2), Pow(B_, Integer(2)), c_, C_), Mul(Integer(-1), Mul(Integer(8), a_, Pow(C_, Integer(3)))), Mul(Integer(-1), Mul(Pow(B_, Integer(3)), d_)), Mul(Integer(-1), Mul(Integer(4), A_, B_, C_, d_)), Mul(Integer(4), A_, Add(Pow(B_, Integer(2)), Mul(Integer(2), A_, C_)), e_))), PosQ(Mul(C_, Add(Mul(Integer(2), e_, Add(Mul(B_, d_), Mul(Integer(-1), Mul(Integer(4), A_, e_)))), Mul(C_, Add(Pow(d_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), c_, e_)))))))), (e, c, x, A, b, B, C, d, a)))
    rule1384 = ReplacementRule(pattern1384, lambda e, c, x, A, b, B, C, d, a : With(List(Set(Integer(q), Rt(Mul(C, Add(Mul(Integer(2), e, Add(Mul(B, d), Mul(Integer(-1), Mul(Integer(4), A, e)))), Mul(C, Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Integer(4), c, e)))))), Integer(2)))), Add(Mul(Integer(-2), Mul(Pow(C, Integer(2)), Pow(Integer(q), Integer(-1))), ArcTanh(Mul(Add(Mul(C, d), Mul(Integer(-1), Mul(B, e)), Mul(Integer(2), C, e, x)), Pow(Integer(q), Integer(-1))))), Mul(Integer(2), Mul(Pow(C, Integer(2)), Pow(Integer(q), Integer(-1))), ArcTanh(Mul(C, Mul(Add(Mul(Integer(4), B, c, C), Mul(Integer(-1), Mul(Integer(3), Pow(B, Integer(2)), d)), Mul(Integer(-1), Mul(Integer(4), A, C, d)), Mul(Integer(12), A, B, e), Mul(Integer(4), C, Add(Mul(Integer(2), c, C), Mul(Integer(-1), Mul(B, d)), Mul(Integer(2), A, e)), x), Mul(Integer(4), C, Add(Mul(Integer(2), C, d), Mul(Integer(-1), Mul(B, e))), Pow(x, Integer(2))), Mul(Integer(8), Pow(C, Integer(2)), e, Pow(x, Integer(3)))), Pow(Mul(Integer(q), Add(Pow(B, Integer(2)), Mul(Integer(-1), Mul(Integer(4), A, C)))), Integer(-1)))))))))
    rubi.add(rule1384)

    pattern1385 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(b_, C_), Mul(A_, d_))), ZeroQ(Add(Mul(a_, Pow(C_, Integer(2))), Mul(Integer(-1), Mul(Pow(A_, Integer(2)), e_)))), PosQ(Mul(C_, Add(Mul(Integer(-8), A_, Pow(e_, Integer(2))), Mul(C_, Add(Pow(d_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), c_, e_)))))))), (e, c, x, A, b, a, C, d)))
    rule1385 = ReplacementRule(pattern1385, lambda e, c, x, A, b, a, C, d : With(List(Set(Integer(q), Rt(Mul(C, Add(Mul(Integer(-8), A, Pow(e, Integer(2))), Mul(C, Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Integer(4), c, e)))))), Integer(2)))), Add(Mul(Integer(-2), Mul(Pow(C, Integer(2)), Pow(Integer(q), Integer(-1))), ArcTanh(Mul(C, Mul(Add(d, Mul(Integer(2), e, x)), Pow(Integer(q), Integer(-1)))))), Mul(Integer(2), Mul(Pow(C, Integer(2)), Pow(Integer(q), Integer(-1))), ArcTanh(Mul(C, Mul(Add(Mul(A, d), Mul(Integer(-1), Mul(Integer(2), Add(Mul(c, C), Mul(A, e)), x)), Mul(Integer(-1), Mul(Integer(2), C, d, Pow(x, Integer(2)))), Mul(Integer(-1), Mul(Integer(2), C, e, Pow(x, Integer(3))))), Pow(Mul(A, Integer(q)), Integer(-1)))))))))
    rubi.add(rule1385)

    pattern1386 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(Pow(B_, Integer(2)), d_), Mul(Integer(2), C_, Add(Mul(b_, C_), Mul(A_, d_))), Mul(Integer(-1), Mul(Integer(2), B_, Add(Mul(c_, C_), Mul(Integer(2), A_, e_)))))), ZeroQ(Add(Mul(Integer(2), Pow(B_, Integer(2)), c_, C_), Mul(Integer(-1), Mul(Integer(8), a_, Pow(C_, Integer(3)))), Mul(Integer(-1), Mul(Pow(B_, Integer(3)), d_)), Mul(Integer(-1), Mul(Integer(4), A_, B_, C_, d_)), Mul(Integer(4), A_, Add(Pow(B_, Integer(2)), Mul(Integer(2), A_, C_)), e_))), NegQ(Mul(C_, Add(Mul(Integer(2), e_, Add(Mul(B_, d_), Mul(Integer(-1), Mul(Integer(4), A_, e_)))), Mul(C_, Add(Pow(d_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), c_, e_)))))))), (e, c, x, A, b, B, C, d, a)))
    rule1386 = ReplacementRule(pattern1386, lambda e, c, x, A, b, B, C, d, a : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), C), Add(Mul(Integer(2), e, Add(Mul(B, d), Mul(Integer(-1), Mul(Integer(4), A, e)))), Mul(C, Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Integer(4), c, e)))))), Integer(2)))), Add(Mul(Integer(2), Mul(Pow(C, Integer(2)), Pow(Integer(q), Integer(-1))), ArcTan(Mul(Add(Mul(C, d), Mul(Integer(-1), Mul(B, e)), Mul(Integer(2), C, e, x)), Pow(Integer(q), Integer(-1))))), Mul(Integer(-1), Mul(Integer(2), Mul(Pow(C, Integer(2)), Pow(Integer(q), Integer(-1))), ArcTan(Mul(C, Mul(Add(Mul(Integer(4), B, c, C), Mul(Integer(-1), Mul(Integer(3), Pow(B, Integer(2)), d)), Mul(Integer(-1), Mul(Integer(4), A, C, d)), Mul(Integer(12), A, B, e), Mul(Integer(4), C, Add(Mul(Integer(2), c, C), Mul(Integer(-1), Mul(B, d)), Mul(Integer(2), A, e)), x), Mul(Integer(4), C, Add(Mul(Integer(2), C, d), Mul(Integer(-1), Mul(B, e))), Pow(x, Integer(2))), Mul(Integer(8), Pow(C, Integer(2)), e, Pow(x, Integer(3)))), Pow(Mul(Integer(q), Add(Pow(B, Integer(2)), Mul(Integer(-1), Mul(Integer(4), A, C)))), Integer(-1))))))))))
    rubi.add(rule1386)

    pattern1387 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(C, x), cons(And(ZeroQ(Add(Mul(b_, C_), Mul(A_, d_))), ZeroQ(Add(Mul(a_, Pow(C_, Integer(2))), Mul(Integer(-1), Mul(Pow(A_, Integer(2)), e_)))), NegQ(Mul(C_, Add(Mul(Integer(-8), A_, Pow(e_, Integer(2))), Mul(C_, Add(Pow(d_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), c_, e_)))))))), (e, c, x, A, b, a, C, d)))
    rule1387 = ReplacementRule(pattern1387, lambda e, c, x, A, b, a, C, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), C), Add(Mul(Integer(-8), A, Pow(e, Integer(2))), Mul(C, Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Integer(4), c, e)))))), Integer(2)))), Add(Mul(Integer(2), Mul(Pow(C, Integer(2)), Pow(Integer(q), Integer(-1))), ArcTan(Mul(Add(Mul(C, d), Mul(Integer(2), C, e, x)), Pow(Integer(q), Integer(-1))))), Mul(Integer(-1), Mul(Integer(2), Mul(Pow(C, Integer(2)), Pow(Integer(q), Integer(-1))), ArcTan(Mul(Mul(Integer(-1), C), Mul(Add(Mul(Mul(Integer(-1), A), d), Mul(Integer(2), Add(Mul(c, C), Mul(A, e)), x), Mul(Integer(2), C, d, Pow(x, Integer(2))), Mul(Integer(2), C, e, Pow(x, Integer(3)))), Pow(Mul(A, Integer(q)), Integer(-1))))))))))
    rubi.add(rule1387)

    pattern1388 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('C', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('D', Integer(1)), Pow(x_, Integer(3)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(B, x), FreeQ(C, x), FreeQ(D, x), cons(And(ZeroQ(Add(Mul(Integer(4), d_, Pow(Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_))), Integer(2))), Mul(Integer(8), Add(Mul(Integer(3), d_, D_), Mul(Integer(-1), Mul(Integer(4), C_, e_))), Add(Mul(b_, d_, D_), Mul(Integer(-1), Mul(b_, C_, e_)), Mul(Integer(-1), Mul(A_, d_, e_)))), Mul(Integer(-1), Mul(Integer(4), Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_))), Add(Mul(Integer(3), c_, d_, D_), Mul(Integer(-1), Mul(Integer(4), c_, C_, e_)), Mul(Integer(2), b_, D_, e_), Mul(Integer(-1), Mul(Integer(8), A_, Pow(e_, Integer(2))))))))), ZeroQ(Add(Mul(Integer(8), d_, Pow(Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_))), Integer(3))), Mul(Integer(8), d_, Add(Mul(b_, D_), Mul(Integer(-1), Mul(Integer(4), A_, e_))), Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_))), Add(Mul(Integer(3), d_, D_), Mul(Integer(-1), Mul(Integer(4), C_, e_)))), Mul(Integer(8), a_, Pow(Add(Mul(Integer(3), d_, D_), Mul(Integer(-1), Mul(Integer(4), C_, e_))), Integer(3))), Mul(Integer(-1), Mul(Integer(8), c_, Pow(Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_))), Integer(2)), Add(Mul(Integer(3), d_, D_), Mul(Integer(-1), Mul(Integer(4), C_, e_))))), Mul(Integer(-1), Mul(Integer(4), e_, Add(Mul(b_, D_), Mul(Integer(-1), Mul(Integer(4), A_, e_))), Add(Mul(Integer(4), Pow(Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_))), Integer(2))), Mul(Integer(2), Add(Mul(b_, D_), Mul(Integer(-1), Mul(Integer(4), A_, e_))), Add(Mul(Integer(3), d_, D_), Mul(Integer(-1), Mul(Integer(4), C_, e_)))))))))), (e, c, x, A, b, D, B, C, d, a)))
    rule1388 = ReplacementRule(pattern1388, lambda e, c, x, A, b, D, B, C, d, a : Add(Mul(Mul(D, Pow(Mul(Integer(4), e), Integer(-1))), Log(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))), Mul(e, Pow(x, Integer(4)))))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(4), e), Integer(-1))), Int(Mul(Add(Mul(b, D), Mul(Integer(-1), Mul(Integer(4), A, e)), Mul(Integer(2), Add(Mul(c, D), Mul(Integer(-1), Mul(Integer(2), B, e))), x), Mul(Add(Mul(Integer(3), d, D), Mul(Integer(-1), Mul(Integer(4), C, e))), Pow(x, Integer(2)))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))), Mul(e, Pow(x, Integer(4)))), Integer(-1))), x)))))
    rubi.add(rule1388)

    pattern1389 = Pattern(Int(Mul(Add(Wildcard.optional('A', Integer(0)), Mul(Wildcard.optional('B', Integer(1)), x_), Mul(Wildcard.optional('D', Integer(1)), Pow(x_, Integer(3)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(3))), Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(B, x), FreeQ(D, x), cons(And(ZeroQ(Add(Mul(Pow(c_, Integer(2)), d_, Pow(D_, Integer(2))), Mul(Integer(2), Add(Mul(Integer(3), d_, D_), Mul(Integer(-1), Mul(Integer(4), Integer(C), e_))), Add(Mul(b_, d_, D_), Mul(Integer(-1), Mul(b_, Integer(C), e_)), Mul(Integer(-1), Mul(A_, d_, e_)))), Mul(Integer(-1), Mul(c_, D_, Add(Mul(Integer(3), c_, d_, D_), Mul(Integer(-1), Mul(Integer(4), c_, Integer(C), e_)), Mul(Integer(2), b_, D_, e_), Mul(Integer(-1), Mul(Integer(8), A_, Pow(e_, Integer(2))))))))), ZeroQ(Add(Mul(Integer(54), a_, Pow(d_, Integer(3)), Pow(D_, Integer(3))), Mul(Integer(6), Pow(d_, Integer(2)), D_, Add(Mul(b_, D_), Mul(Integer(-1), Mul(Integer(4), A_, e_))), Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_)))), Mul(Integer(-1), Mul(Integer(6), c_, d_, D_, Pow(Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_))), Integer(2)))), Mul(Integer(2), d_, Pow(Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_))), Integer(3))), Mul(Integer(-1), Mul(e_, Add(Mul(b_, D_), Mul(Integer(-1), Mul(Integer(4), A_, e_))), Add(Mul(Integer(6), d_, D_, Add(Mul(b_, D_), Mul(Integer(-1), Mul(Integer(4), A_, e_)))), Mul(Integer(4), Pow(Add(Mul(c_, D_), Mul(Integer(-1), Mul(Integer(2), B_, e_))), Integer(2))))))))), (e, c, x, A, b, D, B, d, a)))
    rule1389 = ReplacementRule(pattern1389, lambda e, c, x, A, b, D, B, d, a : Add(Mul(Mul(D, Pow(Mul(Integer(4), e), Integer(-1))), Log(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))), Mul(e, Pow(x, Integer(4)))))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(Integer(4), e), Integer(-1))), Int(Mul(Add(Mul(b, D), Mul(Integer(-1), Mul(Integer(4), A, e)), Mul(Integer(2), Add(Mul(c, D), Mul(Integer(-1), Mul(Integer(2), B, e))), x), Mul(Mul(Integer(3), d, D), Pow(x, Integer(2)))), Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))), Mul(d, Pow(x, Integer(3))), Mul(e, Pow(x, Integer(4)))), Integer(-1))), x)))))
    rubi.add(rule1389)

    pattern1390 = Pattern(Int(Mul(u_, Pow(Add(Mul(Wildcard.optional('e', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(1), Integer(2)))), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(1), Integer(2))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(a_, Pow(e_, Integer(2))), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2))))))), (e, f, c, x, u, b, a, d)))
    rule1390 = ReplacementRule(pattern1390, lambda e, f, c, x, u, b, a, d : Add(Mul(Mul(c, Pow(Mul(e, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1))), Int(Mul(Mul(u, Sqrt(Add(a, Mul(b, x)))), Pow(x, Integer(-1))), x)), Mul(Integer(-1), Mul(Mul(a, Pow(Mul(f, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1))), Int(Mul(Mul(u, Sqrt(Add(c, Mul(d, x)))), Pow(x, Integer(-1))), x)))))
    rubi.add(rule1390)

    pattern1391 = Pattern(Int(Mul(u_, Pow(Add(Mul(Wildcard.optional('e', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(1), Integer(2)))), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(1), Integer(2))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(b_, Pow(e_, Integer(2))), Mul(Integer(-1), Mul(d_, Pow(f_, Integer(2))))))), (e, f, c, x, u, b, a, d)))
    rule1391 = ReplacementRule(pattern1391, lambda e, f, c, x, u, b, a, d : Add(Mul(Mul(Mul(Integer(-1), d), Pow(Mul(e, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1))), Int(Mul(u, Sqrt(Add(a, Mul(b, x)))), x)), Mul(Mul(b, Pow(Mul(f, Add(Mul(b, c), Mul(Integer(-1), Mul(a, d)))), Integer(-1))), Int(Mul(u, Sqrt(Add(c, Mul(d, x)))), x))))
    rubi.add(rule1391)

    pattern1392 = Pattern(Int(Mul(u_, Pow(Add(Mul(Wildcard.optional('e', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_)), Rational(Integer(1), Integer(2)))), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Rational(Integer(1), Integer(2))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(a_, Pow(e_, Integer(2))), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), NonzeroQ(Add(Mul(b_, Pow(e_, Integer(2))), Mul(Integer(-1), Mul(d_, Pow(f_, Integer(2))))))), (e, f, c, x, u, b, a, d)))
    rule1392 = ReplacementRule(pattern1392, lambda e, f, c, x, u, b, a, d : Add(Mul(e, Int(Mul(Mul(u, Sqrt(Add(a, Mul(b, x)))), Pow(Add(Mul(a, Pow(e, Integer(2))), Mul(Integer(-1), Mul(c, Pow(f, Integer(2)))), Mul(Add(Mul(b, Pow(e, Integer(2))), Mul(Integer(-1), Mul(d, Pow(f, Integer(2))))), x)), Integer(-1))), x)), Mul(Integer(-1), Mul(f, Int(Mul(Mul(u, Sqrt(Add(c, Mul(d, x)))), Pow(Add(Mul(a, Pow(e, Integer(2))), Mul(Integer(-1), Mul(c, Pow(f, Integer(2)))), Mul(Add(Mul(b, Pow(e, Integer(2))), Mul(Integer(-1), Mul(d, Pow(f, Integer(2))))), x)), Integer(-1))), x)))))
    rubi.add(rule1392)

    pattern1393 = Pattern(Int(Mul(Wildcard.optional('u', Integer(1)), Pow(Add(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('p', Integer(1))))), Rational(Integer(1), Integer(2))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(ZeroQ(Add(p_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(Mul(b_, Pow(c_, Integer(2))), Mul(Integer(-1), Pow(d_, Integer(2)))))), (n, c, x, u, b, p, a, d)))
    rule1393 = ReplacementRule(pattern1393, lambda n, c, x, u, b, p, a, d : Add(Mul(Mul(Mul(Integer(-1), b), Pow(Mul(a, d), Integer(-1))), Int(Mul(u, Pow(x, n)), x)), Mul(Mul(Integer(1), Pow(Mul(a, c), Integer(-1))), Int(Mul(u, Sqrt(Add(a, Mul(b, Pow(x, Mul(Integer(2), n)))))), x))))
    rubi.add(rule1393)

    pattern1394 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('p', Integer(1))))), Rational(Integer(1), Integer(2))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(p_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Mul(b_, Pow(c_, Integer(2))), Mul(Integer(-1), Pow(d_, Integer(2)))))), (n, c, x, m, b, p, a, d)))
    rule1394 = ReplacementRule(pattern1394, lambda n, c, x, m, b, p, a, d : Add(Mul(Mul(Integer(-1), d), Int(Mul(Pow(x, Add(m, n)), Pow(Add(Mul(a, Pow(c, Integer(2))), Mul(Add(Mul(b, Pow(c, Integer(2))), Mul(Integer(-1), Pow(d, Integer(2)))), Pow(x, Mul(Integer(2), n)))), Integer(-1))), x)), Mul(c, Int(Mul(Mul(Pow(x, m), Sqrt(Add(a, Mul(b, Pow(x, Mul(Integer(2), n)))))), Pow(Add(Mul(a, Pow(c, Integer(2))), Mul(Add(Mul(b, Pow(c, Integer(2))), Mul(Integer(-1), Pow(d, Integer(2)))), Pow(x, Mul(Integer(2), n)))), Integer(-1))), x))))
    rubi.add(rule1394)

    pattern1395 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(Mul(a_, Pow(b_, Integer(-1))))), (f, e, x, b, a, d)))
    rule1395 = ReplacementRule(pattern1395, lambda f, e, x, b, a, d : With(List(Set(Integer(r), Numerator(Rt(Mul(a, Pow(b, Integer(-1))), Integer(3)))), Set(Integer(s), Denominator(Rt(Mul(a, Pow(b, Integer(-1))), Integer(3))))), Add(Mul(Mul(Integer(r), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(Integer(r), Mul(Integer(s), x)), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Integer(r), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Integer(2), Integer(r)), Mul(Integer(-1), Mul(Integer(s), x))), Pow(Mul(Add(Pow(Integer(r), Integer(2)), Mul(Integer(-1), Mul(Integer(r), Integer(s), x)), Mul(Pow(Integer(s), Integer(2)), Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)))))
    rubi.add(rule1395)

    pattern1396 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(f, x), cons(And(PosQ(Mul(a_, Pow(b_, Integer(-1))))), (f, x, b, a, d)))
    rule1396 = ReplacementRule(pattern1396, lambda f, x, b, a, d : With(List(Set(Integer(r), Numerator(Rt(Mul(a, Pow(b, Integer(-1))), Integer(3)))), Set(Integer(s), Denominator(Rt(Mul(a, Pow(b, Integer(-1))), Integer(3))))), Add(Mul(Mul(Integer(r), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(Integer(r), Mul(Integer(s), x)), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Integer(r), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Integer(2), Integer(r)), Mul(Integer(-1), Mul(Integer(s), x))), Pow(Mul(Add(Pow(Integer(r), Integer(2)), Mul(Integer(-1), Mul(Integer(r), Integer(s), x)), Mul(Pow(Integer(s), Integer(2)), Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)))))
    rubi.add(rule1396)

    pattern1397 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NegQ(Mul(a_, Pow(b_, Integer(-1))))), (f, e, x, b, a, d)))
    rule1397 = ReplacementRule(pattern1397, lambda f, e, x, b, a, d : With(List(Set(Integer(r), Numerator(Rt(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Integer(3)))), Set(Integer(s), Denominator(Rt(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Integer(3))))), Add(Mul(Mul(Integer(r), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(Integer(r), Mul(Integer(-1), Mul(Integer(s), x))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Integer(r), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Integer(2), Integer(r)), Mul(Integer(s), x)), Pow(Mul(Add(Pow(Integer(r), Integer(2)), Mul(Integer(r), Integer(s), x), Mul(Pow(Integer(s), Integer(2)), Pow(x, Integer(2)))), Sqrt(Add(d, Mul(e, x), Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)))))
    rubi.add(rule1397)

    pattern1398 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(f, x), cons(And(NegQ(Mul(a_, Pow(b_, Integer(-1))))), (f, x, b, a, d)))
    rule1398 = ReplacementRule(pattern1398, lambda f, x, b, a, d : With(List(Set(Integer(r), Numerator(Rt(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Integer(3)))), Set(Integer(s), Denominator(Rt(Mul(Mul(Integer(-1), a), Pow(b, Integer(-1))), Integer(3))))), Add(Mul(Mul(Integer(r), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(Integer(r), Mul(Integer(-1), Mul(Integer(s), x))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Integer(r), Pow(Mul(Integer(3), a), Integer(-1))), Int(Mul(Add(Mul(Integer(2), Integer(r)), Mul(Integer(s), x)), Pow(Mul(Add(Pow(Integer(r), Integer(2)), Mul(Integer(r), Integer(s), x), Mul(Pow(Integer(s), Integer(2)), Pow(x, Integer(2)))), Sqrt(Add(d, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)))))
    rubi.add(rule1398)

    pattern1399 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(True, (e, c, x, b, a, d)))
    rule1399 = ReplacementRule(pattern1399, lambda e, c, x, b, a, d : Add(Mul(d, Int(Mul(Integer(1), Pow(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(e, Int(Mul(x, Pow(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x)))))
    rubi.add(rule1399)

    pattern1400 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(True, (e, c, x, a, d)))
    rule1400 = ReplacementRule(pattern1400, lambda e, c, x, a, d : Add(Mul(d, Int(Mul(Integer(1), Pow(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(e, Int(Mul(x, Pow(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x)))))
    rubi.add(rule1400)

    pattern1401 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(4))), Mul(b_, Pow(d_, Integer(2)), Pow(e_, Integer(2))), Mul(a_, Pow(e_, Integer(4))))), ZeroQ(Add(Mul(Integer(2), c_, Pow(d_, Integer(3))), Mul(b_, d_, Pow(e_, Integer(2)))))), (e, c, x, b, a, d)))
    rule1401 = ReplacementRule(pattern1401, lambda e, c, x, b, a, d : Add(Mul(Mul(Integer(-1), Pow(e, Integer(3))), Mul(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Pow(Mul(Add(Mul(c, Pow(d, Integer(4))), Mul(b, Pow(d, Integer(2)), Pow(e, Integer(2))), Mul(a, Pow(e, Integer(4)))), Add(d, Mul(e, x))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(c, Pow(Add(Mul(c, Pow(d, Integer(4))), Mul(b, Pow(d, Integer(2)), Pow(e, Integer(2))), Mul(a, Pow(e, Integer(4)))), Integer(-1))), Int(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x)))))
    rubi.add(rule1401)

    pattern1402 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-2)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(4))), Mul(b_, Pow(d_, Integer(2)), Pow(e_, Integer(2))), Mul(a_, Pow(e_, Integer(4))))), NonzeroQ(Add(Mul(Integer(2), c_, Pow(d_, Integer(3))), Mul(b_, d_, Pow(e_, Integer(2)))))), (e, c, x, b, a, d)))
    rule1402 = ReplacementRule(pattern1402, lambda e, c, x, b, a, d : Add(Mul(Mul(Integer(-1), Pow(e, Integer(3))), Mul(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Pow(Mul(Add(Mul(c, Pow(d, Integer(4))), Mul(b, Pow(d, Integer(2)), Pow(e, Integer(2))), Mul(a, Pow(e, Integer(4)))), Add(d, Mul(e, x))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(c, Pow(Add(Mul(c, Pow(d, Integer(4))), Mul(b, Pow(d, Integer(2)), Pow(e, Integer(2))), Mul(a, Pow(e, Integer(4)))), Integer(-1))), Int(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), Mul(Mul(Add(Mul(Integer(2), c, Pow(d, Integer(3))), Mul(b, d, Pow(e, Integer(2)))), Pow(Add(Mul(c, Pow(d, Integer(4))), Mul(b, Pow(d, Integer(2)), Pow(e, Integer(2))), Mul(a, Pow(e, Integer(4)))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, x)), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x))))
    rubi.add(rule1402)

    pattern1403 = Pattern(Int(Mul(Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), x_)), Integer(-2)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(c_, Pow(d_, Integer(4))), Mul(a_, Pow(e_, Integer(4)))))), (e, c, x, a, d)))
    rule1403 = ReplacementRule(pattern1403, lambda e, c, x, a, d : Add(Mul(Mul(Integer(-1), Pow(e, Integer(3))), Mul(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Pow(Mul(Add(Mul(c, Pow(d, Integer(4))), Mul(a, Pow(e, Integer(4)))), Add(d, Mul(e, x))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(c, Pow(Add(Mul(c, Pow(d, Integer(4))), Mul(a, Pow(e, Integer(4)))), Integer(-1))), Int(Mul(Add(Pow(d, Integer(2)), Mul(Integer(-1), Mul(Pow(e, Integer(2)), Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))), x))), Mul(Integer(2), c, Mul(Pow(d, Integer(3)), Pow(Add(Mul(c, Pow(d, Integer(4))), Mul(a, Pow(e, Integer(4)))), Integer(-1))), Int(Mul(Integer(1), Pow(Mul(Add(d, Mul(e, x)), Sqrt(Add(a, Mul(c, Pow(x, Integer(4)))))), Integer(-1))), x))))
    rubi.add(rule1403)

    pattern1404 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(Mul(B_, d_), Mul(A_, e_))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2))))))), (e, c, x, A, b, B, d, a)))
    rule1404 = ReplacementRule(pattern1404, lambda e, c, x, A, b, B, d, a : Mul(A, Subst(Int(Mul(Integer(1), Pow(Add(d, Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(Integer(2), a, e))), Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))))))
    rubi.add(rule1404)

    pattern1405 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Integer(2)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2)))), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(Mul(B_, d_), Mul(A_, e_))), ZeroQ(Add(Mul(c_, Pow(d_, Integer(2))), Mul(Integer(-1), Mul(a_, Pow(e_, Integer(2))))))), (e, c, x, A, B, d, a)))
    rule1405 = ReplacementRule(pattern1405, lambda e, c, x, A, B, d, a : Mul(A, Subst(Int(Mul(Integer(1), Pow(Add(d, Mul(Integer(2), a, e, Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))))))
    rubi.add(rule1405)

    pattern1406 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Integer(4)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(a_, B_), Mul(A_, c_)))), (e, f, c, x, A, b, B, d, a)))
    rule1406 = ReplacementRule(pattern1406, lambda e, f, c, x, A, b, B, d, a : Mul(A, Subst(Int(Mul(Integer(1), Pow(Add(d, Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))))))
    rubi.add(rule1406)

    pattern1407 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Integer(4)))), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(a_, B_), Mul(A_, c_)))), (f, e, c, x, A, B, d, a)))
    rule1407 = ReplacementRule(pattern1407, lambda f, e, c, x, A, B, d, a : Mul(A, Subst(Int(Mul(Integer(1), Pow(Add(d, Mul(a, e, Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(4))))), Integer(-1))))))
    rubi.add(rule1407)

    pattern1408 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Integer(4)))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(A, x), FreeQ(B, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(Integer(-1), Mul(a_, f_)))), ZeroQ(Add(Mul(a_, B_), Mul(A_, c_)))), (f, c, x, A, b, B, d, a)))
    rule1408 = ReplacementRule(pattern1408, lambda f, c, x, A, b, B, d, a : Mul(A, Subst(Int(Mul(Integer(1), Pow(Add(d, Mul(Integer(-1), Mul(b, d, Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))))))
    rubi.add(rule1408)

    pattern1409 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(a_, e_))), PosQ(Mul(a_, c_))), (e, c, x, b, a, d)))
    rule1409 = ReplacementRule(pattern1409, lambda e, c, x, b, a, d : Mul(Mul(a, Pow(d, Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Integer(1), Mul(Integer(-1), Mul(Integer(2), b, Pow(x, Integer(2)))), Mul(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c))), Pow(x, Integer(4)))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4))))), Integer(-1))))))
    rubi.add(rule1409)

    pattern1410 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(1), Integer(2))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Mul(c_, d_), Mul(a_, e_))), NegQ(Mul(a_, c_))), (e, c, x, b, a, d)))
    rule1410 = ReplacementRule(pattern1410, lambda e, c, x, b, a, d : With(List(Set(Integer(q), Sqrt(Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))))), Add(Mul(Mul(Integer(-1), a), Mul(Sqrt(Add(b, Integer(q))), Pow(Mul(Integer(2), Sqrt(Integer(2)), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), d), Integer(-1))), ArcTan(Mul(Sqrt(Add(b, Integer(q))), x, Mul(Add(b, Mul(Integer(-1), Integer(q)), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Mul(Integer(2), Sqrt(Integer(2)), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1)))))), Mul(a, Mul(Sqrt(Add(Mul(Integer(-1), b), Integer(q))), Pow(Mul(Integer(2), Sqrt(Integer(2)), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), d), Integer(-1))), ArcTanh(Mul(Sqrt(Add(Mul(Integer(-1), b), Integer(q))), x, Mul(Add(b, Integer(q), Mul(Integer(2), c, Pow(x, Integer(2)))), Pow(Mul(Integer(2), Sqrt(Integer(2)), Rt(Mul(Mul(Integer(-1), a), c), Integer(2)), Sqrt(Add(a, Mul(b, Pow(x, Integer(2))), Mul(c, Pow(x, Integer(4)))))), Integer(-1)))))))))
    rubi.add(rule1410)

    pattern1411 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), x_)), Integer(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(e_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (f, e, c, x, b, a, d)))
    rule1411 = ReplacementRule(pattern1411, lambda f, e, c, x, b, a, d : Add(Mul(a, Int(Mul(Integer(1), Pow(Mul(Add(Pow(a, Integer(2)), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Pow(x, Integer(2))))), Sqrt(Add(c, Mul(d, Pow(x, Integer(2))))), Sqrt(Add(e, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Integer(-1), Mul(b, Int(Mul(x, Pow(Mul(Add(Pow(a, Integer(2)), Mul(Integer(-1), Mul(Pow(b, Integer(2)), Pow(x, Integer(2))))), Sqrt(Add(c, Mul(d, Pow(x, Integer(2))))), Sqrt(Add(e, Mul(f, Pow(x, Integer(2)))))), Integer(-1))), x)))))
    rubi.add(rule1411)

    pattern1412 = Pattern(Int(Mul(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(ZeroQ(Add(Pow(Add(Mul(e_, g_), Mul(Integer(-1), Mul(d_, h_))), Integer(2)), Mul(Integer(-1), Mul(Pow(f_, Integer(2)), Add(Mul(c_, Pow(g_, Integer(2))), Mul(Integer(-1), Mul(b_, g_, h_)), Mul(a_, Pow(h_, Integer(2)))))))), ZeroQ(Add(Mul(Integer(2), Pow(e_, Integer(2)), g_), Mul(Integer(-1), Mul(Integer(2), d_, e_, h_)), Mul(Integer(-1), Mul(Pow(f_, Integer(2)), Add(Mul(Integer(2), c_, g_), Mul(Integer(-1), Mul(b_, h_)))))))), (f, e, c, g, x, b, a, h, d)))
    rule1412 = ReplacementRule(pattern1412, lambda f, e, c, g, x, b, a, h, d : Mul(Integer(2), Mul(Add(Mul(f, Add(Mul(Integer(5), b, c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(Integer(2), Pow(b, Integer(2)), g, h)), Mul(Integer(-1), Mul(Integer(3), a, c, g, h)), Mul(Integer(2), a, b, Pow(h, Integer(2))))), Mul(c, f, Add(Mul(Integer(10), c, Pow(g, Integer(2))), Mul(Integer(-1), Mul(b, g, h)), Mul(a, Pow(h, Integer(2)))), x), Mul(Integer(9), Pow(c, Integer(2)), f, g, h, Pow(x, Integer(2))), Mul(Integer(3), Pow(c, Integer(2)), f, Pow(h, Integer(2)), Pow(x, Integer(3))), Mul(Integer(-1), Mul(Add(Mul(e, g), Mul(Integer(-1), Mul(d, h))), Add(Mul(Integer(5), c, g), Mul(Integer(-1), Mul(Integer(2), b, h)), Mul(c, h, x)), Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))))))), Pow(Mul(Integer(15), Pow(c, Integer(2)), f, Add(g, Mul(h, x))), Integer(-1))), Sqrt(Add(d, Mul(e, x), Mul(f, Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))))))))
    rubi.add(rule1412)

    pattern1413 = Pattern(Int(Mul(Pow(Add(u_, Mul(Wildcard.optional('f', Integer(1)), Add(Wildcard.optional('j', Integer(0)), Mul(Wildcard.optional('k', Integer(1)), Pow(v_, Rational(Integer(1), Integer(2))))))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1)))), x_), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(j, x), FreeQ(k, x), FreeQ(m, x), FreeQ(n, x), cons(And(LinearQ(u_, x_), QuadraticQ(v_, x_), Not(And(LinearMatchQ(u_, x_), QuadraticMatchQ(v_, x_), Or(ZeroQ(j_), ZeroQ(Add(f_, Integer(-1)))))), ZeroQ(Add(Pow(Add(Mul(Coefficient(u_, x_, Integer(1)), g_), Mul(Integer(-1), Mul(h_, Add(Coefficient(u_, x_, Integer(0)), Mul(f_, j_))))), Integer(2)), Mul(Integer(-1), Mul(Pow(f_, Integer(2)), Pow(k_, Integer(2)), Add(Mul(Coefficient(v_, x_, Integer(2)), Pow(g_, Integer(2))), Mul(Integer(-1), Mul(Coefficient(v_, x_, Integer(1)), g_, h_)), Mul(Coefficient(v_, x_, Integer(0)), Pow(h_, Integer(2))))))))), (f, n, g, x, m, u, j, h, v, k)))
    rule1413 = ReplacementRule(pattern1413, lambda f, n, g, x, m, u, j, h, v, k : Int(Mul(Pow(Add(g, Mul(h, x)), m), Pow(Add(ExpandToSum(Add(u, Mul(f, j)), x), Mul(f, k, Sqrt(ExpandToSum(v, x)))), n)), x))
    rubi.add(rule1413)

    pattern1414 = Pattern(Int(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), n_))), Wildcard.optional('p', Integer(1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), IntegerQ(p_)), (f, e, n, c, g, x, b, p, a, h, d)))
    rule1414 = ReplacementRule(pattern1414, lambda f, e, n, c, g, x, b, p, a, h, d : Mul(Integer(2), Subst(Int(Mul(Pow(Add(g, Mul(h, Pow(x, n))), p), Mul(Add(Mul(Pow(d, Integer(2)), e), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Pow(f, Integer(2)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), d, e), Mul(Integer(-1), Mul(b, Pow(f, Integer(2))))), x)), Mul(e, Pow(x, Integer(2)))), Pow(Pow(Add(Mul(Integer(-2), d, e), Mul(b, Pow(f, Integer(2))), Mul(Integer(2), e, x)), Integer(2)), Integer(-1)))), x), x, Add(d, Mul(e, x), Mul(f, Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))))))))
    rubi.add(rule1414)

    pattern1415 = Pattern(Int(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), n_))), Wildcard.optional('p', Integer(1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), IntegerQ(p_)), (f, e, n, c, g, x, p, a, h, d)))
    rule1415 = ReplacementRule(pattern1415, lambda f, e, n, c, g, x, p, a, h, d : Mul(Mul(Integer(1), Pow(Mul(Integer(2), e), Integer(-1))), Subst(Int(Mul(Pow(Add(g, Mul(h, Pow(x, n))), p), Mul(Add(Pow(d, Integer(2)), Mul(a, Pow(f, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d, x)), Pow(x, Integer(2))), Pow(Pow(Add(d, Mul(Integer(-1), x)), Integer(2)), Integer(-1)))), x), x, Add(d, Mul(e, x), Mul(f, Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))))))))
    rubi.add(rule1415)

    pattern1416 = Pattern(Int(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Pow(Add(u_, Mul(Wildcard.optional('f', Integer(1)), Pow(v_, Rational(Integer(1), Integer(2))))), n_))), Wildcard.optional('p', Integer(1))), x_), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), cons(And(LinearQ(u_, x_), QuadraticQ(v_, x_), Not(And(LinearMatchQ(u_, x_), QuadraticMatchQ(v_, x_))), ZeroQ(Add(Pow(Coefficient(u_, x_, Integer(1)), Integer(2)), Mul(Integer(-1), Mul(Coefficient(v_, x_, Integer(2)), Pow(f_, Integer(2)))))), IntegerQ(p_)), (f, n, g, x, u, p, h, v)))
    rule1416 = ReplacementRule(pattern1416, lambda f, n, g, x, u, p, h, v : Int(Pow(Add(g, Mul(h, Pow(Add(ExpandToSum(u, x), Mul(f, Sqrt(ExpandToSum(v, x)))), n))), p), x))
    rubi.add(rule1416)

    pattern1417 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), IntegerQ(m_)), (f, e, n, c, g, x, m, a, h)))
    rule1417 = ReplacementRule(pattern1417, lambda f, e, n, c, g, x, m, a, h : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(2), Add(m, Integer(1))), Pow(e, Add(m, Integer(1)))), Integer(-1))), Subst(Int(Mul(Pow(x, Add(n, Mul(Integer(-1), m), Integer(-2))), Add(Mul(a, Pow(f, Integer(2))), Pow(x, Integer(2))), Pow(Add(Mul(Mul(Integer(-1), a), Pow(f, Integer(2)), h), Mul(Integer(2), e, g, x), Mul(h, Pow(x, Integer(2)))), m)), x), x, Add(Mul(e, x), Mul(f, Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))))))))
    rubi.add(rule1417)

    pattern1418 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('p', Integer(1))), Pow(Add(g_, Mul(Wildcard.optional('i', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1))), Pow(Add(Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(i, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), ZeroQ(Add(Mul(c_, g_), Mul(Integer(-1), Mul(a_, i_)))), IntegersQ(p_, Mul(Integer(2), m_)), Or(IntegerQ(m_), PositiveQ(Mul(i_, Pow(c_, Integer(-1)))))), (f, e, n, c, x, g, m, i, p, a)))
    rule1418 = ReplacementRule(pattern1418, lambda f, e, n, c, x, g, m, i, p, a : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(2), Add(Mul(Integer(2), m), p, Integer(1))), Pow(e, Add(p, Integer(1))), Pow(f, Mul(Integer(2), m))), Integer(-1))), Pow(Mul(i, Pow(c, Integer(-1))), m), Subst(Int(Mul(Pow(x, Add(n, Mul(Integer(-1), Mul(Integer(2), m)), Mul(Integer(-1), p), Integer(-2))), Pow(Add(Mul(Mul(Integer(-1), a), Pow(f, Integer(2))), Pow(x, Integer(2))), p), Pow(Add(Mul(a, Pow(f, Integer(2))), Pow(x, Integer(2))), Add(Mul(Integer(2), m), Integer(1)))), x), x, Add(Mul(e, x), Mul(f, Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))))))))
    rubi.add(rule1418)

    pattern1419 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_), Mul(Wildcard.optional('i', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(i, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), ZeroQ(Add(Mul(c_, g_), Mul(Integer(-1), Mul(a_, i_)))), ZeroQ(Add(Mul(c_, h_), Mul(Integer(-1), Mul(b_, i_)))), IntegerQ(Mul(Integer(2), m_)), Or(IntegerQ(m_), PositiveQ(Mul(i_, Pow(c_, Integer(-1)))))), (e, f, n, c, g, x, m, i, b, a, h, d)))
    rule1419 = ReplacementRule(pattern1419, lambda e, f, n, c, g, x, m, i, b, a, h, d : Mul(Mul(Integer(2), Pow(Pow(f, Mul(Integer(2), m)), Integer(-1))), Pow(Mul(i, Pow(c, Integer(-1))), m), Subst(Int(Mul(Pow(x, n), Mul(Pow(Add(Mul(Pow(d, Integer(2)), e), Mul(Integer(-1), Mul(Add(Mul(b, d), Mul(Integer(-1), Mul(a, e))), Pow(f, Integer(2)))), Mul(Integer(-1), Mul(Add(Mul(Integer(2), d, e), Mul(Integer(-1), Mul(b, Pow(f, Integer(2))))), x)), Mul(e, Pow(x, Integer(2)))), Add(Mul(Integer(2), m), Integer(1))), Pow(Pow(Add(Mul(Integer(-2), d, e), Mul(b, Pow(f, Integer(2))), Mul(Integer(2), e, x)), Mul(Integer(2), Add(m, Integer(1)))), Integer(-1)))), x), x, Add(d, Mul(e, x), Mul(f, Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))))))))
    rubi.add(rule1419)

    pattern1420 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('i', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(i, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), ZeroQ(Add(Mul(c_, g_), Mul(Integer(-1), Mul(a_, i_)))), IntegerQ(Mul(Integer(2), m_)), Or(IntegerQ(m_), PositiveQ(Mul(i_, Pow(c_, Integer(-1)))))), (f, e, n, c, g, x, m, i, a, d)))
    rule1420 = ReplacementRule(pattern1420, lambda f, e, n, c, g, x, m, i, a, d : Mul(Mul(Integer(1), Pow(Mul(Pow(Integer(2), Add(Mul(Integer(2), m), Integer(1))), e, Pow(f, Mul(Integer(2), m))), Integer(-1))), Pow(Mul(i, Pow(c, Integer(-1))), m), Subst(Int(Mul(Pow(x, n), Mul(Pow(Add(Pow(d, Integer(2)), Mul(a, Pow(f, Integer(2))), Mul(Integer(-1), Mul(Integer(2), d, x)), Pow(x, Integer(2))), Add(Mul(Integer(2), m), Integer(1))), Pow(Pow(Add(Mul(Integer(-1), d), x), Mul(Integer(2), Add(m, Integer(1)))), Integer(-1)))), x), x, Add(d, Mul(e, x), Mul(f, Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))))))))
    rubi.add(rule1420)

    pattern1421 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_), Mul(Wildcard.optional('i', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(i, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), ZeroQ(Add(Mul(c_, g_), Mul(Integer(-1), Mul(a_, i_)))), ZeroQ(Add(Mul(c_, h_), Mul(Integer(-1), Mul(b_, i_)))), PositiveIntegerQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Not(PositiveQ(Mul(i_, Pow(c_, Integer(-1)))))), (e, f, n, c, g, x, m, i, b, a, h, d)))
    rule1421 = ReplacementRule(pattern1421, lambda e, f, n, c, g, x, m, i, b, a, h, d : Mul(Pow(Mul(i, Pow(c, Integer(-1))), Add(m, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), Mul(Sqrt(Add(g, Mul(h, x), Mul(i, Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), m), Pow(Add(d, Mul(e, x), Mul(f, Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))))), n)), x)))
    rubi.add(rule1421)

    pattern1422 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('i', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(i, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), ZeroQ(Add(Mul(c_, g_), Mul(Integer(-1), Mul(a_, i_)))), PositiveIntegerQ(Add(m_, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Not(PositiveQ(Mul(i_, Pow(c_, Integer(-1)))))), (f, e, n, c, g, x, m, i, a, d)))
    rule1422 = ReplacementRule(pattern1422, lambda f, e, n, c, g, x, m, i, a, d : Mul(Pow(Mul(i, Pow(c, Integer(-1))), Add(m, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), Mul(Sqrt(Add(g, Mul(i, Pow(x, Integer(2))))), Pow(Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), m), Pow(Add(d, Mul(e, x), Mul(f, Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))))), n)), x)))
    rubi.add(rule1422)

    pattern1423 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), x_), Mul(Wildcard.optional('i', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), x_), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(i, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), ZeroQ(Add(Mul(c_, g_), Mul(Integer(-1), Mul(a_, i_)))), ZeroQ(Add(Mul(c_, h_), Mul(Integer(-1), Mul(b_, i_)))), NegativeIntegerQ(Add(m_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), Not(PositiveQ(Mul(i_, Pow(c_, Integer(-1)))))), (e, f, n, c, g, x, m, i, b, a, h, d)))
    rule1423 = ReplacementRule(pattern1423, lambda e, f, n, c, g, x, m, i, b, a, h, d : Mul(Pow(Mul(i, Pow(c, Integer(-1))), Add(m, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Mul(Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))), Pow(Sqrt(Add(g, Mul(h, x), Mul(i, Pow(x, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2)))), m), Pow(Add(d, Mul(e, x), Mul(f, Sqrt(Add(a, Mul(b, x), Mul(c, Pow(x, Integer(2))))))), n)), x)))
    rubi.add(rule1423)

    pattern1424 = Pattern(Int(Mul(Pow(Add(g_, Mul(Wildcard.optional('i', Integer(1)), Pow(x_, Integer(2)))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('d', Integer(0)), Mul(Wildcard.optional('e', Integer(1)), x_), Mul(Wildcard.optional('f', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Wildcard.optional('n', Integer(1)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(i, x), FreeQ(n, x), cons(And(ZeroQ(Add(Pow(e_, Integer(2)), Mul(Integer(-1), Mul(c_, Pow(f_, Integer(2)))))), ZeroQ(Add(Mul(c_, g_), Mul(Integer(-1), Mul(a_, i_)))), NegativeIntegerQ(Add(m_, Mul(Integer(-1), Mul(Integer(1), Pow(Integer(2), Integer(-1)))))), Not(PositiveQ(Mul(i_, Pow(c_, Integer(-1)))))), (f, e, n, c, g, x, m, i, a, d)))
    rule1424 = ReplacementRule(pattern1424, lambda f, e, n, c, g, x, m, i, a, d : Mul(Pow(Mul(i, Pow(c, Integer(-1))), Add(m, Mul(Integer(1), Pow(Integer(2), Integer(-1))))), Mul(Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))), Pow(Sqrt(Add(g, Mul(i, Pow(x, Integer(2))))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Integer(2)))), m), Pow(Add(d, Mul(e, x), Mul(f, Sqrt(Add(a, Mul(c, Pow(x, Integer(2))))))), n)), x)))
    rubi.add(rule1424)

    pattern1425 = Pattern(Int(Mul(Pow(Add(u_, Mul(Wildcard.optional('f', Integer(1)), Add(Wildcard.optional('j', Integer(0)), Mul(Wildcard.optional('k', Integer(1)), Pow(v_, Rational(Integer(1), Integer(2))))))), Wildcard.optional('n', Integer(1))), Pow(w_, Wildcard.optional('m', Integer(1)))), x_), FreeQ(f, x), FreeQ(j, x), FreeQ(k, x), FreeQ(m, x), FreeQ(n, x), cons(And(LinearQ(u_, x_), QuadraticQ(List(v_, w_), x_), Not(And(LinearMatchQ(u_, x_), QuadraticMatchQ(List(v_, w_), x_), Or(ZeroQ(j_), ZeroQ(Add(f_, Integer(-1)))))), ZeroQ(Add(Pow(Coefficient(u_, x_, Integer(1)), Integer(2)), Mul(Integer(-1), Mul(Coefficient(v_, x_, Integer(2)), Pow(f_, Integer(2)), Pow(k_, Integer(2))))))), (f, n, x, m, u, j, w, v, k)))
    rule1425 = ReplacementRule(pattern1425, lambda f, n, x, m, u, j, w, v, k : Int(Mul(Pow(ExpandToSum(w, x), m), Pow(Add(ExpandToSum(Add(u, Mul(f, j)), x), Mul(f, k, Sqrt(ExpandToSum(v, x)))), n)), x))
    rubi.add(rule1425)

    pattern1426 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Integer(-1)), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Wildcard.optional('p', Integer(1))))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(ZeroQ(Add(p_, Mul(Integer(-1), Mul(Integer(2), Pow(n_, Integer(-1))))))), (n, c, x, b, p, a, d)))
    rule1426 = ReplacementRule(pattern1426, lambda n, c, x, b, p, a, d : Mul(Mul(Integer(1), Pow(a, Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(Integer(1), Mul(Integer(-1), Mul(c, Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(Mul(c, Pow(x, Integer(2))), Mul(d, Pow(Add(a, Mul(b, Pow(x, n))), Mul(Integer(2), Pow(n, Integer(-1))))))), Integer(-1))))))
    rubi.add(rule1426)

    pattern1427 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Rational(Integer(1), Integer(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Pow(a_, Integer(2)), Mul(Integer(-1), Mul(Pow(b_, Integer(2)), c_))))), (c, x, b, a, d)))
    rule1427 = ReplacementRule(pattern1427, lambda c, x, b, a, d : Add(Mul(Integer(2), Pow(b, Integer(2)), d, Mul(Pow(x, Integer(3)), Pow(Mul(Integer(3), Pow(Add(a, Mul(b, Sqrt(Add(c, Mul(d, Pow(x, Integer(2))))))), Mul(Integer(3), Pow(Integer(2), Integer(-1))))), Integer(-1)))), Mul(Integer(2), a, Mul(x, Pow(Sqrt(Add(a, Mul(b, Sqrt(Add(c, Mul(d, Pow(x, Integer(2)))))))), Integer(-1))))))
    rubi.add(rule1427)

    pattern1428 = Pattern(Int(Mul(Pow(x_, Integer(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Add(Mul(Wildcard.optional('a', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('b', Integer(1)), x_, Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2))))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Pow(a_, Integer(2)), Mul(Integer(-1), Mul(Pow(b_, Integer(2)), d_)))), ZeroQ(Add(Mul(Pow(b_, Integer(2)), c_), a_))), (c, x, b, a, d)))
    rule1428 = ReplacementRule(pattern1428, lambda c, x, b, a, d : Mul(Sqrt(Integer(2)), Mul(b, Pow(a, Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Sqrt(Add(Integer(1), Mul(Pow(x, Integer(2)), Pow(a, Integer(-1))))), Integer(-1))), x), x, Add(Mul(a, x), Mul(b, Sqrt(Add(c, Mul(d, Pow(x, Integer(2))))))))))
    rubi.add(rule1428)

    pattern1429 = Pattern(Int(Mul(Pow(x_, Integer(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(-1), Integer(2))), Pow(Mul(Wildcard.optional('e', Integer(1)), x_, Add(Mul(Wildcard.optional('a', Integer(1)), x_), Mul(Wildcard.optional('b', Integer(1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, Integer(2)))), Rational(Integer(1), Integer(2)))))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(ZeroQ(Add(Pow(a_, Integer(2)), Mul(Integer(-1), Mul(Pow(b_, Integer(2)), d_)))), ZeroQ(Add(Mul(Pow(b_, Integer(2)), c_, e_), a_))), (e, c, x, b, a, d)))
    rule1429 = ReplacementRule(pattern1429, lambda e, c, x, b, a, d : Int(Mul(Sqrt(Add(Mul(a, e, Pow(x, Integer(2))), Mul(b, e, x, Sqrt(Add(c, Mul(d, Pow(x, Integer(2)))))))), Pow(Mul(x, Sqrt(Add(c, Mul(d, Pow(x, Integer(2)))))), Integer(-1))), x))
    rubi.add(rule1429)

    pattern1430 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), Pow(Add(Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('d', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(1), Integer(2))))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Pow(c_, Integer(2)), Mul(Integer(-1), Mul(b_, Pow(d_, Integer(2))))))), (c, x, b, a, d)))
    rule1430 = ReplacementRule(pattern1430, lambda c, x, b, a, d : Mul(d, Subst(Int(Mul(Integer(1), Pow(Add(Integer(1), Mul(Integer(-1), Mul(Integer(2), c, Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(x, Pow(Sqrt(Add(Mul(c, Pow(x, Integer(2))), Mul(d, Sqrt(Add(a, Mul(b, Pow(x, Integer(4)))))))), Integer(-1))))))
    rubi.add(rule1430)

    pattern1431 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), x_)), Wildcard.optional('m', Integer(1))), Pow(Add(a_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(-1), Integer(2))), Pow(Add(Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Pow(Add(a_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(4)))), Rational(Integer(1), Integer(2)))), Rational(Integer(1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(ZeroQ(Add(e_, Mul(Integer(-1), Pow(b_, Integer(2))))), PositiveQ(a_)), (e, c, x, m, b, a, d)))
    rule1431 = ReplacementRule(pattern1431, lambda e, c, x, m, b, a, d : Add(Mul(Mul(Add(Integer(1), Mul(Integer(-1), \(Integer(ImaginaryI)))), Pow(Integer(2), Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), m), Pow(Sqrt(Add(Sqrt(a), Mul(Integer(-1), Mul(\(Integer(ImaginaryI)), b, Pow(x, Integer(2)))))), Integer(-1))), x)), Mul(Mul(Add(Integer(1), \(Integer(ImaginaryI))), Pow(Integer(2), Integer(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), m), Pow(Sqrt(Add(Sqrt(a), Mul(\(Integer(ImaginaryI)), b, Pow(x, Integer(2))))), Integer(-1))), x))))
    rubi.add(rule1431)

    pattern1432 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(a_), PosQ(b_)), (c, x, b, a, d)))
    rule1432 = ReplacementRule(pattern1432, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Add(Mul(Mul(Mul(Integer(-1), Integer(q)), Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(Integer(-1), Mul(c, Integer(q)))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(d, Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(Integer(-1), Mul(c, Integer(q)))), Integer(-1))), Int(Mul(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(q), x)), Pow(Mul(Add(c, Mul(d, x)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3)))))), Integer(-1))), x)))))
    rubi.add(rule1432)

    pattern1433 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(a_), NegQ(b_)), (c, x, b, a, d)))
    rule1433 = ReplacementRule(pattern1433, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), b), Pow(a, Integer(-1))), Integer(3)))), Add(Mul(Mul(Integer(q), Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(c, Integer(q))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(d, Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(c, Integer(q))), Integer(-1))), Int(Mul(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(-1), Mul(Integer(q), x))), Pow(Mul(Add(c, Mul(d, x)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3)))))), Integer(-1))), x)))))
    rubi.add(rule1433)

    pattern1434 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(a_), PosQ(b_)), (c, x, b, a, d)))
    rule1434 = ReplacementRule(pattern1434, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), b), Pow(a, Integer(-1))), Integer(3)))), Add(Mul(Mul(Integer(q), Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(c, Integer(q))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(d, Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(c, Integer(q))), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(-1), Mul(Integer(q), x))), Pow(Mul(Add(c, Mul(d, x)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3)))))), Integer(-1))), x)))))
    rubi.add(rule1434)

    pattern1435 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(a_), NegQ(b_)), (c, x, b, a, d)))
    rule1435 = ReplacementRule(pattern1435, lambda c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Add(Mul(Mul(Mul(Integer(-1), Integer(q)), Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(Integer(-1), Mul(c, Integer(q)))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(d, Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(Integer(-1), Mul(c, Integer(q)))), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(q), x)), Pow(Mul(Add(c, Mul(d, x)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3)))))), Integer(-1))), x)))))
    rubi.add(rule1435)

    pattern1436 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(a_), PosQ(b_)), (f, e, c, x, b, a, d)))
    rule1436 = ReplacementRule(pattern1436, lambda f, e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Condition(Mul(Integer(4), Pow(Integer(3), Mul(Integer(1), Pow(Integer(4), Integer(-1)))), Sqrt(Add(Integer(2), Mul(Integer(-1), Sqrt(Integer(3))))), f, Add(Integer(1), Mul(Integer(q), x)), Mul(Sqrt(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), x)), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Pow(Pow(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(q), x)), Integer(2)), Integer(-1)))), Pow(Mul(Integer(q), Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Sqrt(Mul(Add(Integer(1), Mul(Integer(q), x)), Pow(Pow(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(q), x)), Integer(2)), Integer(-1))))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Mul(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(Integer(-1), Mul(c, Integer(q))), Mul(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(Integer(-1), Mul(c, Integer(q)))), x)), Sqrt(Add(Integer(1), Mul(Integer(-1), Pow(x, Integer(2))))), Sqrt(Add(Integer(7), Mul(Integer(-1), Mul(Integer(4), Sqrt(Integer(3)))), Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(Add(Integer(-1), Sqrt(Integer(3)), Mul(Integer(-1), Mul(Integer(q), x))), Pow(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(q), x)), Integer(-1))))), ZeroQ(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), f), Mul(Integer(-1), Mul(e, Integer(q))))))))
    rubi.add(rule1436)

    pattern1437 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(a_), PosQ(b_)), (f, e, c, x, b, a, d)))
    rule1437 = ReplacementRule(pattern1437, lambda f, e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Condition(Add(Mul(Mul(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), f), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(Integer(-1), Mul(c, Integer(q)))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(Integer(-1), Mul(c, Integer(q)))), Integer(-1))), Int(Mul(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(q), x)), Pow(Mul(Add(c, Mul(d, x)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3)))))), Integer(-1))), x))), NonzeroQ(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), f), Mul(Integer(-1), Mul(e, Integer(q))))))))
    rubi.add(rule1437)

    pattern1438 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(a_), NegQ(b_)), (f, e, c, x, b, a, d)))
    rule1438 = ReplacementRule(pattern1438, lambda f, e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), b), Pow(a, Integer(-1))), Integer(3)))), Condition(Mul(Integer(-4), Pow(Integer(3), Mul(Integer(1), Pow(Integer(4), Integer(-1)))), Sqrt(Add(Integer(2), Mul(Integer(-1), Sqrt(Integer(3))))), f, Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), x))), Mul(Sqrt(Mul(Add(Integer(1), Mul(Integer(q), x), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Pow(Pow(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(-1), Mul(Integer(q), x))), Integer(2)), Integer(-1)))), Pow(Mul(Integer(q), Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Sqrt(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), x))), Pow(Pow(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(-1), Mul(Integer(q), x))), Integer(2)), Integer(-1))))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Mul(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(c, Integer(q)), Mul(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(c, Integer(q))), x)), Sqrt(Add(Integer(1), Mul(Integer(-1), Pow(x, Integer(2))))), Sqrt(Add(Integer(7), Mul(Integer(-1), Mul(Integer(4), Sqrt(Integer(3)))), Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(Add(Integer(-1), Sqrt(Integer(3)), Mul(Integer(q), x)), Pow(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(-1), Mul(Integer(q), x))), Integer(-1))))), ZeroQ(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), f), Mul(e, Integer(q)))))))
    rubi.add(rule1438)

    pattern1439 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(a_), NegQ(b_)), (f, e, c, x, b, a, d)))
    rule1439 = ReplacementRule(pattern1439, lambda f, e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), b), Pow(a, Integer(-1))), Integer(3)))), Condition(Add(Mul(Mul(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), f), Mul(e, Integer(q))), Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(c, Integer(q))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(c, Integer(q))), Integer(-1))), Int(Mul(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(-1), Mul(Integer(q), x))), Pow(Mul(Add(c, Mul(d, x)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3)))))), Integer(-1))), x))), NonzeroQ(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), f), Mul(e, Integer(q)))))))
    rubi.add(rule1439)

    pattern1440 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NegQ(a_), PosQ(b_)), (f, e, c, x, b, a, d)))
    rule1440 = ReplacementRule(pattern1440, lambda f, e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), b), Pow(a, Integer(-1))), Integer(3)))), Condition(Mul(Integer(4), Pow(Integer(3), Mul(Integer(1), Pow(Integer(4), Integer(-1)))), Sqrt(Add(Integer(2), Sqrt(Integer(3)))), f, Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), x))), Mul(Sqrt(Mul(Add(Integer(1), Mul(Integer(q), x), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Pow(Pow(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(-1), Mul(Integer(q), x))), Integer(2)), Integer(-1)))), Pow(Mul(Integer(q), Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Sqrt(Mul(Mul(Integer(-1), Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), x)))), Pow(Pow(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(-1), Mul(Integer(q), x))), Integer(2)), Integer(-1))))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Mul(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(c, Integer(q)), Mul(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(c, Integer(q))), x)), Sqrt(Add(Integer(1), Mul(Integer(-1), Pow(x, Integer(2))))), Sqrt(Add(Integer(7), Mul(Integer(4), Sqrt(Integer(3))), Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(-1), Mul(Integer(q), x))), Pow(Add(Integer(-1), Sqrt(Integer(3)), Mul(Integer(q), x)), Integer(-1))))), ZeroQ(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), f), Mul(e, Integer(q)))))))
    rubi.add(rule1440)

    pattern1441 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NegQ(a_), PosQ(b_)), (f, e, c, x, b, a, d)))
    rule1441 = ReplacementRule(pattern1441, lambda f, e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Mul(Integer(-1), b), Pow(a, Integer(-1))), Integer(3)))), Condition(Add(Mul(Mul(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), f), Mul(e, Integer(q))), Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(c, Integer(q))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(c, Integer(q))), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(-1), Mul(Integer(q), x))), Pow(Mul(Add(c, Mul(d, x)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3)))))), Integer(-1))), x))), NonzeroQ(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), f), Mul(e, Integer(q)))))))
    rubi.add(rule1441)

    pattern1442 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Add(e_, Mul(Wildcard.optional('f', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NegQ(a_), NegQ(b_)), (f, e, c, x, b, a, d)))
    rule1442 = ReplacementRule(pattern1442, lambda f, e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Condition(Mul(Integer(-4), Pow(Integer(3), Mul(Integer(1), Pow(Integer(4), Integer(-1)))), Sqrt(Add(Integer(2), Sqrt(Integer(3)))), f, Add(Integer(1), Mul(Integer(q), x)), Mul(Sqrt(Mul(Add(Integer(1), Mul(Integer(-1), Mul(Integer(q), x)), Mul(Pow(Integer(q), Integer(2)), Pow(x, Integer(2)))), Pow(Pow(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(q), x)), Integer(2)), Integer(-1)))), Pow(Mul(Integer(q), Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Sqrt(Mul(Mul(Integer(-1), Add(Integer(1), Mul(Integer(q), x))), Pow(Pow(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(q), x)), Integer(2)), Integer(-1))))), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Mul(Add(Mul(Add(Integer(1), Sqrt(Integer(3))), d), Mul(Integer(-1), Mul(c, Integer(q))), Mul(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(Integer(-1), Mul(c, Integer(q)))), x)), Sqrt(Add(Integer(1), Mul(Integer(-1), Pow(x, Integer(2))))), Sqrt(Add(Integer(7), Mul(Integer(4), Sqrt(Integer(3))), Pow(x, Integer(2))))), Integer(-1))), x), x, Mul(Add(Integer(1), Sqrt(Integer(3)), Mul(Integer(q), x)), Pow(Add(Integer(-1), Sqrt(Integer(3)), Mul(Integer(-1), Mul(Integer(q), x))), Integer(-1))))), ZeroQ(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), f), Mul(Integer(-1), Mul(e, Integer(q))))))))
    rubi.add(rule1442)

    pattern1443 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), x_)), Integer(-1)), Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), x_)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(3)))), Rational(Integer(-1), Integer(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NegQ(a_), NegQ(b_)), (f, e, c, x, b, a, d)))
    rule1443 = ReplacementRule(pattern1443, lambda f, e, c, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(b, Pow(a, Integer(-1))), Integer(3)))), Condition(Add(Mul(Mul(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), f), Mul(Integer(-1), Mul(e, Integer(q)))), Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(Integer(-1), Mul(c, Integer(q)))), Integer(-1))), Int(Mul(Integer(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, Integer(3))))), Integer(-1))), x)), Mul(Mul(Add(Mul(d, e), Mul(Integer(-1), Mul(c, f))), Pow(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), d), Mul(Integer(-1), Mul(c, Integer(q)))), Integer(-1))), Int(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3))), Mul(Integer(q), x)), Pow(Mul(Add(c, Mul(d, x)), Sqrt(Add(a, Mul(b, Pow(x, Integer(3)))))), Integer(-1))), x))), NonzeroQ(Add(Mul(Add(Integer(1), Mul(Integer(-1), Sqrt(Integer(3)))), f), Mul(Integer(-1), Mul(e, Integer(q))))))))
    rubi.add(rule1443)

    pattern1444 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('e', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Rational(Integer(1), Integer(2))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(0)), IntegerQ(Mul(Add(m_, Integer(1)), Pow(n_, Integer(-1))))), (e, n, c, x, m, b, a, d)))
    rule1444 = ReplacementRule(pattern1444, lambda e, n, c, x, m, b, a, d : Mul(Mul(Integer(1), Pow(n, Integer(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, Integer(1)), Pow(n, Integer(-1))), Integer(-1))), Pow(Add(c, Mul(d, x), Mul(e, Sqrt(Add(a, Mul(b, x))))), Integer(-1))), x), x, Pow(x, n))))
    rubi.add(rule1444)

    pattern1445 = Pattern(Int(Mul(Wildcard.optional('u', Integer(1)), Pow(Add(c_, Mul(Wildcard.optional('d', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('e', Integer(1)), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_))), Rational(Integer(1), Integer(2))))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(Integer(-1), Mul(a_, d_))), Integer(0))), (e, n, c, x, u, b, a, d)))
    rule1445 = ReplacementRule(pattern1445, lambda e, n, c, x, u, b, a, d : Add(Mul(c, Int(Mul(u, Pow(Add(Pow(c, Integer(2)), Mul(Integer(-1), Mul(a, Pow(e, Integer(2)))), Mul(c, d, Pow(x, n))), Integer(-1))), x)), Mul(Integer(-1), Mul(a, e, Int(Mul(u, Pow(Mul(Add(Pow(c, Integer(2)), Mul(Integer(-1), Mul(a, Pow(e, Integer(2)))), Mul(c, d, Pow(x, n))), Sqrt(Add(a, Mul(b, Pow(x, n))))), Integer(-1))), x)))))
    rubi.add(rule1445)

    pattern1446 = Pattern(Int(Mul(Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, n_))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(A, x), FreeQ(B, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(n_, Integer(-2))), ZeroQ(Add(Mul(a_, Pow(B_, Integer(2))), Mul(Integer(-1), Mul(Pow(A_, Integer(2)), d_, Pow(Add(n_, Integer(-1)), Integer(2)))))), ZeroQ(Add(Mul(B_, c_), Mul(Integer(2), A_, d_, Add(n_, Integer(-1)))))), (n, c, x, A, n2, b, B, d, a)))
    rule1446 = ReplacementRule(pattern1446, lambda n, c, x, A, n2, b, B, d, a : Mul(Pow(A, Integer(2)), Add(n, Integer(-1)), Subst(Int(Mul(Integer(1), Pow(Add(a, Mul(Pow(A, Integer(2)), b, Pow(Add(n, Integer(-1)), Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(x, Pow(Add(Mul(A, Add(n, Integer(-1))), Mul(Integer(-1), Mul(B, Pow(x, n)))), Integer(-1))))))
    rubi.add(rule1446)

    pattern1447 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', Integer(1))), Add(A_, Mul(Wildcard.optional('B', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1))))), Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Wildcard.optional('k', Integer(1)))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Wildcard.optional('n', Integer(1)))), Mul(Wildcard.optional('d', Integer(1)), Pow(x_, n2_))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(A, x), FreeQ(B, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(k_, Mul(Integer(-1), Mul(Integer(2), Add(m_, Integer(1)))))), ZeroQ(Add(Mul(a_, Pow(B_, Integer(2)), Pow(Add(m_, Integer(1)), Integer(2))), Mul(Integer(-1), Mul(Pow(A_, Integer(2)), d_, Pow(Add(m_, Mul(Integer(-1), n_), Integer(1)), Integer(2)))))), ZeroQ(Add(Mul(B_, c_, Add(m_, Integer(1))), Mul(Integer(-1), Mul(Integer(2), A_, d_, Add(m_, Mul(Integer(-1), n_), Integer(1))))))), (n, c, x, A, a, m, n2, b, B, d, k)))
    rule1447 = ReplacementRule(pattern1447, lambda n, c, x, A, a, m, n2, b, B, d, k : Mul(Pow(A, Integer(2)), Mul(Add(m, Mul(Integer(-1), n), Integer(1)), Pow(Add(m, Integer(1)), Integer(-1))), Subst(Int(Mul(Integer(1), Pow(Add(a, Mul(Pow(A, Integer(2)), b, Pow(Add(m, Mul(Integer(-1), n), Integer(1)), Integer(2)), Pow(x, Integer(2)))), Integer(-1))), x), x, Mul(Pow(x, Add(m, Integer(1))), Pow(Add(Mul(A, Add(m, Mul(Integer(-1), n), Integer(1))), Mul(B, Add(m, Integer(1)), Pow(x, n))), Integer(-1))))))
    rubi.add(rule1447)

    pattern1448 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, n2_)), Mul(g_, Pow(x_, n3_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (n3, e, f, n, c, x, g, n2, b, p, a, d)))
    rule1448 = ReplacementRule(pattern1448, lambda n3, e, f, n, c, x, g, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Pow(b, Integer(2)), c, d), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))))), Mul(Integer(-1), Mul(a, b, Add(Mul(c, e), Mul(a, g)))), Mul(Add(Mul(b, c, Add(Mul(c, d), Mul(a, f))), Mul(Integer(-1), Mul(a, Pow(b, Integer(2)), g)), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(c, e), Mul(Integer(-1), Mul(a, g)))))), Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, c, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, c, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(a, b, Add(Mul(c, e), Mul(a, g))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), c, d, Add(n, Mul(n, p), Integer(1)))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(a, f), Mul(Integer(-1), Mul(c, d, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1))))))), Mul(Add(Mul(a, Pow(b, Integer(2)), g, Add(Mul(n, Add(p, Integer(2))), Integer(1))), Mul(Integer(-1), Mul(b, c, Add(Mul(c, d), Mul(a, f)), Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(a, g, Add(n, Integer(1))), Mul(Integer(-1), Mul(c, e, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)))))))), Pow(x, n))), x)), x)))))
    rubi.add(rule1448)

    pattern1449 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, n2_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (e, f, n, c, x, n2, b, p, a, d)))
    rule1449 = ReplacementRule(pattern1449, lambda e, f, n, c, x, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Pow(b, Integer(2)), d), Mul(Integer(-1), Mul(Integer(2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))))), Mul(Integer(-1), Mul(a, b, e)), Mul(Add(Mul(b, Add(Mul(c, d), Mul(a, f))), Mul(Integer(-1), Mul(Integer(2), a, c, e))), Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(a, b, e), Mul(Integer(-1), Mul(Pow(b, Integer(2)), d, Add(n, Mul(n, p), Integer(1)))), Mul(Integer(-1), Mul(Integer(2), a, Add(Mul(a, f), Mul(Integer(-1), Mul(c, d, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1))))))), Mul(Integer(-1), Mul(Add(Mul(b, Add(Mul(c, d), Mul(a, f)), Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1))), Mul(Integer(-1), Mul(Integer(2), a, c, e, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1))))), Pow(x, n)))), x)), x)))))
    rubi.add(rule1449)

    pattern1450 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), Mul(g_, Pow(x_, n3_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(g, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (n3, e, n, c, x, g, n2, b, p, a, d)))
    rule1450 = ReplacementRule(pattern1450, lambda n3, e, n, c, x, g, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Pow(b, Integer(2)), c, d), Mul(Integer(-1), Mul(Integer(2), a, Pow(c, Integer(2)), d)), Mul(Integer(-1), Mul(a, b, Add(Mul(c, e), Mul(a, g)))), Mul(Add(Mul(b, Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(a, Pow(b, Integer(2)), g)), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(c, e), Mul(Integer(-1), Mul(a, g)))))), Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, c, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, c, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(a, b, Add(Mul(c, e), Mul(a, g))), Mul(Integer(-1), Mul(Pow(b, Integer(2)), c, d, Add(n, Mul(n, p), Integer(1)))), Mul(Integer(2), a, Pow(c, Integer(2)), d, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1))), Mul(Add(Mul(a, Pow(b, Integer(2)), g, Add(Mul(n, Add(p, Integer(2))), Integer(1))), Mul(Integer(-1), Mul(b, Pow(c, Integer(2)), d, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(a, g, Add(n, Integer(1))), Mul(Integer(-1), Mul(c, e, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)))))))), Pow(x, n))), x)), x)))))
    rubi.add(rule1450)

    pattern1451 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, n2_)), Mul(g_, Pow(x_, n3_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (n3, f, n, c, x, g, n2, b, p, a, d)))
    rule1451 = ReplacementRule(pattern1451, lambda n3, f, n, c, x, g, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Pow(b, Integer(2)), c, d), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))))), Mul(Integer(-1), Mul(Pow(a, Integer(2)), b, g)), Mul(Add(Mul(b, c, Add(Mul(c, d), Mul(a, f))), Mul(Integer(-1), Mul(a, Pow(b, Integer(2)), g)), Mul(Integer(2), Pow(a, Integer(2)), c, g)), Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, c, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, c, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(Pow(a, Integer(2)), b, g), Mul(Integer(-1), Mul(Pow(b, Integer(2)), c, d, Add(n, Mul(n, p), Integer(1)))), Mul(Integer(-1), Mul(Integer(2), a, c, Add(Mul(a, f), Mul(Integer(-1), Mul(c, d, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1))))))), Mul(Add(Mul(a, Pow(b, Integer(2)), g, Add(Mul(n, Add(p, Integer(2))), Integer(1))), Mul(Integer(-1), Mul(b, c, Add(Mul(c, d), Mul(a, f)), Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)))), Mul(Integer(-1), Mul(Integer(2), Pow(a, Integer(2)), c, g, Add(n, Integer(1))))), Pow(x, n))), x)), x)))))
    rubi.add(rule1451)

    pattern1452 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_), Add(d_, Mul(Wildcard.optional('f', Integer(1)), Pow(x_, n2_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (f, n, c, x, n2, b, p, a, d)))
    rule1452 = ReplacementRule(pattern1452, lambda f, n, c, x, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Pow(b, Integer(2)), d), Mul(Integer(-1), Mul(Integer(2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f))))), Mul(b, Add(Mul(c, d), Mul(a, f)), Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(Pow(b, Integer(2)), d, Add(n, Mul(n, p), Integer(1))), Mul(Integer(2), a, Add(Mul(a, f), Mul(Integer(-1), Mul(c, d, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)))))), Mul(b, Add(Mul(c, d), Mul(a, f)), Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)), Pow(x, n))), x)), x))))
    rubi.add(rule1452)

    pattern1453 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_), Add(d_, Mul(g_, Pow(x_, n3_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(g, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NonzeroQ(Add(Pow(b_, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a_, c_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (n3, n, c, x, g, n2, b, p, a, d)))
    rule1453 = ReplacementRule(pattern1453, lambda n3, n, c, x, g, n2, b, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Pow(b, Integer(2)), c, d), Mul(Integer(-1), Mul(Integer(2), a, Pow(c, Integer(2)), d)), Mul(Integer(-1), Mul(Pow(a, Integer(2)), b, g)), Mul(Add(Mul(b, Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(a, Pow(b, Integer(2)), g)), Mul(Integer(2), Pow(a, Integer(2)), c, g)), Pow(x, n))), Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, c, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, c, n, Add(p, Integer(1)), Add(Pow(b, Integer(2)), Mul(Integer(-1), Mul(Integer(4), a, c)))), Integer(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n)), Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(Pow(a, Integer(2)), b, g), Mul(Integer(-1), Mul(Pow(b, Integer(2)), c, d, Add(n, Mul(n, p), Integer(1)))), Mul(Integer(2), a, Pow(c, Integer(2)), d, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1))), Mul(Add(Mul(a, Pow(b, Integer(2)), g, Add(Mul(n, Add(p, Integer(2))), Integer(1))), Mul(Integer(-1), Mul(b, Pow(c, Integer(2)), d, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)))), Mul(Integer(-1), Mul(Integer(2), a, c, Mul(a, g, Add(n, Integer(1)))))), Pow(x, n))), x)), x)))))
    rubi.add(rule1453)

    pattern1454 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, n2_)), Mul(g_, Pow(x_, n3_)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (n3, f, e, n, c, x, g, n2, p, a, d)))
    rule1454 = ReplacementRule(pattern1454, lambda n3, f, e, n, c, x, g, n2, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Integer(-2), a, c, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Mul(Integer(-2), a, c, Add(Mul(c, e), Mul(Integer(-1), Mul(a, g)))), Pow(x, n))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, c, n, Add(p, Integer(1)), Mul(Integer(-4), a, c)), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, c, n, Add(p, Integer(1)), Mul(Integer(-4), a, c)), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(Integer(-2), a, c, Add(Mul(a, f), Mul(Integer(-1), Mul(c, d, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)))))), Mul(Mul(Integer(-2), a, c, Add(Mul(a, g, Add(n, Integer(1))), Mul(Integer(-1), Mul(c, e, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)))))), Pow(x, n))), x)), x)))))
    rubi.add(rule1454)

    pattern1455 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, n2_)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (f, e, n, c, x, n2, p, a, d)))
    rule1455 = ReplacementRule(pattern1455, lambda f, e, n, c, x, n2, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Integer(-2), a, Add(Mul(c, d), Mul(Integer(-1), Mul(a, f)))), Mul(Mul(Integer(-2), a, c, e), Pow(x, n))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, n, Add(p, Integer(1)), Mul(Integer(-4), a, c)), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, n, Add(p, Integer(1)), Mul(Integer(-4), a, c)), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(Integer(-2), a, Add(Mul(a, f), Mul(Integer(-1), Mul(c, d, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1)))))), Mul(Integer(-1), Mul(Mul(Integer(-2), a, c, e, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1))), Pow(x, n)))), x)), x)))))
    rubi.add(rule1455)

    pattern1456 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('c', Integer(1)), Pow(x_, n2_))), p_), Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, n_)), Mul(g_, Pow(x_, n3_)))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(g, x), FreeQ(n, x), cons(And(ZeroQ(Add(n2_, Mul(Integer(-1), Mul(Integer(2), n_)))), ZeroQ(Add(n3_, Mul(Integer(-1), Mul(Integer(3), n_)))), NegativeIntegerQ(Add(p_, Integer(1)))), (n3, e, n, c, x, g, n2, p, a, d)))
    rule1456 = ReplacementRule(pattern1456, lambda n3, e, n, c, x, g, n2, p, a, d : Add(Mul(Mul(Integer(-1), x), Add(Mul(Integer(-2), a, Pow(c, Integer(2)), d), Mul(Mul(Integer(-2), a, c, Add(Mul(c, e), Mul(Integer(-1), Mul(a, g)))), Pow(x, n))), Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Pow(Mul(a, c, n, Add(p, Integer(1)), Mul(Integer(-4), a, c)), Integer(-1)))), Mul(Integer(-1), Mul(Mul(Integer(1), Pow(Mul(a, c, n, Add(p, Integer(1)), Mul(Integer(-4), a, c)), Integer(-1))), Int(Mul(Pow(Add(a, Mul(c, Pow(x, Mul(Integer(2), n)))), Add(p, Integer(1))), Simp(Add(Mul(Integer(2), a, Pow(c, Integer(2)), d, Add(Mul(Integer(2), n, Add(p, Integer(1))), Integer(1))), Mul(Mul(Integer(-2), a, c, Add(Mul(a, g, Add(n, Integer(1))), Mul(Integer(-1), Mul(c, e, Add(Mul(n, Add(Mul(Integer(2), p), Integer(3))), Integer(1)))))), Pow(x, n))), x)), x)))))
    rubi.add(rule1456)

    pattern1457 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(4))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(6)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(ZeroQ(Add(Mul(Integer(9), Pow(c_, Integer(3)), Pow(d_, Integer(2))), Mul(Integer(-1), Mul(c_, Add(Pow(b_, Integer(2)), Mul(Integer(6), a_, c_)), d_, f_)), Mul(Pow(a_, Integer(2)), c_, Pow(f_, Integer(2))), Mul(Integer(2), a_, b_, Add(Mul(Integer(3), c_, d_), Mul(a_, f_)), g_), Mul(Integer(-1), Mul(Integer(12), Pow(a_, Integer(3)), Pow(g_, Integer(2)))))), ZeroQ(Add(Mul(Integer(3), Pow(c_, Integer(4)), Pow(d_, Integer(2)), e_), Mul(Integer(-1), Mul(Integer(3), Pow(a_, Integer(2)), Pow(c_, Integer(2)), d_, f_, g_)), Mul(Pow(a_, Integer(3)), c_, Pow(f_, Integer(2)), g_), Mul(Integer(2), Pow(a_, Integer(3)), Pow(g_, Integer(2)), Add(Mul(b_, f_), Mul(Integer(-1), Mul(Integer(6), a_, g_)))), Mul(Integer(-1), Mul(Pow(c_, Integer(3)), d_, Add(Mul(Integer(2), b_, d_, f_), Mul(a_, e_, f_), Mul(Integer(-1), Mul(Integer(12), a_, d_, g_))))))), NonzeroQ(Add(Mul(Integer(3), c_, d_), Mul(Integer(-1), Mul(a_, f_)))), NonzeroQ(Add(Mul(b_, c_, d_), Mul(Integer(-1), Mul(Integer(2), Pow(a_, Integer(2)), g_)))), NonzeroQ(Add(Mul(b_, c_, d_), Mul(Integer(-1), Mul(a_, b_, f_)), Mul(Integer(4), Pow(a_, Integer(2)), g_))), PosQ(Mul(Add(Mul(Mul(Integer(-1), a_), c_, Pow(f_, Integer(2))), Mul(Integer(12), Pow(a_, Integer(2)), Pow(g_, Integer(2))), Mul(f_, Add(Mul(Integer(3), Pow(c_, Integer(2)), d_), Mul(Integer(-1), Mul(Integer(2), a_, b_, g_))))), Pow(Mul(c_, g_, Add(Mul(Integer(3), c_, d_), Mul(Integer(-1), Mul(a_, f_)))), Integer(-1))))), (e, f, c, g, x, b, a, d)))
    rule1457 = ReplacementRule(pattern1457, lambda e, f, c, g, x, b, a, d : With(List(Set(Integer(q), Rt(Mul(Add(Mul(Mul(Integer(-1), a), c, Pow(f, Integer(2))), Mul(Integer(12), Pow(a, Integer(2)), Pow(g, Integer(2))), Mul(f, Add(Mul(Integer(3), Pow(c, Integer(2)), d), Mul(Integer(-1), Mul(Integer(2), a, b, g))))), Pow(Mul(c, g, Add(Mul(Integer(3), c, d), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Integer(2))), Set(Integer(r), Rt(Mul(Add(Mul(a, c, Pow(f, Integer(2))), Mul(Integer(4), g, Add(Mul(b, c, d), Mul(Pow(a, Integer(2)), g))), Mul(Integer(-1), Mul(f, Add(Mul(Integer(3), Pow(c, Integer(2)), d), Mul(Integer(2), a, b, g))))), Pow(Mul(c, g, Add(Mul(Integer(3), c, d), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Integer(2)))), Add(Mul(Mul(c, Pow(Mul(g, Integer(q)), Integer(-1))), ArcTan(Mul(Add(Integer(r), Mul(Integer(2), x)), Pow(Integer(q), Integer(-1))))), Mul(Integer(-1), Mul(Mul(c, Pow(Mul(g, Integer(q)), Integer(-1))), ArcTan(Mul(Add(Integer(r), Mul(Integer(-1), Mul(Integer(2), x))), Pow(Integer(q), Integer(-1)))))), Mul(Integer(-1), Mul(Mul(c, Pow(Mul(g, Integer(q)), Integer(-1))), ArcTan(Mul(Add(Mul(Integer(3), c, d), Mul(Integer(-1), Mul(a, f))), Mul(x, Pow(Mul(g, Integer(q), Add(Mul(b, c, d), Mul(Integer(-1), Mul(Integer(2), Pow(a, Integer(2)), g))), Add(Mul(b, c, d), Mul(Integer(-1), Mul(a, b, f)), Mul(Integer(4), Pow(a, Integer(2)), g))), Integer(-1))), Add(Mul(b, Pow(c, Integer(2)), d, f), Mul(Integer(-1), Mul(a, Pow(b, Integer(2)), f, g)), Mul(Integer(-1), Mul(Integer(2), Pow(a, Integer(2)), c, f, g)), Mul(Integer(6), Pow(a, Integer(2)), b, Pow(g, Integer(2))), Mul(c, Add(Mul(Integer(3), Pow(c, Integer(2)), d, f), Mul(Integer(-1), Mul(a, c, Pow(f, Integer(2)))), Mul(Integer(-1), Mul(b, c, d, g)), Mul(Integer(2), Pow(a, Integer(2)), Pow(g, Integer(2)))), Pow(x, Integer(2))), Mul(Pow(c, Integer(2)), g, Add(Mul(Integer(3), c, d), Mul(Integer(-1), Mul(a, f))), Pow(x, Integer(4)))))))))))
    rubi.add(rule1457)

    pattern1458 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('c', Integer(1)), Pow(x_, Integer(4)))), Pow(Add(d_, Mul(Wildcard.optional('e', Integer(1)), Pow(x_, Integer(2))), Mul(Wildcard.optional('f', Integer(1)), Pow(x_, Integer(4))), Mul(Wildcard.optional('g', Integer(1)), Pow(x_, Integer(6)))), Integer(-1))), x_), FreeQ(a, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), cons(And(ZeroQ(Add(Mul(Integer(9), Pow(c_, Integer(3)), Pow(d_, Integer(2))), Mul(Integer(-1), Mul(Integer(6), a_, Pow(c_, Integer(2)), d_, f_)), Mul(Pow(a_, Integer(2)), c_, Pow(f_, Integer(2))), Mul(Integer(-1), Mul(Integer(12), Pow(a_, Integer(3)), Pow(g_, Integer(2)))))), ZeroQ(Add(Mul(Integer(3), Pow(c_, Integer(4)), Pow(d_, Integer(2)), e_), Mul(Integer(-1), Mul(Integer(3), Pow(a_, Integer(2)), Pow(c_, Integer(2)), d_, f_, g_)), Mul(Pow(a_, Integer(3)), c_, Pow(f_, Integer(2)), g_), Mul(Integer(-1), Mul(Integer(12), Pow(a_, Integer(4)), Pow(g_, Integer(3)))), Mul(Integer(-1), Mul(a_, Pow(c_, Integer(3)), d_, Add(Mul(e_, f_), Mul(Integer(-1), Mul(Integer(12), d_, g_))))))), NonzeroQ(Add(Mul(Integer(3), c_, d_), Mul(Integer(-1), Mul(a_, f_)))), PosQ(Mul(Add(Mul(Mul(Integer(-1), a_), c_, Pow(f_, Integer(2))), Mul(Integer(12), Pow(a_, Integer(2)), Pow(g_, Integer(2))), Mul(Integer(3), Pow(c_, Integer(2)), d_, f_)), Pow(Mul(c_, g_, Add(Mul(Integer(3), c_, d_), Mul(Integer(-1), Mul(a_, f_)))), Integer(-1))))), (f, e, c, g, x, a, d)))
    rule1458 = ReplacementRule(pattern1458, lambda f, e, c, g, x, a, d : With(List(Set(Integer(q), Rt(Mul(Add(Mul(Mul(Integer(-1), a), c, Pow(f, Integer(2))), Mul(Integer(12), Pow(a, Integer(2)), Pow(g, Integer(2))), Mul(Integer(3), f, Pow(c, Integer(2)), d)), Pow(Mul(c, g, Add(Mul(Integer(3), c, d), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Integer(2))), Set(Integer(r), Rt(Mul(Add(Mul(a, c, Pow(f, Integer(2))), Mul(Integer(4), Pow(a, Integer(2)), Pow(g, Integer(2))), Mul(Integer(-1), Mul(Integer(3), Pow(c, Integer(2)), d, f))), Pow(Mul(c, g, Add(Mul(Integer(3), c, d), Mul(Integer(-1), Mul(a, f)))), Integer(-1))), Integer(2)))), Add(Mul(Mul(c, Pow(Mul(g, Integer(q)), Integer(-1))), ArcTan(Mul(Add(Integer(r), Mul(Integer(2), x)), Pow(Integer(q), Integer(-1))))), Mul(Integer(-1), Mul(Mul(c, Pow(Mul(g, Integer(q)), Integer(-1))), ArcTan(Mul(Add(Integer(r), Mul(Integer(-1), Mul(Integer(2), x))), Pow(Integer(q), Integer(-1)))))), Mul(Integer(-1), Mul(Mul(c, Pow(Mul(g, Integer(q)), Integer(-1))), ArcTan(Mul(Mul(c, Add(Mul(Integer(3), c, d), Mul(Integer(-1), Mul(a, f))), x, Add(Mul(Integer(2), Pow(a, Integer(2)), f, g), Mul(Integer(-1), Mul(Add(Mul(Integer(3), Pow(c, Integer(2)), d, f), Mul(Integer(-1), Mul(a, c, Pow(f, Integer(2)))), Mul(Integer(2), Pow(a, Integer(2)), Pow(g, Integer(2)))), Pow(x, Integer(2)))), Mul(Integer(-1), Mul(c, Add(Mul(Integer(3), c, d), Mul(Integer(-1), Mul(a, f))), g, Pow(x, Integer(4)))))), Pow(Mul(Integer(8), Pow(a, Integer(4)), Pow(g, Integer(3)), Integer(q)), Integer(-1)))))))))
    rubi.add(rule1458)

    pattern1459 = Pattern(Int(Mul(u_, Pow(v_, p_)), x_), cons(And(Integer(SimplifyFlag), RationalQ(p_), Less(p_, Integer(-1)), PolynomialQ(u_, x_), PolynomialQ(v_, x_), SumQ(v_), Not(And(MonomialQ(u_, x_), BinomialQ(v_, x_))), Not(And(ZeroQ(Coefficient(u_, x_, Integer(0))), ZeroQ(Coefficient(v_, x_, Integer(0)))))), (p, u, x, v)))
    rule1459 = ReplacementRule(pattern1459, lambda p, u, x, v : With(List(Set(Integer(m), Exponent(u, x)), Set(Integer(n), Exponent(v, x))), Condition(Module(List(Set(Integer(c), Mul(Coefficient(u, x, Integer(m)), Pow(Mul(Coefficient(v, x, Integer(n)), Add(Integer(m), Integer(1), Mul(Integer(n), p))), Integer(-1)))), Integer(w)), CompoundExpression(Set(Integer(w), Apart(Add(u, Mul(Integer(-1), Mul(Integer(c), Pow(x, Add(Integer(m), Mul(Integer(-1), Integer(n)))), Add(Mul(Add(Integer(m), Mul(Integer(-1), Integer(n)), Integer(1)), v), Mul(Add(p, Integer(1)), x, D(v, x)))))), x)), If(ZeroQ(Integer(w)), ShowStep(Integer("\n\nIf p>1), Integer(1<n<=m+1), Integer(and m+1-n*p<0), Integer(let c=pm/(qn*(m+1-n*p))), then if (Pm(x), -c*x^(m-n)*((m-n+1)*Qn(x), +(1-p)*x*D(Qn(x), x), Integer())==0), Integer("), "Int(Pm(x), /Qn(x), Integer(^p), x), Integer("), "c*x^(m-n+1)/Qn(x), Integer(^(p-1)"), Hold(Mul(Integer(c), Pow(x, Add(Integer(m), Mul(Integer(-1), Integer(n)), Integer(1))), Pow(v, Add(p, Integer(1)))))), ShowStep(Integer("If p>1), Integer(1<n<=m+1), Integer(and m+1-n*p<0), Integer(let c=pm/(qn*(m+1-n*p))), Integer(then"), "Int(Pm(x), /Qn(x), Integer(^p), x), Integer("), "c*x^(m-n+1)/Qn(x), ^(p-1)+Int((Pm(x), -c*x^(m-n)*((m-n+1)*Qn(x), +(1-p)*x*D(Qn(x), x), ))/Qn(x), Integer(^p), x), Integer("), Hold(Add(Mul(Integer(c), Pow(x, Add(Integer(m), Mul(Integer(-1), Integer(n)), Integer(1))), Pow(v, Add(p, Integer(1)))), Int(Mul(Integer(w), Pow(v, p)), x))))))), And(Inequality(Integer(1), Integer(Less), Integer(n), Integer(LessEqual), Add(Integer(m), Integer(1))), Less(Add(Integer(m), Mul(Integer(n), p)), Integer(-1)), FalseQ(DerivativeDivides(v, u, x))))))
    rubi.add(rule1459)

    return rubi
